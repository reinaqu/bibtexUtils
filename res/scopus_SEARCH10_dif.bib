@ARTICLE{Grishchenko201851,
	author = {Grishchenko, I. and Maffei, M. and Schneidewind, C.},
	title = {Foundations and tools for the static analysis of ethereum smart contracts},
	journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
	year = {2018},
	volume = {10981 LNCS},
	pages = {51-78},
	doi = {10.1007/978-3-319-96145-3_4},
	note = {cited By 4},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051137865&doi=10.1007%2f978-3-319-96145-3_4&partnerID=40&md5=3e9fb9b661ed9439677a6da3f799e3e3},
	affiliation = {TU Wien, Vienna, Austria},
	abstract = {The recent growth of the blockchain technology market puts its main cryptocurrencies in the spotlight. Among them, Ethereum stands out due to its virtual machine (EVM) supporting smart contracts, i.e., distributed programs that control the flow of the digital currency Ether. Being written in a Turing complete language, Ethereum smart contracts allow for expressing a broad spectrum of financial applications. The price for this expressiveness, however, is a significant semantic complexity, which increases the risk of programming errors. Recent attacks exploiting bugs in smart contract implementations call for the design of formal verification techniques for smart contracts. This, however, requires rigorous semantic foundations, a formal characterization of the expected security properties, and dedicated abstraction techniques tailored to the specific EVM semantics. This work will overview the state-of-the-art in smart contract verification, covering formal semantics, security definitions, and verification tools. We will then focus on EtherTrust [1], a framework for the static analysis of Ethereum smart contracts which includes the first complete small-step semantics of EVM bytecode, the first formal characterization of a large class of security properties for smart contracts, and the first static analysis for EVM bytecode that comes with a proof of soundness. © The Author(s) 2018.},
	keywords = {Computer aided analysis;  Computer circuits;  Computer programming languages;  Electronic money;  Formal verification;  Semantics, Abstraction techniques;  Distributed program;  Financial applications;  Security definitions;  Security properties;  Semantic foundation;  Small-step semantics;  Verification techniques, Static analysis},
	correspondence_address1 = {Grishchenko, I.; TU WienAustria; email: ilya.grishchenko@tuwien.ac.at},
	editor = {Weissenbacher G., Chockler H.},
	publisher = {Springer Verlag},
	issn = {03029743},
	isbn = {9783319961446},
	language = {English},
	abbrev_source_title = {Lect. Notes Comput. Sci.},
	document_type = {Conference Paper},
	source = {Scopus}
}

@CONFERENCE{NoAuthor2019,
	title = {Proceedings - 2018 Ivannikov ISP Ras Open Conference, ISPRAS 2018},
	journal = {Proceedings - 2018 Ivannikov Isp Ras Open Conference, ISPRAS 2018},
	year = {2019},
	page_count = {141},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85064154999&partnerID=40&md5=3c0caed42b55edc2630cf6ac10fdef54},
	abstract = {The proceedings contain 22 papers. The topics discussed include: compositional environment modeling for verification of GNU C programs; rock flow simulation by high-order quasi-characteristics scheme; the state of the art for blockchain-enabled smart-contract applications in the organization; generation of code for reading data from the declarative file format specifications written in language FlexT; lemma functions for Frama-C: C programs as proofs; energy consumption and quality of service optimization in containerized cloud computing; development and research of models of time mixed-frequency data on an example of the analysis of productivity of grain crops; rock flow simulation by high-order quasi-characteristics scheme; using adaptive nested mesh code HydroBox3D for numerical simulation of type Ia supernovae: merger of carbon-oxygen white dwarf stars, collapse, and non-central explosion; comparative estimation of QGDFoam solver accuracy for inviscid flow around a cone; and estimates of mass transport of the Antarctic bottom water with earth system model and data assimilation technique.},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	isbn = {9781728112756},
	language = {English},
	abbrev_source_title = {Proc. - Ivannikov Isp Ras Open Conf., ISPRAS},
	document_type = {Conference Review},
	source = {Scopus}
}

@CONFERENCE{Hardwick20181342,
	author = {Hardwick, F.S. and Akram, R.N. and Markantonakis, K.},
	title = {Fair and Transparent Blockchain Based Tendering Framework - A Step Towards Open Governance},
	journal = {Proceedings - 17th IEEE International Conference on Trust, Security and Privacy in Computing and Communications and 12th IEEE International Conference on Big Data Science and Engineering, Trustcom/BigDataSE 2018},
	year = {2018},
	pages = {1342-1347},
	doi = {10.1109/TrustCom/BigDataSE.2018.00185},
	art_number = {8456054},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85054056228&doi=10.1109%2fTrustCom%2fBigDataSE.2018.00185&partnerID=40&md5=b7b8aaaf398a77291423f64393693602},
	affiliation = {ISG-SCC, Royal Holloway, University of London, Egham, United Kingdom},
	abstract = {At a time when society is in constant transition to keep up with technological advancement, we are seeing traditional paradigms being increasingly challenged. The fundamentals of governance are one such paradigm. As society's values have shifted, so have expectations of government shifted from the traditional model to something commonly referred to as 'open governance'. Though a disputed term, we take open governance to mean a concept, which encourages and facilitates openness, accountability, and responsiveness to citizens. For the success of open governance initiatives, there are some technologies, such as the internet, that are crucial. These technologies enable access to both the data and to engagement activities between citizens and government. There are also other technologies, like blockchain and smart contacts, which could be utilised to assist open governance. A sound starting point would be moving from a system where information is tediously released by a government, on an 'as they please' basis, to an infrastructure where critical actions are captured with strong integrity, non-repudiation and evidential guarantees. With an added dimension that facilitates these actions record be accessible to public scrutiny in near realtime. One candidate technology for capturing such actions is blockchain. Initially, blockchains were mainly used to facilitate cryptocurrencies as a record of transactions. The notable example being bitcoin. However, in recent years, blockchains utility is being recognised through smart contracts - potentially a vital building block to realising open and transparent government activities. In this paper, we employ the concept of smart contracts to government tendering activities. The proposed scheme is based on smart contracts, enabling a fair, transparent and independently verifiable (auditable) government tendering scheme. The scheme is then implemented on the Ethereum platform to evaluate the performance and financial cost implications, along with an evaluation of the potential security and auditability challenges. © 2018 IEEE.},
	author_keywords = {Data Control;  GDPR;  Personal Identifiable Information;  User Centric;  User Oriented;  User Privacy},
	keywords = {Blockchain;  Data privacy;  Electronic money;  Natural language processing systems, Data control;  GDPR;  Personal Identifiable Information;  User oriented;  User privacy;  User-centric, Big data},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	isbn = {9781538643877},
	language = {English},
	abbrev_source_title = {Proc. - IEEE Int. Conf. Trust, Secur. Priv. Comput. Commun. IEEE Int. Conf. Big Data Sci. Eng., Trustcom/BigDataSE},
	document_type = {Conference Paper},
	source = {Scopus}
}

@ARTICLE{Owens2019389,
	author = {Owens, L. and Razet, B. and Smith, W.B. and Tanner, T.C., Jr.},
	title = {Inter-family communication in hyperledger sawtooth and its application to a crypto-asset framework},
	journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
	year = {2019},
	volume = {11319 LNCS},
	pages = {389-401},
	doi = {10.1007/978-3-030-05366-6_32},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85059945339&doi=10.1007%2f978-3-030-05366-6_32&partnerID=40&md5=165c1aba46578179b89ca33b3f80fab7},
	affiliation = {PokitDok, Charleston, United States},
	abstract = {Hyperledger Sawtooth is a general purpose blockchain project featuring pluggable consensus mechanisms and smart contracts that can be written in any general purpose programming language. We introduce a design pattern that enables communication between smart contracts for Hyperledger Sawtooth. The pattern is called Inter-Family Communication and we apply it to build a general crypto-asset framework where assets can be controlled by secondary smart contracts. The pattern is designed secure with formal models for Hyperledger Sawtooth and relevant concepts to the Inter-family Communication design pattern. © 2019, Springer Nature Switzerland AG.},
	keywords = {Artificial intelligence;  Computer science;  Computers, Design Patterns;  Family communication;  Formal model;  General-purpose programming language;  ITS applications;  Smart contracts, Distributed computer systems},
	correspondence_address1 = {Razet, B.; PokitDokUnited States; email: benoit.razet@pokitdok.com},
	editor = {Gopinathan S., Parida L., Fahrnberger G.},
	publisher = {Springer Verlag},
	issn = {03029743},
	isbn = {9783030053659},
	language = {English},
	abbrev_source_title = {Lect. Notes Comput. Sci.},
	document_type = {Conference Paper},
	source = {Scopus}
}

@ARTICLE{Wang2019291,
	author = {Wang, Y. and Bracciali, A. and Li, T. and Li, F. and Cui, X. and Zhao, M.},
	title = {Randomness invalidates criminal smart contracts},
	journal = {Information Sciences},
	year = {2019},
	volume = {477},
	pages = {291-301},
	doi = {10.1016/j.ins.2018.10.057},
	note = {cited By 2},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85055689232&doi=10.1016%2fj.ins.2018.10.057&partnerID=40&md5=6d2e4692198e977b62acb060550cf2b3},
	affiliation = {School of Information Science and Engineering, Qufu Normal University, China; Computer Sciences and Mathematics School of Natural Sciences, Stirling University, United Kingdom; School of Software, Tsinghua University, China},
	abstract = {A smart contract enforces specific performance on anonymous users without centralization. It facilitates payment equity in commerce by providing irreversible transactions. Smart contracts are also used for illegal activities such as money laundering and ransomware. Such contracts include criminal smart contracts (CSCs), proposed in CCS16, that can be efficiently implemented in existing scripting languages. This aggravates concerns about the dangers of CSCs. However, PublicLeaks, a CSC for leaking private data, is conditionally implemented as it is influenced by various factors. For example, PublicLeaks does not necessarily reach a desirable terminal state for a criminal leaking private information, and other possible terminal states may invalidate the CSC. In this study, we propose a CSC based on PublicLeaks by formulating random factors such as the donation ratio. Our contract forks into five terminal states, including a unique one in PublicLeaks due to randomness. We simulated the maximal probabilities of these terminal states and found that the desirable terminal state in PublicLeaks is reachable with low probabilities (lower than 25%). The terminal state where the criminal fails to leak private information is attained with relatively high probabilities (over 65%). Therefore, our simulations show that CSCs are not always as powerful as expected, and the risk posed by them can be mitigated. © 2018 Elsevier Inc.},
	author_keywords = {Criminal smart contract;  Donation ratio;  Randomness},
	keywords = {Random processes, Donation ratio;  High probability;  Illegal activities;  Money laundering;  Private information;  Randomness;  Scripting languages;  Smart contracts, Crime},
	correspondence_address1 = {Wang, Y.; School of Information Science and Engineering, Qufu Normal UniversityChina; email: wang_yilei2000@163.com},
	publisher = {Elsevier Inc.},
	issn = {00200255},
	coden = {ISIJB},
	language = {English},
	abbrev_source_title = {Inf Sci},
	document_type = {Article},
	source = {Scopus}
}

@ARTICLE{Yang201870331,
	author = {Yang, Z. and Lei, H.},
	title = {Optimization of executable formal interpreters developed in higher-order logic theorem proving systems},
	journal = {IEEE Access},
	year = {2018},
	volume = {6},
	pages = {70331-70348},
	doi = {10.1109/ACCESS.2018.2880692},
	art_number = {8531607},
	note = {cited By 2},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056492726&doi=10.1109%2fACCESS.2018.2880692&partnerID=40&md5=ddceb7fd09cb1fa107a978a79bb67c99},
	affiliation = {School of Information and Software Engineering, University of Electronic Science and Technology of China, Chengdu, 610054, China},
	abstract = {In recent publications, we presented a novel formal symbolic process virtual machine (FSPVM) framework that combined higher-order logic theorem proving and symbolic execution for verifying the reliability and security of smart contracts developed in the Ethereum blockchain system without suffering from standard issues surrounding reusability, consistency, and automation. A specific FSPVM, denoted as FSPVM-E, was developed in Coq based on a general, extensible, and reusable formal memory framework, an extensible and universal formal intermediate programming language, denoted as Lolisa, and a corresponding formally verified interpreter for Lolisa, denoted as FEther. However, our past work has demonstrated that the execution efficiency of the standard development of FEther is extremely low. As a result, FSPVM-E fails to achieve its expected verification effect. This paper addresses this issue by first identifying three root causes of the low execution efficiency of formal interpreters. We then build abstract models of these causes, and present respective optimization schemes for rectifying the identified conditions. Finally, we apply these optimization schemes to FEther, and demonstrate that its execution efficiency has been improved significantly. © 2013 IEEE.},
	author_keywords = {evaluation strategy;  Formal verification;  higher-order logic theorem proving;  interpreter;  security;  smart contracts},
	keywords = {Computer circuits;  Computer programming languages;  Efficiency;  Formal logic;  Formal verification;  Optimization;  Program interpreters;  Reusability;  Semantics;  Tools, Evaluation strategies;  Higher order logic theorem proving;  interpreter;  security;  Smart contracts;  Virtual machining, Theorem proving},
	correspondence_address1 = {Yang, Z.; School of Information and Software Engineering, University of Electronic Science and Technology of ChinaChina; email: zyang.uestc@gmail.com},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	issn = {21693536},
	language = {English},
	abbrev_source_title = {IEEE Access},
	document_type = {Article},
	source = {Scopus}
}

@CONFERENCE{Karinsalo2018135,
	author = {Karinsalo, A. and Halunen, K.},
	title = {Smart Contracts for a Mobility-as-a-Service Ecosystem},
	journal = {Proceedings - 2018 IEEE 18th International Conference on Software Quality, Reliability, and Security Companion, QRS-C 2018},
	year = {2018},
	pages = {135-138},
	doi = {10.1109/QRS-C.2018.00036},
	art_number = {8431964},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85052519694&doi=10.1109%2fQRS-C.2018.00036&partnerID=40&md5=8c2eb5054eacc4be877a84a655e9870b},
	affiliation = {VTT Technical Research Centre of Finland Ltd, Kaitoväylä 1, Oulu, Finland},
	abstract = {In the future, ecosystems for managing travel and all the associated services will be more diverse and innovative. These Mobility-as-a-Service (MaaS) ecosystems will combine services in an unforeseen way to enable fluent travel experiences. However, to succeed, MaaS ecosystems require integrators and enablers. Blockchains can serve as an technology enabler, but to reach their best potential blockchains need to tackle new business needs. MaaS ecosystems form an excellent arena for this. We present a model of a MaaS ecosystem, enabling easy, quick and trusted transactions taking advantage of artificial intelligence and blockchain-enabled smart contracts. We also present a subset demonstration of this model, TravelToken, which utilizes QR code that stores and uses travel information in smart contract over Ethereum. The benefits are that all travel data can be stored in one ticket, information stays unaltered in blockchain, and value-share as well as compensations in case of delays will be automatic. © 2018 IEEE.},
	author_keywords = {Lockchain;  Mobility-as-a-ServiceB;  Mobility-as-a-Servicelockchain;  Smart contract;  Smart contract},
	keywords = {Blockchain;  C (programming language);  Computer software selection and evaluation;  Software reliability, Business needs;  Lockchain;  QR codes;  Service ecosystems;  Smart contracts;  Travel experiences;  Travel information, Ecosystems},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	isbn = {9781538678398},
	language = {English},
	abbrev_source_title = {Proc. - IEEE Int. Conf. Softw. Qual., Reliab., Secur. Companion, QRS-C},
	document_type = {Conference Paper},
	source = {Scopus}
}

@ARTICLE{Chen2018405,
	author = {Chen, X. and Park, D. and Ro?u, G.},
	title = {A language-independent approach to smart contract verification},
	journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
	year = {2018},
	volume = {11247 LNCS},
	pages = {405-413},
	doi = {10.1007/978-3-030-03427-6_30},
	note = {cited By 1},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056472923&doi=10.1007%2f978-3-030-03427-6_30&partnerID=40&md5=31a409f67cef9328c01bdf8d11991971},
	affiliation = {University of Illinois at Urbana-Champaign, Champaign, United States; Runtime Verification Inc., Urbana, United States},
	abstract = {This invited paper reports the current progress on smart contract verification with the K framework in a language-independent style. © Springer Nature Switzerland AG 2018.},
	keywords = {Artificial intelligence;  Computer science;  Computers, Language independents;  Smart contracts, Formal methods},
	correspondence_address1 = {Chen, X.; University of Illinois at Urbana-ChampaignUnited States; email: xc3@illinois.edu},
	editor = {Margaria T., Steffen B.},
	publisher = {Springer Verlag},
	issn = {03029743},
	isbn = {9783030034269},
	language = {English},
	abbrev_source_title = {Lect. Notes Comput. Sci.},
	document_type = {Conference Paper},
	source = {Scopus}
}

@ARTICLE{Na20188716,
	author = {Na, S.H. and An, J.H. and Yang, J.S. and Park, Y.B.},
	title = {Conditional formalization of smart contract using semantic web rule language},
	journal = {Journal of Engineering and Applied Sciences},
	year = {2018},
	volume = {13},
	number = {Specialissue11},
	pages = {8716-8721},
	doi = {10.3923/jeasci.2018.8716.8721},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056467238&doi=10.3923%2fjeasci.2018.8716.8721&partnerID=40&md5=379bbd3c4aca1069d2f602ea6b6d0aef},
	affiliation = {Department of Computer Engineering Graduate School, Dankook University, Youngin, South Korea; Department of Electronics and Electrical Engineering, Dankook University, Youngin, South Korea; Department of Software Science, Dankook University, Youngin, South Korea},
	abstract = {As networking technologies evolve, distributed computer technologies such as the cloud are becoming more important. A blockchain is a kind of distributed computer technology in which all nodes have the same ledger to guarantee data integrity. Within a blockchain, smart contract defines the contexts of various items in the form of program code and acts as business logic. However, studies on existing smart contracts do not focus on formalizing rules themselves or managing conditional according to various situations. In this study, we formalize data related to smart contract and propose a method to apply conditional to various situation. This method models data of smart contract using ontology and applies semantic web rule language to conditional and manages rule sets in blockchain network. In this way interoperability of the smart contract type can be ensured and the relationship between the contexts in each transaction can be inferred by linking the ontology reasoner to the blockchain network. We describe the smart contract applying the semantic web rule language and show how to actually operate within the blockchain network through the program example. © Medwell Journals, 2018.},
	author_keywords = {Blockchain;  Ontology;  Ontology;  Smart contract;  SWRL;  Technologies},
	correspondence_address1 = {Park, Y.B.; Department of Software Science, Dankook UniversitySouth Korea},
	publisher = {Medwell Journals},
	issn = {1816949X},
	language = {English},
	abbrev_source_title = {J. Eng. Appl. Sci.},
	document_type = {Article},
	source = {Scopus}
}

@CONFERENCE{Chauhan2018122,
	author = {Chauhan, A. and Malviya, O.P. and Verma, M. and Mor, T.S.},
	title = {Blockchain and Scalability},
	journal = {Proceedings - 2018 IEEE 18th International Conference on Software Quality, Reliability, and Security Companion, QRS-C 2018},
	year = {2018},
	pages = {122-128},
	doi = {10.1109/QRS-C.2018.00034},
	art_number = {8431962},
	note = {cited By 2},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85052533135&doi=10.1109%2fQRS-C.2018.00034&partnerID=40&md5=64ef89e3f197e32b678d410ced5ebf26},
	affiliation = {Department of Information Technology, Delhi Technological University, New Delhi, India},
	abstract = {Bitcoin has shown great utility around the world with the drastic increase in its value and global consensus method of proof-of-work (POW). Over the years after the revolution in the digital transaction space, we are looking at major scalability issue with old POW consensus method and bitcoin peak limit of processing only 7 transactions per second. With more companies trying to adopt blockchain to modify their existing systems, blockchain working on old consensus methods and with scalability issues can't deliver the optimal solution. Specifically, with new trends like smart contracts and DAPPs, much better performance is needed to support any actual business applications. Such requirements are pushing the new platforms away from old methods of consensus and adoption of off-chain solutions. In this paper, we discuss various scalability issues with the Bitcoin and Ethereum blockchain and recent proposals like the lighting protocol, sharding, super quadratic sharding, DPoS to solve these issues. We also draw the comparison between these proposals on their ability to overcome scalability limits and highlighting major problems in these approaches. In the end, we propose our solution to suffice the scalability issue and conclude with the fact that with better scalability, blockchain has the potential to outrageously support varied domains of the industry. © 2018 IEEE.},
	author_keywords = {Bitcoin;  Blockchain;  DPoS;  Ethereum;  Inspector Node;  Lightning Protocol;  Sharding},
	keywords = {C (programming language);  Computer software selection and evaluation;  Electronic money;  Scalability;  Software reliability, Bitcoin;  DPoS;  Ethereum;  Inspector Node;  Lightning protocol;  Sharding, Blockchain},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	isbn = {9781538678398},
	language = {English},
	abbrev_source_title = {Proc. - IEEE Int. Conf. Softw. Qual., Reliab., Secur. Companion, QRS-C},
	document_type = {Conference Paper},
	source = {Scopus}
}

@CONFERENCE{Hildenbrandt2018204,
	author = {Hildenbrandt, E. and Saxena, M. and Rodrigues, N. and Zhu, X. and Daian, P. and Guth, D. and Moore, B. and Park, D. and Zhang, Y. and Stefanescu, A. and Rosu, G.},
	title = {KEVM: A complete formal semantics of the ethereum virtual machine},
	journal = {Proceedings - IEEE Computer Security Foundations Symposium},
	year = {2018},
	volume = {2018-July},
	pages = {204-217},
	doi = {10.1109/CSF.2018.00022},
	art_number = {8429306},
	note = {cited By 11},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85052123995&doi=10.1109%2fCSF.2018.00022&partnerID=40&md5=71adee5a98a460b9ecb0b1b20aef2f1d},
	affiliation = {University of Illinois at Urbana-Champaign: Computer Science, United States; University of Illinois at Urbana-Champaign: Mathematics, United States; Runtime Verification, Inc., United States; Cornell Tech, IC3, China; East China Normal University, Soft/Hardware Co-design Engineering Research Center, China},
	abstract = {A developing field of interest for the distributed systems and applied cryptography communities is that of smart contracts: Self-executing financial instruments that synchronize their state, often through a blockchain. One such smart contract system that has seen widespread practical adoption is Ethereum, which has grown to a market capacity of 100 billion USD and clears an excess of 500,000 daily transactions. Unfortunately, the rise of these technologies has been marred by a series of costly bugs and exploits. Increasingly, the Ethereum community has turned to formal methods and rigorous program analysis tools. This trend holds great promise due to the relative simplicity of smart contracts and bounded-time deterministic execution inherent to the Ethereum Virtual Machine (EVM). Here we present KEVM, an executable formal specification of the EVM's bytecode stack-based language built with the K Framework, designed to serve as a solid foundation for further formal analyses. We empirically evaluate the correctness and performance of KEVM using the official Ethereum test suite. To demonstrate the usability, several extensions of the semantics are presented. and two different-language implementations of the ERC20 Standard Token are verified against the ERC20 specification. These results are encouraging for the executable semantics approach to language prototyping and specification. © 2018 IEEE.},
	author_keywords = {blockchain;  ethereum;  ethereum-virtual-machine;  evm;  formal-methods;  k-framework;  kevm;  semantics;  smart-contract;  verification},
	keywords = {Blockchain;  Computer aided software engineering;  Formal methods;  Network security;  Security systems;  Semantics;  Verification;  Virtual machine, Deterministic execution;  ethereum;  Executable formal specification;  Executable semantics;  kevm;  Language implementations;  Smart contracts;  Stack-based languages, Formal specification},
	correspondence_address1 = {Hildenbrandt, E.; University of Illinois at Urbana-Champaign: Computer ScienceUnited States; email: hildenb2@illinois.edu},
	publisher = {IEEE Computer Society},
	issn = {19401434},
	isbn = {9781538666807},
	language = {English},
	abbrev_source_title = {Proc.IEEE Comput. Secur. Found. Symp.},
	document_type = {Conference Paper},
	source = {Scopus}
}

@ARTICLE{Worley2019264,
	author = {Worley, C.R. and Skjellum, A.},
	title = {Opportunities, challenges, and future extensions for smart-contract design patterns},
	journal = {Lecture Notes in Business Information Processing},
	year = {2019},
	volume = {339},
	pages = {264-276},
	doi = {10.1007/978-3-030-04849-5_24},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061620385&doi=10.1007%2f978-3-030-04849-5_24&partnerID=40&md5=b920e3cf055a51c3362f7b14f43aa4bf},
	affiliation = {Clemson University, Clemson, SC  29634, United States; University of Tennessee at Chattanooga, 701 E. ML King Jr. Blvd, Chattanooga, TN  37403, United States},
	abstract = {Blockchains enable the trustless establishment of long-term consensus. The primary paradigm for extending this capability to generalized use cases is smart contracts. Smart contracts have the advantages of trustlessness, immutability, transparency, censorship-resistance, and DDoS resistance, but suffer from immutability, chain-boundedness, high cost of storage and execution, and poor parallelizability. While the advantages of smart contracts create many opportunities, their unique properties impose important constraints. A suite of design patterns are therefore proposed as one methodology for addressing these constraints while taking full advantage of the opportunities that smart contracts provide. © Springer Nature Switzerland AG 2019.},
	author_keywords = {Blockchain;  Design pattern;  Ethereum;  Pattern language;  Smart contract},
	keywords = {Blockchain;  Ethereum;  Information use, Boundedness;  Contract design;  Design Patterns;  High costs;  Pattern languages, Information systems},
	correspondence_address1 = {Worley, C.R.; Clemson UniversityUnited States; email: cworley@g.clemson.edu},
	editor = {Abramowicz W., Paschke A.},
	publisher = {Springer Verlag},
	issn = {18651348},
	isbn = {9783030048488},
	language = {English},
	abbrev_source_title = {Lect. Notes Bus. Inf. Process.},
	document_type = {Conference Paper},
	source = {Scopus}
}

@ARTICLE{Galal2019265,
	author = {Galal, H.S. and Youssef, A.M.},
	title = {Verifiable sealed-bid auction on the ethereum blockchain},
	journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
	year = {2019},
	volume = {10958 LNCS},
	pages = {265-278},
	doi = {10.1007/978-3-662-58820-8_18},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85063420438&doi=10.1007%2f978-3-662-58820-8_18&partnerID=40&md5=36d974e1743e73227b8ec55dd16c0228},
	affiliation = {Concordia Institute for Information Systems Engineering, Concordia University, Montréal, QC, Canada},
	abstract = {The success of the Ethereum blockchain as a decentralized application platform with a distributed consensus protocol has made many organizations start to invest into running their business on top of it. Technically, the most impressive feature behind the success of Ethereum is its support for a Turing complete language. On the other hand, the inherent transparency and, consequently, the lack of privacy poses a great challenge for many financial applications. In this paper, we tackle this challenge and present a smart contract for a verifiable sealed-bid auction on the Ethereum blockchain. In a nutshell, initially, the bidders submit homomorphic commitments to their sealed-bids on the contract. Subsequently, they reveal their commitments secretly to the auctioneer via a public key encryption scheme. Then, according to the auction rules, the auctioneer determines and claims the winner of the auction. Finally, we utilize interactive zero-knowledge proof protocols between the smart contract and the auctioneer to verify the correctness of such a claim. The underlying protocol of the proposed smart contract is partially privacy-preserving. To be precise, no information about the losing bids is leaked to the bidders. We provide an analysis of the proposed protocol and the smart contract design, in addition to the estimated gas costs associated with the different transactions. © International Financial Cryptography Association 2019.},
	author_keywords = {Ethereum;  Sealed-bid auction;  Smart contract},
	keywords = {Blockchain;  Chromium compounds;  Finance;  Public key cryptography, Application platforms;  Contract design;  Distributed consensus;  Financial applications;  Privacy preserving;  Public-key encryption scheme;  Sealed-bid auctions;  Zero knowledge proof, Ethereum},
	correspondence_address1 = {Galal, H.S.; Concordia Institute for Information Systems Engineering, Concordia UniversityCanada; email: h_galal@ciise.concordia.ca},
	editor = {Eyal I., Sala M., Pintore F., Bracciali A., Zohar A., Clark J., Teague V.},
	publisher = {Springer Verlag},
	issn = {03029743},
	isbn = {9783662588192},
	language = {English},
	abbrev_source_title = {Lect. Notes Comput. Sci.},
	document_type = {Conference Paper},
	source = {Scopus}
}

@ARTICLE{Ferreira2018,
	author = {Ferreira, M. and Rodrigues, S. and Reis, C.I. and Maximiano, M.},
	title = {Blockchain: A tale of two applications},
	journal = {Applied Sciences (Switzerland)},
	year = {2018},
	volume = {8},
	number = {9},
	doi = {10.3390/app8091506},
	art_number = {1506},
	note = {cited By 1},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85052825086&doi=10.3390%2fapp8091506&partnerID=40&md5=5074d359a9b9607ee7766ff37f19198d},
	affiliation = {School of Technology and Management, Polytechnic Institute of Leiria, Leiria, 2411-901, Portugal; School of Technology and Management, Computer Science and Communication Research Centre (CIIC), Polytechnic Institute of Leiria, Leiria, 2411-901, Portugal},
	abstract = {Bitcoin continues to get more and more attention from the media, mainly because of the volatility of its value and insignificantly associated with the technological innovation. This cryptocurrency is supported by an immutable database and is distributed throughout a network of thousands of nodes, known as Blockchain. One way to ensure that all the concepts behind the Blockchain technology and infrastructure are seized is to conduct the development of one of the most popular context applications for it: a wallet for well-known cryptocurrencies. Yet Another Bitcoin Wallet (YABW) is a hybrid application available for both Android and iOS, which was developed with the Ionic and Angular frameworks. This application communicates with Bitcoin Blockchain to send, receive and store bitcoins; provides a set of features focused on security and user experience, and is available on the Play Store and Apple Store. A rather relevant issue that is becoming a major subject of current research is the application of the Blockchain infrastructure to other contexts that are neither directly connected to cryptocurrencies, nor are finance related. The implementation of a proof-of-concept application proposes the use of a blockchain for a specific case study: the exchange of meal vouchers of an institution amongst students. This is achieved using the decentralized platform Ethereum, which allows us to create a Smart Contract using the Solidity programming language to create a token that follows the Ethereum Request for Comment (ERC), the ERC-20 standard and represents the meal vouchers. This second application uses the architecture defined for YABW, reusing major components and custom developing specific modules to enhance the required features. There is still a lot of research to be done on the non-financial applicability of the Blockchain infrastructure and technology, but for the moment, we have left further evidence that it is possible and is a relative straight-forward process to accomplish from the technological perspective. © 2018 by the authors.},
	author_keywords = {Android;  Bitcoin;  Blockchain;  Cryptocurrency;  Decentralization;  ERC-20;  Ethereum;  Ionic;  IOS;  Mobile;  Proof-of-work;  Smart Contracts;  Solidity;  Transactions;  Wallets},
	correspondence_address1 = {Reis, C.I.; School of Technology and Management, Computer Science and Communication Research Centre (CIIC), Polytechnic Institute of LeiriaPortugal; email: catarina.reis@ipleiria.pt},
	publisher = {MDPI AG},
	issn = {20763417},
	language = {English},
	abbrev_source_title = {Appl. Sci.},
	document_type = {Article},
	source = {Scopus}
}

@BOOK{Iyer20181,
	author = {Iyer, K. and Dannen, C.},
	title = {Building games with ethereum smart contracts: Intermediate projects for solidity developers},
	journal = {Building Games with Ethereum Smart Contracts: Intermediate Projects for Solidity Developers},
	year = {2018},
	pages = {1-269},
	doi = {10.1007/978-1-4842-3492-1},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85053957075&doi=10.1007%2f978-1-4842-3492-1&partnerID=40&md5=f1e88a1f7653677e1fb1a35910b5aff1},
	affiliation = {Brooklyn, NY, United States},
	abstract = {Learn how to take your existing knowledge of Ethereum and Solidity to the next level. Hone your development skills and become more familiar with the syntax of the Solidity language by working through well-tested, well-documented intermediate-level sample projects. You will begin by covering the basics of Ethereum, Solidity, and gaming theory. From there, you will move onto sample projects that use smart contract engineering to create fun casino-style games that you can deploy and test on your friends and colleagues with real ether. All games are provably fair and auditable, so that players know the house won't always win!. Ideal for any reader with exposure to Ethereum, the techniques this book teaches are applicable to game developers, software engineers, web developers, and cryptocurrency enthusiasts. What You'll Learn. Use various features and best practices for smart contract programming in Ethereum and Solidity. Develop and deploy games of chance, similar to the kind you'd find in a casino. Create fun, easy projects with Ethereum. lntegrate the Ethereum blockchain into games. Who This Book Is For. Entry-level programmers with some exposure to Ethereum; game developers, Blockchain and cryptocurrency enthusiasts looking to add Ethereum and Solidity development to their skill set; software engineers and Web developers. © 2018 by Kedar Iyer and Chris Dannen. All Rights Reserved.},
	keywords = {Blockchain, Best practices;  Games of chance;  Gaming theories;  Intermediate level;  Skill sets;  Web developers, Ethereum},
	correspondence_address1 = {Iyer, K.United States},
	publisher = {Apress Media LLC},
	isbn = {9781484234921; 9781484234914},
	language = {English},
	abbrev_source_title = {Build. Games with Ethereum Smart Contract.: Intermed. Proj. for Solidity Dev.},
	document_type = {Book},
	source = {Scopus}
}

@ARTICLE{Nizamuddin2019183,
	author = {Nizamuddin, N. and Salah, K. and Ajmal Azad, M. and Arshad, J. and Rehman, M.H.},
	title = {Decentralized document version control using ethereum blockchain and IPFS},
	journal = {Computers and Electrical Engineering},
	year = {2019},
	volume = {76},
	pages = {183-197},
	doi = {10.1016/j.compeleceng.2019.03.014},
	note = {cited By 1},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85063633704&doi=10.1016%2fj.compeleceng.2019.03.014&partnerID=40&md5=1c1337a11868507466965cfdcdd3e965},
	affiliation = {ECE Department, Khalifa University of Science Technology, United Arab Emirates; Department of Computing and Mathematics, University of Derby, United Kingdom; School of Computing and Engineering, University of West London, United Kingdom; Department of Computer Science, National University of Computer and Emerging Sciences, Pakistan},
	abstract = {In this paper, we propose a blockchain-based solution and framework for document sharing and version control to facilitate multi-user collaboration and track changes in a trusted, secure, and decentralized manner, with no involvement of a centralized trusted entity or third party. This solution is based on utilizing Ethereum smart contracts to govern and regulate the document version control functions among the creators and developers of the document and its validators. Moreover, our solution leverages the benefits of IPFS (InterPlanetary File System) to store documents on a decentralized file system. The proposed solution automates necessary interactions among multiple actors comprising developers and approvers. Smart contracts have been developed using Solidity language, and their functionalities were tested using the Remix IDE (Integrated Development Environment). The paper demonstrates that our smart contract code is free of commonly known security vulnerabilities and attacks. The code has been made publically available at Github. © 2019 Elsevier Ltd},
	author_keywords = {Blockchain;  Document Sharing;  Ethereum Smart Contracts;  Integrative Collaboration;  IPFS;  Version Control},
	keywords = {Blockchain;  File organization;  Information management, Document sharing;  Document version;  Integrated development environment;  Integrative Collaboration;  IPFS;  Multi-user collaboration;  Security vulnerabilities;  Version control, Ethereum},
	correspondence_address1 = {Ajmal Azad, M.; Department of Computing and Mathematics, University of DerbyUnited Kingdom; email: m.azad@derby.ac.uk},
	publisher = {Elsevier Ltd},
	issn = {00457906},
	coden = {CPEEB},
	language = {English},
	abbrev_source_title = {Comput Electr Eng},
	document_type = {Article},
	source = {Scopus}
}

@CONFERENCE{deKruijff2019,
	author = {de Kruijff, J. and Weigand, H.},
	title = {Introducing commitRuleML for smart contracts},
	journal = {CEUR Workshop Proceedings},
	year = {2019},
	volume = {2383},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85067818706&partnerID=40&md5=029729fd33da770453e70459d9bb12b2},
	affiliation = {Tilburg University, P.O. Box 90153, Tilburg, 5000 LE, Netherlands},
	abstract = {This short paper takes a closer look at the Event Calculus and the formalisms for representing and reasoning about the effects of automated actions and the commitments that result from them. Since the Event Calculus deals with local events and the consideration of time, it enables the uniform representation of basic-, conditional and persistent commitments, including its operations and reasoning rules about them. Due to the similarities between event, action and state processing and reaction rules, we extend KR ReactionRuleML to emphasize syntax and semantics relevant for commitments, called CommitRuleML. CommitRuleML is used to define commitment-based smart contracts (CBSCs) as contracts that logically (through the Event Calculus) define events (on), conditions (if) and actions (do) in an executable language. A simplified running example illustrates how commitments evolve and fulfill over time. © 2019 CEUR-WS. All rights reserved.},
	author_keywords = {CommitRuleML;  Event Calculus;  KR ReactionRuleML;  Smart Contracts},
	keywords = {Logic programming;  Ontology;  Semantics, CommitRuleML;  Event calculus;  Reaction rules;  Reasoning rules, Calculations},
	editor = {Johannesson P., Weigand H., Andersson B.},
	publisher = {CEUR-WS},
	issn = {16130073},
	language = {English},
	abbrev_source_title = {CEUR Workshop Proc.},
	document_type = {Conference Paper},
	source = {Scopus}
}

@CONFERENCE{Liu2018814,
	author = {Liu, H. and Liu, C. and Zhao, W. and Jiang, Y. and Sun, J.},
	title = {S-gram: Towards semantic-aware security auditing for ethereum smart contracts},
	journal = {ASE 2018 - Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering},
	year = {2018},
	pages = {814-819},
	doi = {10.1145/3238147.3240728},
	note = {cited By 2},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056528612&doi=10.1145%2f3238147.3240728&partnerID=40&md5=9d1dfa4b681eccff03bc3bac713f7235},
	affiliation = {School of Software, Tsinghua University, Beijing, China; Peking University, Beijing, China; Ant Fortune Business Group Ant Financial, Beijing, China; Beijing National Research Center for Information Science and Technology, United States},
	abstract = {Smart contracts, as a promising and powerful application on the Ethereum blockchain, have been growing rapidly in the past few years. Since they are highly vulnerable to different forms of attacks, their security becomes a top priority. However, existing security auditing techniques are either limited in finding vulnerabilities (rely on pre-defined bug patterns) or very expensive (rely on program analysis), thus are insufficient for Ethereum. To mitigate these limitations, we proposed a novel semantic-aware security auditing technique called S-gram for Ethereum. The key insight is a combination of N-gram language modeling and lightweight static semantic labeling, which can learn statistical regularities of contract tokens and capture high-level semantics as well (e.g., flow sensitivity of a transaction). S-gram can be used to predict potential vulnerabilities by identifying irregular token sequences and optimize existing in-depth analyzers (e.g., symbolic execution engines, fuzzers etc.). We have implemented S-gram for Solidity smart contracts in Ethereum. The evaluation demonstrated the potential of S-gram in identifying possible security issues. © 2018 Association for Computing Machinery.},
	author_keywords = {Language modeling;  Security auditing;  Smart contracts;  Static semantic labeling},
	keywords = {Computational linguistics;  High level languages;  Modeling languages;  Semantics, High level semantics;  Language model;  N-gram language models;  Security auditing;  Smart contracts;  Static semantics;  Statistical regularity;  Symbolic execution, Software engineering},
	correspondence_address1 = {Liu, H.; School of Software, Tsinghua UniversityChina; email: liuhan2017@tsinghua.edu.cn},
	editor = {Kastner C., Huchard M., Fraser G.},
	publisher = {Association for Computing Machinery, Inc},
	isbn = {9781450359375},
	language = {English},
	abbrev_source_title = {ASE - Proc. ACM/IEEE Int. Conf. Autom. Soft. Eng.},
	document_type = {Conference Paper},
	source = {Scopus}
}

@CONFERENCE{Christiaanse201983,
	author = {Christiaanse, R.},
	title = {Mobility as a service a valuecentric approach to design},
	journal = {The Web Conference 2019 - Companion of the World Wide Web Conference, WWW 2019},
	year = {2019},
	pages = {83-92},
	doi = {10.1145/3308560.3317050},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85066909697&doi=10.1145%2f3308560.3317050&partnerID=40&md5=c42956093669a7f49c6db321c1eeb4f1},
	affiliation = {TUDelft Delft, South-Holland EFCO BV, Amsterdam, Netherlands},
	abstract = {MAAS as a mobility model leans on the idea that a gap between private and public transport systems needs to be bridged as well as on a city, intercity, national and supranational level. The current situation is felt problematic due to the fragmented tools and services often organized in silos to meet a traveler needs to undertake a trip. One of the major concerns designing any platform system like Mobility as a Service is where to start modeling and how to express the notion of the platform system in some language that is understandable for all stakeholders of the platform system. Understandability buttresses the expectation of stakeholders whether some design will probably implement the intended platform services enabling users to actually buy and or use the platform system for what ever purpose. Building on the economic theories of two-sided markets and mechanism design we introduce the concept of value nets extending the Contract Protocol Net. Value net modeling offers a precise abstract representation which provides in the detailed informational requirements in a canonical form and it connects i.e. implements the abstract notion of Service Oriented Architecture characterizing systems without loss of crucial informational elements. ? 2019 IW3C2 (International World Wide Web Conference Committee), published under Creative Commons CC-BY-NC-ND 4.0 License.},
	author_keywords = {Mechanism design;  Mobility as a Service;  Smart contracts;  Two-sided markets;  Value net modelling},
	keywords = {Commerce;  Information services;  Machine design;  Modeling languages;  World Wide Web, Abstract representation;  Contract protocols;  Current situation;  Economic theories;  Mechanism design;  Public transport systems;  Two-sided markets;  Value-net, Service oriented architecture (SOA)},
	correspondence_address1 = {Christiaanse, R.; TUDelft Delft, South-Holland EFCO BVNetherlands; email: r.christiaanse@efco-solutions.nl},
	publisher = {Association for Computing Machinery, Inc},
	isbn = {9781450366755},
	language = {English},
	abbrev_source_title = {Web Conf. - Companion World Wide Web Conf., WWW},
	document_type = {Conference Paper},
	source = {Scopus}
}

@ARTICLE{Viriyasitavat2019,
	author = {Viriyasitavat, W. and Xu, L.D. and Bi, Z. and Pungpapong, V.},
	title = {Blockchain and Internet of Things for Modern Business Process in Digital Economy--the State of the Art},
	journal = {IEEE Transactions on Computational Social Systems},
	year = {2019},
	doi = {10.1109/TCSS.2019.2919325},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85068110315&doi=10.1109%2fTCSS.2019.2919325&partnerID=40&md5=72a42d92df4c6d9cb5b2b0a8a2b311a2},
	affiliation = {Department of Statistics Faculty of Commerce and Accountancy, Chulalongkorn University Faculty of Commerce and Accountancy, Bangkok 10330, Thailand (e-mail: hardgolf@gmail.com).; Department of IT and DS, Old Dominion University, Norfolk, VA 23529 USA.; School of Mechanical Engineering, Indiana University, Fort Wayne, IN 46805-1499 USA.; Chulalongkorn University Faculty of Commerce and Accountancy, Bangkok 10330, Thailand.},
	abstract = {In addition to functionalities, business process management (BPM) involves several key indicators such as openness, security, flexibility, and scalability. Optimizing system performance is becoming a great challenge for an ever-increasing large-scale distributed application system in the digital economy on the Internet of Things (IoT) era. In a centralized BPM, many indicators, such as security and openness, or cost and flexibility, are conflicting with each other. For example, inviting new partners across enterprises, domains, and regions to form a service workflow exposes new risks and needs additional security mechanisms for scrutiny; enhancing the flexibility of business workflow compositions increases the cost of security assurance. Blockchain technology (BCT) has thrown the light on the development of vital solutions to various BPM problems. BCT has to be integrated with other BPM system components that often involve IoT devices to implement specified functionalities related to the application. Currently, the potentials of using BCT have been explored although still at an early stage. In this paper, the states of the art are presented to identify emerging research topics, challenges, and promising applications in integrating BCT into the development of BPM. IEEE},
	author_keywords = {Blockchain;  business process management (BPM);  cyber physical system;  Industry 4.0;  Internet of Things (IoT);  service composition;  service selection;  service workflow.;  service-oriented architecture (SoA);  smart contract;  specification language},
	keywords = {Blockchain;  Cyber Physical System;  Embedded systems;  Enterprise resource management;  Industry 4.0;  Information services;  Network security;  Service oriented architecture (SOA);  Specification languages, Business process management;  Internet of Things (IOT);  Service compositions;  Service selection;  Service-workflow, Internet of things},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	issn = {2329924X},
	language = {English},
	abbrev_source_title = {IEEE Trans. Computat. Soc. Syst.},
	document_type = {Article},
	source = {Scopus}
}

@CONFERENCE{Torres2018664,
	author = {Torres, C.F. and Schütte, J. and State, R.},
	title = {Osiris: Hunting for integer bugs in ethereum smart contracts},
	journal = {ACM International Conference Proceeding Series},
	year = {2018},
	pages = {664-676},
	doi = {10.1145/3274694.3274737},
	note = {cited By 1},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85060045114&doi=10.1145%2f3274694.3274737&partnerID=40&md5=2424ab44a499619775f89603cd0fc5c4},
	affiliation = {SnT, University of Luxembourg, Luxembourg, Luxembourg; Fraunhofer AISEC, Garching, Germany},
	abstract = {The capability of executing so-called smart contracts in a decentralised manner is one of the compelling features of modern blockchains. Smart contracts are fully fledged programs which cannot be changed once deployed to the blockchain. They typically implement the business logic of distributed apps and carry billions of dollars worth of coins. In that respect, it is imperative that smart contracts are correct and have no vulnerabilities or bugs. However, research has identified different classes of vulnerabilities in smart contracts, some of which led to prominent multi-million dollar fraud cases. In this paper we focus on vulnerabilities related to integer bugs, a class of bugs that is particularly difficult to avoid due to some characteristics of the Ethereum Virtual Machine and the Solidity programming language. In this paper we introduce OSIRIS - a framework that combines symbolic execution and taint analysis, in order to accurately find integer bugs in Ethereum smart contracts. Osiris detects a greater range of bugs than existing tools, while providing a better speci-ficity of its detection. We have evaluated its performance on a large experimental dataset containing more than 1.2 million smart contracts. We found that 42,108 contracts contain integer bugs. Besides being able to identify several vulnerabilities that have been reported in the past few months, we were also able to identify a yet unknown critical vulnerability in a couple of smart contracts that are currently deployed on the Ethereum blockchain. © 2018 Association for Computing Machinery.},
	author_keywords = {Ethereum;  Integer bugs;  Smart contracts;  Symbolic execution;  Taint analysis},
	keywords = {Blockchain;  Carry logic;  Integer programming;  Model checking;  Security of data, Ethereum;  Integer bugs;  Smart contracts;  Symbolic execution;  Taint analysis, Program debugging},
	publisher = {Association for Computing Machinery},
	isbn = {9781450365697},
	language = {English},
	abbrev_source_title = {ACM Int. Conf. Proc. Ser.},
	document_type = {Conference Paper},
	source = {Scopus}
}

@ARTICLE{Sergey2018323,
	author = {Sergey, I. and Kumar, A. and Hobor, A.},
	title = {Temporal properties of smart contracts},
	journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
	year = {2018},
	volume = {11247 LNCS},
	pages = {323-338},
	doi = {10.1007/978-3-030-03427-6_25},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056473243&doi=10.1007%2f978-3-030-03427-6_25&partnerID=40&md5=1e2706ccb7f0d2886fc1406578287900},
	affiliation = {University College London, London, United Kingdom; Zilliqa Research, Singapore, Singapore; Zilliqa Research, London, United Kingdom; Yale-NUS College and School of Computing, NUS, Singapore, Singapore},
	abstract = {Smart contractsshared stateful reactive objects stored on a blockchainare widely employed nowadays for mediating exchanges of crypto-currency between multiple untrusted parties. Despite a lot of attention given by the formal methods community to the notion of smart contract correctness, only a few efforts targeted their lifetime properties. In this paper, we focus on reasoning about execution traces of smart contracts. We report on our preliminary results of mechanically verifying some of such properties by embedding a smart contract language into the Coq proof assistant. We also discuss several common scenarios, all of which require multi-step blockchain-based arbitration and thus must be implemented via stateful contracts, and discuss possible temporal specifications of the corresponding smart contract implementations. © Springer Nature Switzerland AG 2018.},
	keywords = {Blockchain;  Theorem proving, Coq proof assistant;  Execution trace;  Multi-step;  Smart contracts;  Temporal property;  Temporal specification, Formal methods},
	correspondence_address1 = {Sergey, I.; Zilliqa ResearchSingapore; email: ilya@zilliqa.com},
	editor = {Margaria T., Steffen B.},
	publisher = {Springer Verlag},
	issn = {03029743},
	isbn = {9783030034269},
	language = {English},
	abbrev_source_title = {Lect. Notes Comput. Sci.},
	document_type = {Conference Paper},
	source = {Scopus}
}

@CONFERENCE{Zafar201819,
	author = {Zafar, M.A. and Sher, F. and Janjua, M.U. and Baset, S.},
	title = {SOL2JS: Translating solidity contracts into Javascript for hyperledger fabric},
	journal = {SERIAL 2018 - Proceedings of the 2018 Workshop on Scalable and Resilient Infrastructures for Distributed Ledgers},
	year = {2018},
	pages = {19-24},
	doi = {10.1145/3284764.3284768},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061824191&doi=10.1145%2f3284764.3284768&partnerID=40&md5=e2085d2548ad1ed87053629f6f29bf1f},
	affiliation = {Information Technology University, Lahore, Pakistan; IBM, United States},
	abstract = {Could smart contracts written in Solidity, a popular language among blockchain developers for Ethereum, be run on other blockchain platforms such as Hyperleger Fabric. To run Solidity smart contracts on another blockchain platform, one can either incorporate the Ethereum Virtual Machine (EVM) in the target blockchain, or perform a source-to-source translation of the Solidity contracts to a smart contract language for the target platform. This paper presents Sol2js, an open source source-to-source translation tool that generates Javascript smart contracts for Hyperledger Fabric from Solidity contracts, and provides a conceptual mapping of Ethereum constructs to that of Hyperleger Fabric, where possible. Presently, the tool is able to successfully translate 65-70% of Solidity constructs including major types, functions, inheritance, and events. The preliminary results show that the average of the lines of code (loc) across translated contracts is 7.5x more than the average of Solidity contracts loc while preserving contract semantics. © 2018 Association for Computing Machinery.},
	keywords = {Blockchain;  Ethereum;  High level languages;  Middleware;  Semantics, Conceptual mapping;  Contract languages;  Javascript;  Lines of code;  Open sources;  Source-to-source translations, Translation (languages)},
	publisher = {Association for Computing Machinery, Inc},
	isbn = {9781450361101},
	language = {English},
	abbrev_source_title = {SERIAL - Proc. Workshop Scalable Resilient Infrastructures Distrib. Ledgers},
	document_type = {Conference Paper},
	source = {Scopus}
}

@CONFERENCE{Pervez2019276,
	author = {Pervez, H. and Haq, I.U.},
	title = {Blockchain and IoT Based Disruption in Logistics},
	journal = {2019 2nd International Conference on Communication, Computing and Digital Systems, C-CODE 2019},
	year = {2019},
	pages = {276-281},
	doi = {10.1109/C-CODE.2019.8680971},
	art_number = {8680971},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85064739824&doi=10.1109%2fC-CODE.2019.8680971&partnerID=40&md5=7e600fadbf1eed2303cd1544ed132f2b},
	affiliation = {Pakistan Inst. of Engineering and Applied Sciences (PIEAS), Pakistan},
	abstract = {Blockchain technology along with Internet of Things (IoT) and Cloud Computing is expected to cause disruption in the existing business processes at unprecedented scale. Smart Contracts which represent business logic are consolidated by blockchain architecture. A smart contract is a self-executing program that may be triggered on events generated by IoT sensors, actuators or tags. Blockchain and smart contracts which find their optimum suitability in multiparty arrangements are anticipated to bring a paradigm shift in the domains of Supply-chain and logistics. This paper presents a comprehensive analysis of the disruptive innovation happening in the logistics processes due to blockchain, smart contracts and Internet of Things. We highlight the some of the most important Key Performance Indicators (KPIs) of the logistics domain being positively affected due to this digital disruption and the required characteristics in the blockchain technologies for this paradigm shift to take place. © 2019 IEEE.},
	keywords = {Benchmarking;  Blockchain;  C (programming language);  Computation theory;  Supply chains, Business logic;  Business Process;  Comprehensive analysis;  Disruptive innovations;  Internet of Things (IOT);  Key performance indicators;  Logistics process;  Paradigm shifts, Internet of things},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	isbn = {9781538696095},
	language = {English},
	abbrev_source_title = {Int. Conf. Commun., Comput. Digit. Syst., C-CODE},
	document_type = {Conference Paper},
	source = {Scopus}
}

@CONFERENCE{Tikhomirov20189,
	author = {Tikhomirov, S. and Voskresenskaya, E. and Ivanitskiy, I. and Takhaviev, R. and Marchenko, E. and Alexandrov, Y.},
	title = {SmartCheck: Static analysis of ethereum smart contracts},
	journal = {Proceedings - International Conference on Software Engineering},
	year = {2018},
	pages = {9-16},
	doi = {10.1145/3194113.3194115},
	note = {cited By 4},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051682095&doi=10.1145%2f3194113.3194115&partnerID=40&md5=3c4aa950d453bbe00789cd832c040b6b},
	affiliation = {University of Luxembourg, Esch-sur-Alzette, Luxembourg; SmartDec, Moscow, Russian Federation},
	abstract = {Ethereum is a major blockchain-based platform for smart contracts - Turing complete programs that are executed in a decentralized network and usually manipulate digital units of value. Solidity is the most mature high-level smart contract language. Ethereum is a hostile execution environment, where anonymous attackers exploit bugs for immediate financial gain. Developers have a very limited ability to patch deployed contracts. Hackers steal up to tens of millions of dollars from flawed contracts, a well-known example being "The DAO", broken in June 2016. Advice on secure Ethereum programming practices is spread out across blogs, papers, and tutorials. Many sources are outdated due to a rapid pace of development in this field. Automated vulnerability detection tools, which help detect potentially problematic language constructs, are still underdeveloped in this area. We provide a comprehensive classification of code issues in Solidity and implement SmartCheck - an extensible static analysis tool that detects them 1 . SmartCheck translates Solidity source code into an XML-based intermediate representation and checks it against XPath patterns. We evaluated our tool on a big dataset of real-world contracts and compared the results with manual audit on three contracts. Our tool reflects the current state of knowledge on Solidity vulnerabilities and shows significant improvements over alternatives. SmartCheck has its limitations, as detection of some bugs requires more sophisticated techniques such as taint analysis or even manual audit. We believe though that a static analyzer should be an essential part of contract developers' toolbox, letting them fix simple bugs fast and allocate more effort to complex issues. © 2018 ACM.},
	author_keywords = {bug detection;  Ethereum;  smart contracts;  Solidity;  static analysis},
	keywords = {Big data;  Blockchain;  High level languages;  Personal computing;  Software engineering, Bug detection;  Decentralized networks;  Ethereum;  Execution environments;  Intermediate representations;  Smart contracts;  Solidity;  Vulnerability detection, Static analysis},
	publisher = {IEEE Computer Society},
	issn = {02705257},
	isbn = {9781450357265},
	coden = {PCSED},
	language = {English},
	abbrev_source_title = {Proc Int Conf Software Eng},
	document_type = {Conference Paper},
	source = {Scopus}
}

@ARTICLE{Miller2018280,
	author = {Miller, A. and Cai, Z. and Jha, S.},
	title = {Smart contracts and opportunities for formal methods},
	journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
	year = {2018},
	volume = {11247 LNCS},
	pages = {280-299},
	doi = {10.1007/978-3-030-03427-6_22},
	note = {cited By 1},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056486725&doi=10.1007%2f978-3-030-03427-6_22&partnerID=40&md5=6d67e380d500257d8d9f3fadec6cec2b},
	affiliation = {University of Illinois at Urbana-Champaign, Champaign, United States; University of Wisconsin Madison, Madison, United States},
	abstract = {Smart contracts are programs that run atop of a blockchain infrastructure. They have emerged as an important new programming model in cryptocurrencies like Ethereum, where they regulate flow of money and other digital assets according to user-defined rules. However, the most popular smart contract languages favor expressiveness rather than safety, and bugs in smart contracts have already lead to significant financial losses from accidents. Smart contracts are also appealing targets for hackers since they can be monetized. For these reasons, smart contracts are an appealing opportunity for systematic auditing and validation, and formal methods in particular. In this paper, we survey the existing smart-contract ecosystem and the existing tools for analyzing smart contracts. We then pose research challenges for formal-methods and program analysis applied to smart contracts. © Springer Nature Switzerland AG 2018.},
	keywords = {Losses;  Personal computing, Digital assets;  Financial loss;  Program analysis;  Programming models;  Research challenges;  Smart contracts, Formal methods},
	correspondence_address1 = {Miller, A.; University of Illinois at Urbana-ChampaignUnited States; email: soc1024@illinois.edu},
	editor = {Margaria T., Steffen B.},
	publisher = {Springer Verlag},
	issn = {03029743},
	isbn = {9783030034269},
	language = {English},
	abbrev_source_title = {Lect. Notes Comput. Sci.},
	document_type = {Conference Paper},
	source = {Scopus}
}

@ARTICLE{Dhanalakshmi2018423,
	author = {Dhanalakshmi, S. and Obula Reddy, B.G. and Yogitha Lakshmi, K.},
	title = {Building a blockchain approach with hyperledger transaction flow and distributed consensus algorithms},
	journal = {International Journal of Innovative Technology and Exploring Engineering},
	year = {2018},
	volume = {8},
	number = {2S},
	pages = {423-426},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061770571&partnerID=40&md5=6dfb33781d4bc62da4eead6f870befbb},
	affiliation = {Department of CSE, Malla Reddy Engineering College (A)Telangana, India},
	abstract = {Blockchain is an important, emerging technology and specifying lot of possibilities, its very much trending topic in recent years. Bitcon is well known implementation of block chain technology, Bitcoin in cryptocurrency has turned the recognition of the universe towards a unique technology. Its benefit as decentralization, persistency and consistency of sharing the informations, blockchain is a distributed ledger that can record transactions efficiently verifiable and permanent way between two parties. Blockchain technologies focus on various applications perspectives and discuss the new technological challenges in confidentiality, integrity, authentication, internet of things and smart contract etc. it can be used to record the peer to peer network with public or private key pair of transactions, authors signed the transactions to be verified with key pair, save the transactions in blockchain network, once the transaction verified it cannot be altered subsequently. This paper present and focus on various techniques of hyperledger fabric systems architecture, transaction flow, membership and identity management, then understanding of hyperledger fabric with consensus algorithms. Hyperledger is one of the fastest growing open-source blockchain, it can dozens of company working together, building a blockchain fabric that can support the framework to test the interaction between application and secure blockchain networks, that require every peer to execute every transaction maintain a ledger and run consensus, does not support private blockchain and confidentiality. The first block chain systems is hyperledger fabric run on distributed applications with multiple programming language. © BEIESP.},
	author_keywords = {Blockchain;  Blockchain;  Consensus agorithms;  Hyperledger fabric;  Peer-to-peer network;  Private-public key pair;  Smart contract},
	publisher = {Blue Eyes Intelligence Engineering and Sciences Publication},
	issn = {22783075},
	language = {English},
	abbrev_source_title = {Int. J. Innov. Technol. Explor. Eng.},
	document_type = {Article},
	source = {Scopus}
}

@ARTICLE{Valliappan2018414,
	author = {Valliappan, N. and Mirliaz, S. and Lobo Vesga, E. and Russo, A.},
	title = {Towards adding variety to simplicity},
	journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
	year = {2018},
	volume = {11247 LNCS},
	pages = {414-431},
	doi = {10.1007/978-3-030-03427-6_31},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056450107&doi=10.1007%2f978-3-030-03427-6_31&partnerID=40&md5=e98fa38b832ecf8af70eb287a0acaf80},
	affiliation = {Chalmers University of Technology, Gothenburg, Sweden; ENS Rennes, Rennes, France},
	abstract = {Simplicity is a Turing-incomplete typed combinator language for smart contracts with a formal semantics. The design of Simplicity makes it possible to statically estimate the resources (e.g., memory) required to execute contracts. Such a feature is highly relevant in blockchain applications to efficiently determine fees to run smart contracts. Despite being Turing incomplete, the language is capable of expressing non-trivial contracts. Often, Simplicity programs contain lots of code repetition that could otherwise be avoided if it had common programming languages features, such as local definitions, functions, and bounded loops. In this work, we provide the foundations to make Simplicity a richer language. To achieve that, we connect Simplicitys primitives with a categorical model. By doing so, we lift the language to a more abstract representation that will allow us to extend it by leveraging category theory models for computations. This methodology facilitates the addition of local definitions, functions, and bounded loops. We provide an implementation of Simplicity and its virtual machine in the functional programming language Haskell. © Springer Nature Switzerland AG 2018.},
	author_keywords = {Blockchain;  Category theory;  Functional programming;  Haskell;  Simplicity;  Smart contracts},
	keywords = {Blockchain;  Formal methods;  Semantics, Abstract representation;  Categorical model;  Category theory;  Formal Semantics;  Haskell;  Non-trivial;  Simplicity;  Smart contracts, Functional programming},
	correspondence_address1 = {Russo, A.; Chalmers University of TechnologySweden; email: russo@chalmers.se},
	editor = {Margaria T., Steffen B.},
	publisher = {Springer Verlag},
	issn = {03029743},
	isbn = {9783030034269},
	language = {English},
	abbrev_source_title = {Lect. Notes Comput. Sci.},
	document_type = {Conference Paper},
	source = {Scopus}
}

@ARTICLE{Governatori2018377,
	author = {Governatori, G. and Idelberger, F. and Milosevic, Z. and Riveret, R. and Sartor, G. and Xu, X.},
	title = {On legal contracts, imperative and declarative smart contracts, and blockchain systems},
	journal = {Artificial Intelligence and Law},
	year = {2018},
	volume = {26},
	number = {4},
	pages = {377-409},
	doi = {10.1007/s10506-018-9223-3},
	note = {cited By 6},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85045071957&doi=10.1007%2fs10506-018-9223-3&partnerID=40&md5=5536be6ebd2f812c82b0cafa09e9c66f},
	affiliation = {Data61, CSIRO, Brisbane, Australia; European University Institute, Florence, Italy; Deontik, Brisbane, Australia; Data61, CSIRO, Sydney, Australia},
	abstract = {This paper provides an analysis of how concepts pertinent to legal contracts can influence certain aspects of their digital implementation through smart contracts, as inspired by recent developments in distributed ledger technology. We discuss how properties of imperative and declarative languages including the underlying architectures to support contract management and lifecycle apply to various aspects of legal contracts. We then address these properties in the context of several blockchain architectures. While imperative languages are commonly used to implement smart contracts, we find that declarative languages provide more natural ways to deal with certain aspects of legal contracts and their automated management. © 2018, Springer Science+Business Media B.V., part of Springer Nature.},
	author_keywords = {Blockchain;  Legal contracts;  Smart contracts},
	keywords = {Artificial intelligence;  Management, Automated management;  Contract management;  Declarative Languages;  Digital implementation;  Imperative languages;  Legal contracts;  Smart contracts, Blockchain},
	correspondence_address1 = {Riveret, R.; Data61, CSIROAustralia; email: regis.riveret@data61.csiro.au},
	publisher = {Springer Netherlands},
	issn = {09248463},
	coden = {AINLE},
	language = {English},
	abbrev_source_title = {Artif Intell Law},
	document_type = {Article},
	source = {Scopus}
}

@CONFERENCE{Koç20181,
	author = {Koç, A.K. and Yavuz, E. and Çabuk, U.C. and Dalkiliç, G.},
	title = {Towards secure e-voting using ethereum blockchain},
	journal = {6th International Symposium on Digital Forensic and Security, ISDFS 2018 - Proceeding},
	year = {2018},
	volume = {2018-January},
	pages = {1-6},
	doi = {10.1109/ISDFS.2018.8355340},
	note = {cited By 5},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85050969775&doi=10.1109%2fISDFS.2018.8355340&partnerID=40&md5=cae1c5b02220669c9c44818679d91487},
	affiliation = {Computer Engineering Dept., Dokuz Eylul University, Izmir, Turkey; Electrical-Electronics Engineering Dept., Erzincan University, Erzincan, Turkey},
	abstract = {There is no doubt that the revolutionary concept of the blockchain, which is the underlying technology behind the famous cryptocurrency Bitcoin and its successors, is triggering the start of a new era in the Internet and the online services. While most people focus only at cryptocurrencies; in fact, many administrative operations, fintech procedures, and everyday services that can only be done offline and/or in person, can now safely be moved to the Internet as online services. What makes it a powerful tool for digitalizing everyday services is the introduction of smart contracts, as in the Ethereum platform. Smart contracts are meaningful pieces of codes, to be integrated in the blockchain and executed as scheduled in every step of blockchain updates. E-voting on the other hand, is another trending, yet critical, topic related to the online services. The blockchain with the smart contracts, emerges as a good candidate to use in developments of safer, cheaper, more secure, more transparent, and easier-to-use e-voting systems. Ethereum and its network is one of the most suitable ones, due to its consistency, widespread use, and provision of smart contracts logic. An e-voting system must be secure, as it should not allow duplicated votes and be fully transparent, while protecting the privacy of the attendees. In this work, we have implemented and tested a sample e-voting application as a smart contract for the Ethereum network using the Ethereum wallets and the Solidity language. Android platform is also considered to allow voting for people who do not have an Ethereum wallet. After an election is held, eventually, the Ethereum blockchain will hold the records of ballots and votes. Users can submit their votes via an Android device or directly from their Ethereum wallets, and these transaction requests are handled with the consensus of every single Ethereum node. This consensus creates a transparent environment for e-voting. In addition to a broad discussion about reliability and efficiency of the blockchain-based e-voting systems, our application and its test results are presented in this paper, too. © 2018 IEEE.},
	author_keywords = {blockchain;  e-voting;  ethereum;  smart-contracts},
	keywords = {Android (operating system);  Computer crime;  Data privacy;  Digital forensics;  Electronic crime countermeasures;  Electronic money;  Mobile security;  Voting machines, Android devices;  Android platforms;  Bitcoin;  E-Voting;  E-voting systems;  ethereum;  On-line service;  Smart contracts, Blockchain},
	editor = {Varol A., Karabatak M., Varol C.},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	isbn = {9781538634493},
	language = {English},
	abbrev_source_title = {Int. Symp. Digit. Forensic Secur., ISDFS - Proc.},
	document_type = {Conference Paper},
	source = {Scopus}
}

@ARTICLE{Yang20181726,
	author = {Yang, Z. and Lei, H.},
	title = {Formal process virtual machine for smart contracts verification},
	journal = {International Journal of Performability Engineering},
	year = {2018},
	volume = {14},
	number = {8},
	pages = {1726-1734},
	doi = {10.23940/ijpe.18.08.p9.17261734},
	note = {cited By 2},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85054712811&doi=10.23940%2fijpe.18.08.p9.17261734&partnerID=40&md5=1bf86f49441ef6b058570b8659678c3a},
	affiliation = {School of Information and Software Engineering, University of Electronic Science and Technology of China, Chengdu, 610054, China},
	abstract = {This paper reports on the development and verification of a novel formal symbolic process virtual machine (FSPVM) for verifying the reliability and security of Ethereum smart contracts, denoted as FSPVM-E, in Coq proof assistant. It adopts execution-verification isomorphism (EVI), an extension of Curry-Howard isomorphism (CHI), as its fundamental theoretical framework. The current version of FSPVM-E is constructed on a general, extensible, and reusable formal memory (GERM) framework, an extensible and universal formal intermediate programming language Lolisa, which is a large subset of the Solidity programming language using generalized algebraic datatypes, and the corresponding formally verified interpreter of Lolisa, denoted as FEther. It supports the ERC20 standard and can automatically, simultaneously, and symbolically execute the smart contract programs of Ethereum and verify their reliability and security properties using Hoare logic in Coq. In addition, this work contributes to solving the problems of automation, inconsistency, and reusability in higher-order logic theorem proving. © 2018 Totem Publisher, Inc. All rights reserved.},
	author_keywords = {Coq;  Formal method;  Higher-order logic theorem proving;  Programming language;  Virtual machine},
	keywords = {Ada (programming language);  Computer circuits;  Computer programming languages;  Formal logic;  Formal methods;  Formal verification;  Network security;  Program interpreters;  Reusability;  Set theory;  Virtual machine, Algebraic data-types;  Coq proof assistant;  Curry-Howard isomorphism;  Higher order logic theorem proving;  Process virtual machines;  Security properties;  Smart contracts;  Theoretical framework, Theorem proving},
	correspondence_address1 = {Yang, Z.; School of Information and Software Engineering, University of Electronic Science and Technology of ChinaChina; email: zyang.uestc@gmail.com},
	publisher = {Totem Publishers Ltd},
	issn = {09731318},
	language = {English},
	abbrev_source_title = {Int. J. Perform. Eng.},
	document_type = {Article},
	source = {Scopus}
}

@CONFERENCE{Wessling2019234,
	author = {Wessling, F. and Ehmke, C. and Meyer, O. and Gruhn, V.},
	title = {Towards Blockchain Tactics: Building Hybrid Decentralized Software Architectures},
	journal = {Proceedings - 2019 IEEE International Conference on Software Architecture - Companion, ICSA-C 2019},
	year = {2019},
	pages = {234-237},
	doi = {10.1109/ICSA-C.2019.00048},
	art_number = {8712151},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85066457958&doi=10.1109%2fICSA-C.2019.00048&partnerID=40&md5=b0c31f339378578f1df05b4cdb240316},
	affiliation = {University of Duisburg-Essen, Schuetzenbahn 70, Essen, 45127, Germany},
	abstract = {Blockchain-based applications usually consist of centralized elements (e.g., web servers and back-end logic) connected to decentralized elements such as smart contracts. The engineering of such hybrid software architectures poses a challenge as it is unclear which elements should be centralized or decentralized. Furthermore the impact of this decision (or the balance between those two areas) on software quality attributes such as security, maintainability, performance or costs is currently unknown. The goal is to build a software architecture using the benefits and handling the challenges of blockchain technology while fulfilling the relevant quality attributes. While there are several approaches examining the relation between architectural decisions and quality attributes in centralized systems, research is at an early stage for decentralized elements in software architectures. This paper presents a first step towards architectural blockchain tactics. With a simplified experiment comparing two implementation variants of an Ethereum smart contract we show that software design patterns are not always beneficial and that the expected usage scenarios have a strong impact on the operational costs. We argue that further research and validation is necessary for gaining more qualitative and quantitative insights to make informed architectural design decisions when using blockchain technology and give a first outline on how to achieve this. © 2019 IEEE.},
	keywords = {Blockchain;  Computer software selection and evaluation;  Software architecture;  Software design, Architectural decision;  Architectural design decisions;  Centralized systems;  Quality attributes;  Software design patterns;  Software quality attributes;  Usage scenarios;  Web servers, C (programming language)},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	isbn = {9781728118765},
	language = {English},
	abbrev_source_title = {Proc. - IEEE Int. Conf. Softw. Archit. Comp., ICSA-C},
	document_type = {Conference Paper},
	source = {Scopus}
}

@CONFERENCE{Yamashita20191,
	author = {Yamashita, K. and Nomura, Y. and Zhou, E. and Pi, B. and Jun, S.},
	title = {Potential Risks of Hyperledger Fabric Smart Contracts},
	journal = {IWBOSE 2019 - 2019 IEEE 2nd International Workshop on Blockchain Oriented Software Engineering},
	year = {2019},
	pages = {1-10},
	doi = {10.1109/IWBOSE.2019.8666486},
	art_number = {8666486},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85063940024&doi=10.1109%2fIWBOSE.2019.8666486&partnerID=40&md5=0f65769f8ca42c75699f2122be2c7c07},
	affiliation = {FUJITSU LABORATORIES LTD., Japan; FUJITSU Research and Development Center, China},
	abstract = {Blockchain is a decentralized ledger technology, and it is the technology underlying Bitcoin and Ethereum. The interest in blockchain has been increasing since its emergence. Hyperledger Fabric is one of the permissioned blockchain frameworks. One of the characteristics of Hyperledger Fabric is it utilizes general-purpose programming languages, e.g., Go, Node.js, and Java, to implement smart contracts (called chaincode in Hyperledger Fabric). The advantages of utilizing these languages are already known to potential developers, and development tools might already exist. However, one of the disadvantages is that these languages were not originally designed for writing smart contracts. Hence, there may be risks that developers do not need to consider when using specific languages such as Solidity of Ethereum. Furthermore, even though development tools exist, how many risks are covered by the tools is an open question. In this paper, we focus on Go language and the tools. First, we surveyed what kind of risks are associated with chaincodes are developed using Go language and observed there are 14 potential risks. Then, we investigated how many risks can be covered by Go tools, e.g., golint and gosec, and a vulnerability detection tool for chaincodes called Chaincode Scanner. From our results, we observed that some risks are not covered by the existing tools. Hence, we develop a detection tool to cover risks by static analysis. Finally, in this paper, we describe how to find the risks with our tool and evaluate the usefulness. © 2019 IEEE.},
	author_keywords = {Blockchain;  Hyperledger Fabric;  Smart Contract;  Validation Tool},
	keywords = {Blockchain;  Ethereum;  Inspection equipment;  Risk assessment;  Software engineering;  Static analysis, Chain codes;  Detection tools;  Development tools;  General-purpose programming language;  Potential risks;  Specific languages;  Validation tools;  Vulnerability detection, Risk management},
	editor = {Tonelli R., Marchesi M., Ducasse S., Bracciali A.},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	isbn = {9781728118079},
	language = {English},
	abbrev_source_title = {IWBOSE - IEEE Int. Workshop Blockchain Oriented Softw. Eng.},
	document_type = {Conference Paper},
	source = {Scopus}
}

@CONFERENCE{Tsankov201867,
	author = {Tsankov, P. and Dan, A. and Drachsler-Cohen, D. and Gervais, A. and Bünzli, F. and Vechev, M.},
	title = {Securify: Practical security analysis of smart contracts},
	journal = {Proceedings of the ACM Conference on Computer and Communications Security},
	year = {2018},
	pages = {67-82},
	doi = {10.1145/3243734.3243780},
	note = {cited By 6},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056848750&doi=10.1145%2f3243734.3243780&partnerID=40&md5=f51eea681a484aad13e652f1f8767ea7},
	affiliation = {ETH Zurich, Switzerland; Imperial College, London, United Kingdom},
	abstract = {Permissionless blockchains allow the execution of arbitrary programs (called smart contracts), enabling mutually untrusted entities to interact without relying on trusted third parties. Despite their potential, repeated security concerns have shaken the trust in handling billions of USD by smart contracts. To address this problem, we present Securify, a security analyzer for Ethereum smart contracts that is scalable, fully automated, and able to prove contract behaviors as safe/unsafe with respect to a given property. Securifys analysis consists of two steps. First, it symbolically analyzes the contracts dependency graph to extract precise semantic information from the code. Then, it checks compliance and violation patterns that capture sufficient conditions for proving if a property holds or not. To enable extensibility, all patterns are specified in a designated domain-specific language. Securify is publicly released, it has analyzed > 18K contracts submitted by its users, and is regularly used to conduct security audits by experts. We present an extensive evaluation of Securify over real-world Ethereum smart contracts and demonstrate that it can effectively prove the correctness of smart contracts and discover critical violations. © 2018 Copyright held by the owner/author(s).},
	author_keywords = {Security analysis;  Smart contracts;  Stratified Datalog},
	keywords = {Problem oriented languages;  Security systems;  Semantics, Datalog;  Dependency graphs;  Domain specific languages;  Security analysis;  Security analyzers;  Semantic information;  Smart contracts;  Trusted third parties, Compliance control},
	correspondence_address1 = {Gervais, A.; Imperial CollegeUnited Kingdom; email: a.gervais@imperial.ac.uk},
	publisher = {Association for Computing Machinery},
	issn = {15437221},
	isbn = {9781450356930},
	language = {English},
	abbrev_source_title = {Proc ACM Conf Computer Commun Secur},
	document_type = {Conference Paper},
	source = {Scopus}
}

@CONFERENCE{Wang2018108,
	author = {Wang, S. and Yuan, Y. and Wang, X. and Li, J. and Qin, R. and Wang, F.-Y.},
	title = {An Overview of Smart Contract: Architecture, Applications, and Future Trends},
	journal = {IEEE Intelligent Vehicles Symposium, Proceedings},
	year = {2018},
	volume = {2018-June},
	pages = {108-113},
	doi = {10.1109/IVS.2018.8500488},
	art_number = {8500488},
	note = {cited By 5},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85053574346&doi=10.1109%2fIVS.2018.8500488&partnerID=40&md5=4494cc546838dfa7d24be8c3c9e5edc7},
	affiliation = {State Key Laboratory for Management and Control of Complex Systems, Institute of Automation, Chinese Academy of Sciences, Beijing, 100190, China; University of Chinese Academy of Sciences, Beijing, 100049, China; Qingdao Academy of Intelligent Industries, Qingdao, 266109, China; Research Center of Military Computational Experiments and Parallel Systems, National University of Defense Technology, Changsha, 410073, China},
	abstract = {With the rapid development of cryptocurrency and its underlying blockchain technologies, platforms such as Ethereum and Hyperledger began to support various types of smart contracts. Smart contracts are computer protocols intended to digitally facilitate, verify, or enforce the negotiation or performance of a contract. Smart contracts have broad range of applications, such as financial services, prediction markets and Internet of Things (IoT), etc. However, there are still many challenges such as security issues and privacy disclosure that await future research. In this paper, we present a comprehensive overview on blockchain powered smart contracts. First, we give a systematic introduction for smart contracts, including the basic framework, operating mechanisms, platforms and programming languages. Second, application scenarios and existing challenges are discussed. Finally, we describe the recent advances of smart contract and present its future development trends, e.g., parallel blockchain. This paper is aimed at providing helpful guidance and reference for future research efforts. © 2018 IEEE.},
	author_keywords = {ACP approach;  contract;  Ethereum;  parallel blockchain},
	keywords = {Contracts;  Intelligent vehicle highway systems;  Internet of things, ACP approaches;  Application scenario;  Computer protocols;  Ethereum;  Internet of Things (IOT);  Operating mechanism;  Prediction markets;  Privacy disclosures, Blockchain},
	correspondence_address1 = {Yuan, Y.; State Key Laboratory for Management and Control of Complex Systems, Institute of Automation, Chinese Academy of SciencesChina; email: yong.yuan@ia.ac.cn},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	isbn = {9781538644522},
	language = {English},
	abbrev_source_title = {IEEE Intell Veh Symp Proc},
	document_type = {Conference Paper},
	source = {Scopus}
}

@ARTICLE{Yang201937770,
	author = {Yang, Z. and Lei, H.},
	title = {FEther: An extensible definitional interpreter for smart-contract verifications in Coq},
	journal = {IEEE Access},
	year = {2019},
	volume = {7},
	pages = {37770-37791},
	doi = {10.1109/ACCESS.2019.2905428},
	art_number = {8667810},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85065234713&doi=10.1109%2fACCESS.2019.2905428&partnerID=40&md5=b02a2e9b6ac50b3bbaa07a193d05b6be},
	affiliation = {School of Information and Software Engineering, University of Electronic Science and Technology of China, Chengdu, 610054, China},
	abstract = {Recently, blockchain technology has been widely applied in the financial field. Therefore, the security of the blockchain smart contracts is among the most popular contemporary research topics. To improve the theorem-proving technology in this field, we are developing an extensible hybrid verification proof engine, denoted as FEther, for Ethereum smart contract verification. Based on Lolisa, which is a large subset of solidity mechanized in Coq, FEther guarantees the consistency between smart contracts and its formal model. Combining symbolic execution with higher order logic theorem-proving, FEther contains a set of automatic strategies that execute and verify the smart contracts in Coq with a high level of automation. Besides, in FEther, the verified code segments also can be reused to assist in the verification of other properties. The functional correctness of FEther was verified in Coq. The execution efficiency of FEther has far exceeded that of the interpreters that are developed in Coq in accordance with the standard tutorial. To the best of our knowledge, FEther is the first definitional interpreter of the solidity language in Coq. © 2019 IEEE.},
	author_keywords = {Coq;  definitional interpreter;  etheruem;  formal verification;  smart contract;  Symbolic execution},
	keywords = {Blockchain;  Formal verification;  Model checking, definitional interpreter;  etheruem;  Functional correctness;  Higher order logic theorem proving;  Hybrid verification;  Level of automations;  Other properties;  Symbolic execution, Theorem proving},
	correspondence_address1 = {Yang, Z.; School of Information and Software Engineering, University of Electronic Science and Technology of ChinaChina; email: zyang.uestc@gmail.com},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	issn = {21693536},
	language = {English},
	abbrev_source_title = {IEEE Access},
	document_type = {Article},
	source = {Scopus}
}

@ARTICLE{Zakrzewski2018229,
	author = {Zakrzewski, J.},
	title = {Towards Verification of Ethereum Smart Contracts: A Formalization of Core of Solidity},
	journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
	year = {2018},
	volume = {11294 LNCS},
	pages = {229-247},
	doi = {10.1007/978-3-030-03592-1_13},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85057399984&doi=10.1007%2f978-3-030-03592-1_13&partnerID=40&md5=c9731bc6ee4500efc425257b32453c54},
	affiliation = {University of Warsaw, ul. S. Banacha 2a, Warsaw, 02-097, Poland},
	abstract = {Solidity is the most popular programming language for writing smart contracts on the Ethereum platform. Given that smart contracts often manage large amounts of valuable digital assets, considerable interest has arisen in formal verification of Solidity code. Designing verification tools requires good understanding of language semantics. Acquiring such an understanding in case of Solidity is difficult as the language lacks even an informal specification. In this work, we evaluate the feasibility of formalization of Solidity and propose a formalization of a small subset of Solidity that contains its core data model and some unique features, such as function modifiers. © 2018, Springer Nature Switzerland AG.},
	author_keywords = {Ethereum;  Semantics;  Smart contracts;  Solidity},
	keywords = {Semantics, Digital assets;  Ethereum;  Language semantics;  Large amounts;  Smart contracts;  Solidity;  Unique features;  Verification tools, Formal verification},
	correspondence_address1 = {Zakrzewski, J.; University of Warsaw, ul. S. Banacha 2a, Poland; email: j.zakrzewski@mimuw.edu.pl},
	editor = {Piskac R., Rummer P.},
	publisher = {Springer Verlag},
	issn = {03029743},
	isbn = {9783030035914},
	language = {English},
	abbrev_source_title = {Lect. Notes Comput. Sci.},
	document_type = {Conference Paper},
	source = {Scopus}
}

@ARTICLE{Castell2018739,
	author = {Castell, S.},
	title = {The future decisions of RoboJudge HHJ Arthur Ian Blockchain: Dread, delight or derision?},
	journal = {Computer Law and Security Review},
	year = {2018},
	volume = {34},
	number = {4},
	pages = {739-753},
	doi = {10.1016/j.clsr.2018.05.011},
	note = {cited By 1},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85048703856&doi=10.1016%2fj.clsr.2018.05.011&partnerID=40&md5=a56cdc118b492fd14ebff86934c4fd63},
	affiliation = {Castell Consulting, Witham, Essex, United Kingdom},
	abstract = {Steve Saxby's prescient founding of CLSR, two hundred issues ago, encouraged and resonated with my own digital visionary thinking and professional activity in the evolving field of ICT and the Law. From Infolex, the UK's first commercially-available computer-assisted legal information retrieval service, and my APPEAL Report (on the admissibility of computer evidence in court and the legal reliability/security of IT systems), via my Forensic Systems Analysis expert methodology, to the nascent CryptoBlockTV, Steve's scholarly foresight in promoting adventurous exploration of digilaw high-ground topics and issues has presented me with opportunities to generate a stream of prescient material, for which I am immensely grateful. And what is beyond prescient today is that the Coming of the Robots is unstoppable. The Artificial Intelligence (AI) Age is upon us; RoboJudge has all but already arrived. While many are concerned about defining and developing Machine Ethics, Castell's Second Dictum: You cannot construct an algorithm that will reliably decide whether or not any algorithm is ethical reveals that this is a futile exercise. Algorithms are also pivotal to the current mania for Crypto-Algorithmic Blockchain Technology Initial Coin Offerings (ICOs), with a Crypto Tribe of Millennials relentlessly raising billions in real money thereby, to the extent that I have dubbed Crypto the Millennials Rock'n'Roll. The seasoned ICT expert professional however bears in mind that there are as yet no ISO standards for blockchain, and there is far more to creating and delivering a complete quality-assured system than just the blockchain component. Furthermore, the legal status of cryptocurrency, smart contract and distributed ledger technology is not clear or uncontentious  and there is already ICO litigation on foot. Nevertheless, taking my limerick-writing Castell GhostWriteBot's advice, it is perhaps time for my own asset-linked ICO, to launch my CapChere.com concept designed to reboot Capitalism and achieve ubiquitous universal share and wealth ownership. Look out for Castell GhostWriteBot's account (with or without limericks) of how I fared, in the 400th issue of CLSR. © 2018 Stephen Castell},
	author_keywords = {Algorithm;  Blockchain;  Crypto;  Ethic;  Intelligence;  Robot},
	keywords = {Algorithms;  Computer aided analysis;  Computer hardware description languages;  Intelligent robots;  ISO Standards;  Laws and legislation;  Lime;  Philosophical aspects;  Reliability analysis;  Robots;  Safety devices;  Search engines;  Systems analysis, Computer assisted;  Computer evidence;  Crypto;  Ethic;  Intelligence;  Legal information retrieval;  Professional activities;  Smart contracts, Blockchain},
	correspondence_address1 = {Castell, S.; CASTELL Consulting, PO Box 334, United Kingdom; email: stephen@castellconsulting.com},
	publisher = {Elsevier Ltd},
	issn = {02673649},
	coden = {CLSRE},
	language = {English},
	abbrev_source_title = {Comput Law Secur. Rev.},
	document_type = {Article},
	source = {Scopus}
}

@CONFERENCE{Gilcrest20193277,
	author = {Gilcrest, J. and Carvalho, A.},
	title = {Smart Contracts: Legal Considerations},
	journal = {Proceedings - 2018 IEEE International Conference on Big Data, Big Data 2018},
	year = {2019},
	pages = {3277-3281},
	doi = {10.1109/BigData.2018.8622584},
	art_number = {8622584},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85062605431&doi=10.1109%2fBigData.2018.8622584&partnerID=40&md5=af0bdcf6111fdc0eed6bf805b73cb0b3},
	affiliation = {College of Engineering and Computing, Miami University, Oxford, OH, United States; Farmer School of Business, Miami University, Oxford, OH, United States},
	abstract = {In this paper, we analyze the value of smart contracts and blockchains as an alternative to traditional contractual obligations. In particular, we start by exploring some of the advantages of these technologies, specifically the immutability of blockchains and automated contract remittance. We also discuss two critical shortcomings of decentralized smart contracts, namely regulatory uncertainty and a lack of confidential execution. With these issues in mind, we next explore how American legislators have begun to address smart contracts and blockchains. Though quite limited, there have been a few provisions clarifying the status of these technologies. We break down some of the language expressed in these bills so as to understand the current legal status of smart contracts and blockchains. Given this foundation, we consider the next steps that should be taken as smart contracts mature. This pertains to both the continued improvement of the underlying technology as well as the progress taken by regulators. Finally, assuming a futuristic scenario where there are no technological or regulatory barriers to smart contract adoption, we discuss how the process of contract remittance can be expedited in a world fully committed to the use of smart contracts. © 2018 IEEE.},
	author_keywords = {Blockchain;  Contract Dispute Resolution;  Contract Law;  Remittance;  Smart Contracts},
	keywords = {Big data;  Blockchain, Break down;  Contract disputes;  Contract laws;  Contractual obligations;  Legal status;  Regulatory barriers;  Remittance, Contracts},
	editor = {Song Y., Liu B., Lee K., Abe N., Pu C., Qiao M., Ahmed N., Kossmann D., Saltz J., Tang J., He J., Liu H., Hu X.},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	isbn = {9781538650356},
	language = {English},
	abbrev_source_title = {Proc. - IEEE Int. Conf. Big Data, Big Data},
	document_type = {Conference Paper},
	source = {Scopus}
}

@CONFERENCE{Lee2019,
	author = {Lee, S.-M. and Park, S. and Park, Y.B.},
	title = {Formal Specification Technique in Smart Contract Verification},
	journal = {2019 International Conference on Platform Technology and Service, PlatCon 2019 - Proceedings},
	year = {2019},
	doi = {10.1109/PlatCon.2019.8669419},
	art_number = {8669419},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85063884742&doi=10.1109%2fPlatCon.2019.8669419&partnerID=40&md5=8f816318cb21696feaca147016431684},
	affiliation = {Dept. of Computer Engineering Graduate School, Dankook University, Yongin-si, South Korea; Sogang Institute Advanced Technology, Sogang University, Seoul, South Korea; Dept. Software Engineering, Dankook University, Yongin-si, South Korea},
	abstract = {The block chain technology is changing rapidly. The block chain guarantees the integrity of the book through a specific consensus of the participants. In the past, the block chain technology had a limited range of applications. However, the use of block chain technology is gradually expanding as smart contracts that can formulate general business logic are mentioned. Already studied the components of smart contracts in other studies and proposed the possibility of extending them on the basis of ontology. And research on securing traceability of smart contract based on ontology has been carried out. However, research on various transactions constituting smart contracts is lacking. In this paper, the constituent elements of smart contract are analyzed and expressed by ontology. And the process of negotiating the components is represented by each transaction. Finally, we construct the component represented by the ontology as XML by including the state information in the transaction. In this way, the smart contract is represented in a formal language that contains state information. It also laid the foundation for a smart contract that can be reused and verified. © 2019 IEEE.},
	author_keywords = {Blockchain;  Formal Language;  Ontology;  Smart-Contract;  XML},
	keywords = {Blockchain;  Formal languages;  Formal specification;  XML, Business logic;  Constituent elements;  Formal specification techniques;  State information, Ontology},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	isbn = {9781728112886},
	language = {English},
	abbrev_source_title = {Int. Conf. Platf. Technol. Serv., PlatCon - Proc.},
	document_type = {Conference Paper},
	source = {Scopus}
}

@CONFERENCE{Hu201858,
	author = {Hu, J. and Zhong, Y.},
	title = {A method of logic-based smart contracts for blockchain system},
	journal = {ACM International Conference Proceeding Series},
	year = {2018},
	pages = {58-61},
	doi = {10.1145/3224207.3224218},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85055565670&doi=10.1145%2f3224207.3224218&partnerID=40&md5=3d81648d426df67eadf544d478e30fa6},
	affiliation = {Foshan Open University, Guangdong, China; Foshan University, Guangdong, China},
	abstract = {Recently, blockchain systems have attracted intensive attentions from academia, industrial circles and governments, which make smart contract a hit since it is an important research topic for blockchain system. We propose a logic-based smart contract model Logic-SC for blockchain system based on semantics and syntax of Active-U-Datalog with some temporal extensions. Logic-SC model owns a triggering mechanism by temporal active rules, which can satisfy the expressiveness and flexibility of the smart contracts for blockchain system. The paper introduces the rules, structure of contracts and implementation of the model. Finally, an application is exampled to show the effectiveness of the model. © 2018 Association for Computing Machinery.},
	author_keywords = {Active-U-Datalog;  Blockchain;  Logic language;  Smart contract},
	keywords = {Blockchain;  Data handling;  Industrial research;  Semantics, Active rules;  Datalog;  Logic languages;  Model logic;  Research topics;  Smart contracts;  Temporal extensions;  Triggering mechanism, Computer circuits},
	publisher = {Association for Computing Machinery},
	isbn = {9781450364188},
	language = {English},
	abbrev_source_title = {ACM Int. Conf. Proc. Ser.},
	document_type = {Conference Paper},
	source = {Scopus}
}

@CONFERENCE{Schrans2018218,
	author = {Schrans, F. and Eisenbach, S. and Drossopoulou, S.},
	title = {Writing safe smart contracts in flint},
	journal = {ACM International Conference Proceeding Series},
	year = {2018},
	volume = {Part F137691},
	pages = {218-219},
	doi = {10.1145/3191697.3213790},
	note = {cited By 2},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85053680913&doi=10.1145%2f3191697.3213790&partnerID=40&md5=14b8b097e2d96d93ae845dbd7e570ce1},
	affiliation = {Imperial College London, United Kingdom},
	abstract = {Blockchain-based platforms such as Ethereum support the execution of versatile decentralized applications, known as smart contracts. These typically hold and transfer digital currency (e.g., Ether) to other parties on the platform. Contracts have been subject to numerous attacks, losing hundreds of millions of dollars (in Ether). We propose Flint, a new type-safe, capabilities-secure, contractoriented programming language specifically designed for writing robust smart contracts. To help programmers reason about access control of functions, Flint programmers use caller capabilities. To prevent vulnerabilities relating to the unintentional loss of currency, transfers of assets in Flint are performed through safe atomic operations, inspired by linear type theory. © 2018 Copyright held by the owner/author(s).},
	author_keywords = {Ethereum;  Programming Language;  Smart Contracts},
	keywords = {Access control;  Ethers, Atomic operation;  Ethereum;  Linear type theory;  Smart contracts, Computer programming languages},
	editor = {Sartor J.B., Marr S.},
	publisher = {Association for Computing Machinery},
	isbn = {9781450355131},
	language = {English},
	abbrev_source_title = {ACM Int. Conf. Proc. Ser.},
	document_type = {Conference Paper},
	source = {Scopus}
}

@ARTICLE{Viriyasitavat201932,
	author = {Viriyasitavat, W. and Hoonsopon, D.},
	title = {Blockchain characteristics and consensus in modern business processes},
	journal = {Journal of Industrial Information Integration},
	year = {2019},
	volume = {13},
	pages = {32-39},
	doi = {10.1016/j.jii.2018.07.004},
	note = {cited By 8},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85051025631&doi=10.1016%2fj.jii.2018.07.004&partnerID=40&md5=0d8c4af69b33d53f3fea89081e8fb820},
	affiliation = {Business Information Technology Devision, Department of Statistics, Faculty of Commerce and Accountancy, Chulalongkorn University, Pathumwan, Bangkok  10330, Thailand; Department of Marketing, Faculty of Commerce and Accountancy, Chulalongkorn University, Pathumwan, Bangkok  10330, Thailand},
	abstract = {Blockchain technology has attracted a great deal of attentions as an effective way to innovate business processes. It has to be integrated with other Business Process Management system (BPM) components to implement specified functionalities related to the applications. The current efforts in integrating this technology into BPM are at a very early stage. To apply Blockchain into business processes efficiently, Blockchain and business process characteristics must be identified. Inconsistency of confirmation settlement that heavily relies on the implementation of consensus protocol poses a major challenge in business process operations, especially ones that are time-critical. In addition, validators, nodes responsible for performing consensus operations in a Blockchain system, can introduce bias and as a result are not trustable. This paper first defines Blockchain and also investigates the characteristics of Blockchain and business processes. Then, we suggest an architecture of business processes in Blockchain era to overcome the problems of time inconsistency and consensus bias. The architecture provides persistency, validity, auditability, and disintermediary that Blockchain offers. The architecture also provides flexibility by allowing business partner to select nodes in performing consensus; thus bias is mitigated. © 2018},
	author_keywords = {Blockchain;  Business processes;  Consensus;  Service;  Smart contract;  Specification language;  System Architecture;  Workflow},
	correspondence_address1 = {Viriyasitavat, W.; Business Information Technology Devision, Department of Statistics, Faculty of Commerce and Accountancy, Chulalongkorn UniversityThailand; email: hardgolf@gmail.com},
	publisher = {Elsevier B.V.},
	issn = {2452414X},
	language = {English},
	abbrev_source_title = {J. Ind. Infor. Integr.},
	document_type = {Article},
	source = {Scopus}
}

@ARTICLE{Ibba2018,
	author = {Ibba, S. and Pinna, A. and Lunesu, M.I. and Marchesi, M. and Tonelli, R.},
	title = {Initial coin offerings and agile practices},
	journal = {Future Internet},
	year = {2018},
	volume = {10},
	number = {11},
	doi = {10.3390/fi10110103},
	art_number = {103},
	note = {cited By 2},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85057065892&doi=10.3390%2ffi10110103&partnerID=40&md5=41611b84ede002962b7948f9b890dae1},
	affiliation = {Department of Electric and Electronic Engineering, University of Cagliari, Cagliari, 09123, Italy; Department of Mathematics and Computer Science, University of Cagliari, Cagliari, 09124, Italy},
	abstract = {An ICO (Initial Coin Offering) is an innovative way to fund projects based on blockchain. The funding is based on the selling of tokens by means of decentralized applications called smart contracts written in Solidity, a programming language specific for Ethereum blockchain. The ICOs work in a volatile context and it is crucial that the team is capable of handling constant changes. The Agile methods, proven practices enabling to develop software in presence of changing requirements, could be a means for managing uncertainty. The main goals of this work are to understand software engineering activities related to ICOs, recognize the ICOs developed using Agile methods, and make a comparison between ICOs and Agile ICOs. In addition, we perform a deeper analysis of Agile ICOs concerning project planning, software development, and code features. Our work shows that the roles of the people involved in an ICO can be compared to the typical roles of the SCRUM methodology. The majority of Agile ICOs use tool of testing before storing smart contract on blockchain. Finally, the application of volumetric and complexity software metrics shows that the files of Agile ICOs is on average shorter and less complex than in other smart contracts. © 2018 by the authors.},
	author_keywords = {Agile methodology;  Blockchain;  Initial coin offerings;  Smart contracts},
	keywords = {Blockchain;  Software design, Agile Methodologies;  Engineering activities;  Initial coin offerings;  Managing uncertainty;  Project planning;  Scrum methodologies;  Smart contracts;  Software metrics, Application programs},
	correspondence_address1 = {Ibba, S.; Department of Electric and Electronic Engineering, University of CagliariItaly; email: simona.ibba@diee.unica.it},
	publisher = {MDPI AG},
	issn = {19995903},
	language = {English},
	abbrev_source_title = {Future Internet},
	document_type = {Article},
	source = {Scopus}
}

@CONFERENCE{Pan2019190,
	author = {Pan, Q. and Koutsoukos, X.},
	title = {Building a blockchain simulation using the Idris programming language},
	journal = {ACMSE 2019 - Proceedings of the 2019 ACM Southeast Conference},
	year = {2019},
	pages = {190-193},
	doi = {10.1145/3299815.3314456},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85065928122&doi=10.1145%2f3299815.3314456&partnerID=40&md5=dd9ebe2ee24ffdb34a0e709551d9ed33},
	affiliation = {Department of Electrical Engineering and Computer Science, Vanderbilt University, Nashville, TN, United States},
	abstract = {The primary aim of this work is to create a program simulating a private distributed blockchain using the functional programming language Idris. This simulation is implemented such that a rock-paper-scissors game can be played between any two users of the blockchain via the use of smart contracts. Our motivation is to assert, using relevant features of Idris, that such an implementation possesses some of the accepted properties of blockchains. This paper first presents some differences between our implementation and most real-world blockchains. Next the Idris language and some of its features are discussed, focusing on how the language is used to implement the simulation. Finally, the advantages and disadvantages of utilizing Idris instead of an imperative programming language are examined. © 2019 Copyright held by the owner/author(s).},
	author_keywords = {Blockchains;  Cryptographic hash functions;  Dependent types;  Functional languages;  Idris;  Smart contracts},
	keywords = {Ada (programming language);  Blockchain;  Computer simulation languages;  Hash functions, Blockchains;  Cryptographic hash functions;  Dependent types;  Functional languages;  Idris, Functional programming},
	publisher = {Association for Computing Machinery, Inc},
	isbn = {9781450362511},
	language = {English},
	abbrev_source_title = {ACMSE - Proc. ACM Southeast Conf.},
	document_type = {Conference Paper},
	source = {Scopus}
}

@ARTICLE{Shao2018969,
	author = {Shao, Q.-F. and Jin, C.-Q. and Zhang, Z. and Qian, W.-N. and Zhou, A.-Y.},
	title = {Blockchain: Architecture and Research Progress [?????:?????]},
	journal = {Jisuanji Xuebao/Chinese Journal of Computers},
	year = {2018},
	volume = {41},
	number = {5},
	pages = {969-988},
	doi = {10.11897/SP.J.1016.2018.00969},
	note = {cited By 9},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85049005640&doi=10.11897%2fSP.J.1016.2018.00969&partnerID=40&md5=3e14db3d5643dc40198d21ffa415efe6},
	affiliation = {School of Data Science and Engineering, East China Normal University, Shanghai, 200062, China; School of Software, Zhongyuan University of Technology, Zhengzhou, 450007, China},
	abstract = {Traditional database management systems are controlled by a single entity, because the data in the databases cannot be fully trusted by all participants in a multi-party collaboration scenario, each participant must maintain a separate database that hosts its own business data, the discrepancies on each participant's databases lead to slowdowns of manual reconciliation and some disputes. Blockchain can solve the problem of trust among multiple participants. Blockchain is a decentralized, trustless, tamper-proof and traceable distributed database managed by multiple participants. A blockchain also called distributed ledger, is essentially an append-only data structure maintained by a set of nodes which do not fully trust each other. Nodes in the blockchain keep replicas of the blocks, each containing an ordered set of transactions modifying the states. All nodes agree on the transactions and their order. Traditional databases assume a trusted environment. Blockchain's key property is that it assumes nodes behave in arbitrary manner. Being able to tolerate Byzantine failure by consensus protocol, blockchain establishes a reliable trust between both parties of the transaction, and implements trusted data sharing and peer-to-peer value exchange without third-party intermediaries. The blockchain's consensus protocol must tolerate Byzantine failures. This is not the case in traditional distributed systems, in which they use the Paxos or Raft consensus protocol. There are many variants of consensus protocols being developed for blockchains. They can be classified into two kinds. One consists of purely computation based protocols that use proof of computation to randomly select a node which decides the next block. PoW is the prime example. The other are purely communication based protocols in which nodes have equal votes and go through multiple rounds of communication to reach consensus. PBFT is the prime example. A blockchain system can be categorized as either public or consortium. In the former, any node can join and leave the system. In the latter, the blockchain enforces strict membership. There is an access control mechanism to determine who can join the system. PoW are used in public blockchains because they are fully decentralized, and PBFT are used in consortium blockchains because they assume authenticated nodes. Bitcoin is the most successful blockchain application. Ethereum is the most widely used platform in public blockchains. Hyperledger Fabric is the most widely used platform in consortium blockchains. This paper proposes an architecture model of the blockchain system based on the above three mainstream blockchain platforms. This paper then discusses the principles and technologies of blockchain according to blockchain data, consensus mechanism, smart contract, scalability and security. Specifically, blockchain data is introduced from three aspects of data structure, data model and datastore, consensus mechanism is discussed about PoW applied in public blockchains and PBFT applied in consortium blockchains, smart contract is described from three aspects of running mechanism, programing language and sandbox, blockchain scalability is analyzed about sharding and multichannel, blockchain security is discussed from digital signing and verification, and privacy preserving. This paper also analyzes the advantages, disadvantages and technology trends of blockchain by comparing with traditional databases, and gives several challenging research problems for blockchain. The development of blockchain will bring both challenges and opportunities for many industries, and result in the second generation of the digital revolution bringing us the Internet of Value. © 2018, Science Press. All right reserved.},
	author_keywords = {Bitcoin;  Blockchain;  Consensus mechanism;  Ethereum;  Hyperledger fabric;  Smart contract},
	keywords = {Access control;  Data privacy;  Data structures;  Dynamical systems;  Electronic money;  Information management;  Network security;  Scalability, Access control mechanism;  Architecture modeling;  Bitcoin;  Consensus protocols;  Distributed database;  Distributed systems;  Ethereum;  Smart contracts, Blockchain},
	publisher = {Science Press},
	issn = {02544164},
	coden = {JIXUD},
	language = {Chinese},
	abbrev_source_title = {Jisuanji Xuebao},
	document_type = {Review},
	source = {Scopus}
}

@CONFERENCE{Syahputra2019229,
	author = {Syahputra, H. and Weigand, H.},
	title = {The development of smart contracts for heterogeneous blockchains},
	journal = {Proceedings of the I-ESA Conferences},
	year = {2019},
	volume = {9},
	pages = {229-238},
	doi = {10.1007/978-3-030-13693-2_19},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85065233349&doi=10.1007%2f978-3-030-13693-2_19&partnerID=40&md5=d03f538bb354a6fa89bc7720ae104102},
	affiliation = {Yishun Industrial Street 1, Singapore, 768160, Singapore; Tilburg University, P.O. Box 90153, Tilburg, 5000 LE, Netherlands},
	abstract = {The advanced development of blockchain technologies at present is to have external applications that interact with the native blockchain. A smart contract allows us to insert business logic which can add transactions and share them with multiple parties. This paper discusses the development process of a smart contract platform that aims to generate smart contracts for heterogeneous blockchain technologies. We start the process of creating a blueprint design, a datalogical stereotype that employs the ontology design from a Resources-Event-Agent (REA) perspective (McCarthy in The Accounting Review, LVII(3) (1982) [1]). With the modeling approach we are using in this paper, Unified Modeling Language (UML) and Object Constraint Language (OCL), we implement the workflow and algorithm in a supply chain demo sample [2]. © Springer Nature Switzerland AG 2019.},
	author_keywords = {Blockchain;  OCL;  Resources-Event-Agent (REA);  Smart contracts;  UML},
	correspondence_address1 = {Syahputra, H.Yishun Industrial Street 1, Singapore; email: henry.syahputra@gmail.com},
	publisher = {Springer International Publishing},
	issn = {21992533},
	language = {English},
	abbrev_source_title = {Proc. I-ESA Conf.},
	document_type = {Book Chapter},
	source = {Scopus}
}

@ARTICLE{Alt2018376,
	author = {Alt, L. and Reitwiessner, C.},
	title = {SMT-based verification of solidity smart contracts},
	journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
	year = {2018},
	volume = {11247 LNCS},
	pages = {376-388},
	doi = {10.1007/978-3-030-03427-6_28},
	note = {cited By 1},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056479500&doi=10.1007%2f978-3-030-03427-6_28&partnerID=40&md5=7e288ca56a7e46656edfe3fc8d07558e},
	affiliation = {Ethereum Foundation, Berlin, Germany},
	abstract = {Ethereum smart contracts are programs that run inside a public distributed database called a blockchain. These smart contracts are used to handle tokens of value, can be accessed and analyzed by everyone and are immutable once deployed. Those characteristics make it imperative that smart contracts are bug-free at deployment time, hence the need to verify them formally. In this paper we describe our current efforts in building an SMT-based formal verification module within the compiler of Solidity, a popular language for writing smart contracts. The tool is seamlessly integrated into the compiler, where during compilation, the user is automatically warned of and given counterexamples for potential arithmetic overflow/underflow, unreachable code, trivial conditions, and assertion fails. We present how the component currently translates a subset of Solidity into SMT statements using different theories, and discuss future challenges such as multi-transaction and state invariants. © Springer Nature Switzerland AG 2018.},
	keywords = {Program compilers, Arithmetic overflows;  Deployment time;  Distributed database;  Future challenges;  In-buildings;  Multi-transactions;  Smart contracts;  State invariants, Formal verification},
	correspondence_address1 = {Reitwiessner, C.; Ethereum FoundationGermany; email: chris@ethereum.org},
	editor = {Margaria T., Steffen B.},
	publisher = {Springer Verlag},
	issn = {03029743},
	isbn = {9783030034269},
	language = {English},
	abbrev_source_title = {Lect. Notes Comput. Sci.},
	document_type = {Conference Paper},
	source = {Scopus}
}

@CONFERENCE{DeKruijff2018149,
	author = {De Kruijff, J. and Weigand, H.},
	title = {An introduction to commitment based smart contracts using ReactionRuleML},
	journal = {CEUR Workshop Proceedings},
	year = {2018},
	volume = {2239},
	pages = {149-157},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85057156856&partnerID=40&md5=58d0f20392063d35714ad6a202e9b445},
	affiliation = {Tilburg University, P.O. Box 90153, Tilburg, 5000 LE, Netherlands},
	abstract = {Smart contracts gain rapid exposure since the inception of blockchain technology. Today's smart contracts are coded in non-mainstream procedural programming languages (e.g. Solidity for Ethereum), which lifts the requirement to draft enterprise ready smart contract to both a legal professional and a programmer instead of only the former. In search for a smart contract language that reduces the threshold to draft one, this conceptual paper elaborates how business logic can be converted to executable code for commitment-based smart contracts. Hereby, a contract is viewed as a set of reciprocal commitments. The smart contract ensures the automated execution of all or most of these commitments. In order to leverage its event processing capabilities, Reaction RuleML has been used to appropriately represent the elements and working of passive and active rules within a commitment based smart. © Copyright 2018 for the individual papers by the papers' authors.},
	author_keywords = {Blockchain;  Commitment-based smart contracts;  Reaction RuleML;  RuleML},
	keywords = {Blockchain;  Ontology, Active rules;  Business logic;  Event Processing;  Executable codes;  Procedural programming languages;  Reaction RuleML;  RuleML;  Smart contracts, Computer programming languages},
	editor = {Gordijn J., Proper E.},
	publisher = {CEUR-WS},
	issn = {16130073},
	language = {English},
	abbrev_source_title = {CEUR Workshop Proc.},
	document_type = {Conference Paper},
	source = {Scopus}
}

@ARTICLE{Pãnescu2018235,
	author = {Pãnescu, A.-T. and Manta, V.},
	title = {Smart Contracts for Research Data Rights Management over the Ethereum Blockchain Network},
	journal = {Science and Technology Libraries},
	year = {2018},
	volume = {37},
	number = {3},
	pages = {235-245},
	doi = {10.1080/0194262X.2018.1474838},
	note = {cited By 2},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85047259865&doi=10.1080%2f0194262X.2018.1474838&partnerID=40&md5=43c067d01765536d08729e3f00249045},
	affiliation = {Faculty of Automatic Control and Computer Engineering, Gheorghe Asachi Technical University of Ia?i, Ia?i, Romania; Research & Development, figshare, London, United Kingdom},
	abstract = {This article presents a new method for managing digital reuse rights of research data, which leverages technologies such as the blockchain and smart contracts. This allows, on one hand, the creation of a permanent record on the agreements between the authors of the data and the reusers, with the possibility of verifying compliance at any time, and on the other hand, a higher level of granularity on defining the conditions of reuse. A practical implementation of such a workflow using the Solidity smart contract language is included, along with a brief analysis over the Ethereum blockchain network. © 2018, Published with license by Taylor & Francis Group, LLC. © 2018 Adrian-Tudor Pãnescu and Vasile Manta. © 2018, © 2018 Adrian-Tudor Pãnescu and Vasile Manta.},
	author_keywords = {Digital rights management;  repository technologies;  research data sharing;  smart contracts},
	keywords = {Blockchain;  Copyrights, Digital Rights Management;  Research data;  Smart contracts, Information management, article;  human;  human experiment;  language;  workflow},
	correspondence_address1 = {Pãnescu, A.-T.; Universitatea Tehnica Gheorghe Asachi din Iasi, Dimitrie Mangeron 27, Romania; email: tudor@figshare.com},
	publisher = {Routledge},
	issn = {0194262X},
	coden = {STELD},
	language = {English},
	abbrev_source_title = {Sci Technol Libr},
	document_type = {Article},
	source = {Scopus}
}

@ARTICLE{Myung2018,
	author = {Myung, S. and Lee, J.-H.},
	title = {Ethereum smart contract-based automated power trading algorithm in a microgrid environment},
	journal = {Journal of Supercomputing},
	year = {2018},
	doi = {10.1007/s11227-018-2697-7},
	note = {cited By 0; Article in Press},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056836385&doi=10.1007%2fs11227-018-2697-7&partnerID=40&md5=9b35e870b8ccad66eea64178b3b0ecb7},
	affiliation = {Protocol Engineering Lab., Sangmyung University, Cheonan, South Korea},
	abstract = {A recently emerged microgrid system presents the concept of a prosumer that consumers can also become suppliers, instead of a one-way configuration with separate providers and consumers. The microgrid system allows users to produce electricity, sell it on demand, and purchase them from other users. Unlike conventional centralized power trading, this emerging system aims on providing decentralized, transparent, and secure power trading. In this paper, we introduce a transparent and safe power trading algorithm between users using blockchain. The proposed algorithm has been implemented with an executable distributed code (i.e., smart contract) in an Ethereum blockchain platform. It explores for the power trading with automated operations in a decentralized environment without user intervention. The proposed power trading algorithm is written in the Solidity language and tested on the Ethereum blockchain platform. We also provide the actual code of the power trading algorithm written in the Solidity language. © 2018, Springer Science+Business Media, LLC, part of Springer Nature.},
	author_keywords = {Blockchain;  Ethereum;  Microgrid;  Power trading algorithm;  Smart contract},
	keywords = {Blockchain, Automated operations;  Distributed codes;  Ethereum;  Micro grid;  Micro-grid systems;  Power trading;  Smart contracts;  User intervention, Commerce},
	correspondence_address1 = {Lee, J.-H.; Protocol Engineering Lab., Sangmyung UniversitySouth Korea; email: jonghyouk@pel.smuc.ac.kr},
	publisher = {Springer New York LLC},
	issn = {09208542},
	coden = {JOSUE},
	language = {English},
	abbrev_source_title = {J Supercomput},
	document_type = {Article in Press},
	source = {Scopus}
}

@ARTICLE{López-Pintado2019399,
	author = {López-Pintado, O. and Dumas, M. and García-Bañuelos, L. and Weber, I.},
	title = {Dynamic Role Binding in Blockchain-Based Collaborative Business Processes},
	journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
	year = {2019},
	volume = {11483 LNCS},
	pages = {399-414},
	doi = {10.1007/978-3-030-21290-2_25},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85067339482&doi=10.1007%2f978-3-030-21290-2_25&partnerID=40&md5=34c1a32dfc151122a826fa25cd38dbb9},
	affiliation = {University of Tartu, Tartu, Estonia; Tecnol&#x00F3;gico de Monterrey, Monterrey, Mexico; Data61, CSIRO, Sydney, Australia},
	abstract = {Blockchain technology enables the execution of collaborative business processes involving mutually untrusted parties. Existing tools allow such processes to be modeled using high-level notations and compiled into smart contracts that can be deployed on blockchain platforms. However, these tools brush aside the question of who is allowed to execute which tasks in the process, either by deferring the question altogether or by adopting a static approach where all actors are bound to roles upon process instantiation. Yet, a key advantage of blockchains is their ability to support dynamic sets of actors. This paper presents a model for dynamic binding of actors to roles in collaborative processes and an associated binding policy specification language. The proposed language is endowed with a Petri net semantics, thus enabling policy consistency verification. The paper also outlines an approach to compile policy specifications into smart contracts for enforcement. An experimental evaluation shows that the cost of policy enforcement increases linearly with the number of roles and constraints. &#x00A9; 2019, Springer Nature Switzerland AG.},
	keywords = {Information systems;  Information use;  Petri nets;  Semantics;  Specification languages;  Specifications;  Systems engineering, Collaborative business process;  Collaborative process;  Consistency verifications;  Experimental evaluation;  Petri net semantics;  Policy enforcement;  Policy specification;  Policy specification languages, Blockchain},
	correspondence_address1 = {L&#x00F3;pez-Pintado, O.; University of TartuEstonia; email: orlenyslp@ut.ee},
	editor = {Giorgini P., Weber B.},
	publisher = {Springer Verlag},
	issn = {03029743},
	isbn = {9783030212896},
	language = {English},
	abbrev_source_title = {Lect. Notes Comput. Sci.},
	document_type = {Conference Paper},
	source = {Scopus}
}

@ARTICLE{Molina-Jimenez2019342,
	author = {Molina-Jimenez, C. and Solaiman, E. and Sfyrakis, I. and Ng, I. and Crowcroft, J.},
	title = {On and off-blockchain enforcement of smart contracts},
	journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
	year = {2019},
	volume = {11339 LNCS},
	pages = {342-354},
	doi = {10.1007/978-3-030-10549-5_27},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061750099&doi=10.1007%2f978-3-030-10549-5_27&partnerID=40&md5=4bb078ab52709748cfe99fc9c1cf2aea},
	affiliation = {Computer Laboratory, University of Cambridge, Cambridge, United Kingdom; School of Computing, Newcastle University, Newcastle upon Tyne, United Kingdom; Hat Community Foundation, Cambridge, United Kingdom},
	abstract = {Emerging blockchain technology is a promising platform for implementing smart contracts. But there is a large class of applications, where blockchain is inadequate due to performance, scalability, and consistency requirements, and also due to language expressiveness and cost issues that are hard to solve. In this paper we explain that in some situations a centralised approach that does not rely on blockchain is a better alternative due to its simplicity, scalability, and performance. We suggest that in applications where decentralisation and transparency are essential, developers can advantageously combine the two approaches into hybrid solutions where some operations are enforced by enforcers deployed onblockchains and the rest by enforcers deployed on trusted third parties. © Springer Nature Switzerland AG 2019.},
	author_keywords = {Blockchain;  Enforcement;  IoT;  Monitoring;  Off chain;  On chain;  Privacy;  Smart contracts;  Trust},
	keywords = {Data privacy;  Distributed computer systems;  Monitoring;  Scalability, Centralised;  Consistency requirements;  Decentralisation;  Enforcement;  Hybrid solution;  Trust;  Trusted third parties, Blockchain},
	correspondence_address1 = {Solaiman, E.; School of Computing, Newcastle UniversityUnited Kingdom; email: ellis.solaiman@newcastle.ac.uk},
	editor = {Mencagli G., Heras D.B.},
	publisher = {Springer Verlag},
	issn = {03029743},
	isbn = {9783030105488},
	language = {English},
	abbrev_source_title = {Lect. Notes Comput. Sci.},
	document_type = {Conference Paper},
	source = {Scopus}
}

@CONFERENCE{Dwivedi201911,
	author = {Dwivedi, V.K. and Norta, A.},
	title = {A legally relevant socio-technical language development for smart contracts},
	journal = {Proceedings - 2018 IEEE 3rd International Workshops on Foundations and Applications of Self* Systems, FAS*W 2018},
	year = {2019},
	pages = {11-13},
	doi = {10.1109/FAS-W.2018.00016},
	art_number = {8599523},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061554926&doi=10.1109%2fFAS-W.2018.00016&partnerID=40&md5=60b792f3d3dbe099d38949493ce9da9d},
	affiliation = {Department of Software Science, Tallinn University of Technology (of Aff.), Tallinn, Estonia; Department of Software Science, Tallinn University of Technology, Tallinn, Estonia},
	abstract = {Smart contracts play an advent role in automated business participation by rendering collaboration processes more time-efficient, cost-effective and establishing more transparency. Smart contracts facilitate trust-less systems, without the need for intervention from third-party intermediaries. Existing smart-contract languages mainly focus on technical utility and do not take into consideration social and legally relevant issues, e.g., lack of semantics, ontological completeness, and so on. In this research, we address the gap by developing with rigorous means a smart contract's language that aims to be legally relevant, and that comprises socio-technical utility for cross-organizational business collaboration. The proposed language seeks to retain the strengths of the already existing languages of different generations while eluding their limitations. We aim to identify and implement abstract grammar patterns for a smart-contract language that has the expected application utility and verifiability. We evaluate the developed language based on automating industry-collaboration cases with our novel smart-contract language to test the suitability, utility, and expressiveness. © 2018 IEEE.},
	author_keywords = {ANTLR;  Blockchain;  Expressiveness;  Ontological completeness;  Smart contracts;  Socio-technical;  Suitability},
	keywords = {Blockchain;  Cost effectiveness;  Semantics, ANTLR;  Expressiveness;  Ontological completeness;  Sociotechnical;  Suitability, Ontology},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	isbn = {9781538651759},
	language = {English},
	abbrev_source_title = {Proc. - IEEE Int. Workshops Found. Appl. Self* Syst., FAS*W},
	document_type = {Conference Paper},
	source = {Scopus}
}

@CONFERENCE{Eberhardt20181084,
	author = {Eberhardt, J. and Tai, S.},
	title = {ZoKrates-Scalable Privacy-Preserving Off-Chain Computations},
	journal = {Proceedings - IEEE 2018 International Congress on Cybermatics: 2018 IEEE Conferences on Internet of Things, Green Computing and Communications, Cyber, Physical and Social Computing, Smart Data, Blockchain, Computer and Information Technology, iThings/GreenCom/CPSCom/SmartData/Blockchain/CIT 2018},
	year = {2018},
	pages = {1084-1091},
	doi = {10.1109/Cybermatics_2018.2018.00199},
	art_number = {8726497},
	note = {cited By 2},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061802401&doi=10.1109%2fCybermatics_2018.2018.00199&partnerID=40&md5=0b9096866ba7a16da65653db7c7159bb},
	affiliation = {Information Systems Engineering (ISE), TU Berlin, Berlin, Germany},
	abstract = {Scalability and privacy are two challenges for today's blockchain systems. Processing transactions at every node in the system limits the system's ability to scale. Furthermore, the requirement to publish all corporate or individual information for processing at every node, essentially making the data public, is-despite of all other advantages-often considered a major obstacle to blockchain adoption. In this paper, we make two main contributions to address these two problems: (i)To increase efficiency, we propose a processing model which employs noninteractive proofs to off-chain computations, thereby reducing on-chain computational efforts to the verification of correctness of execution rather than the execution itself. Due to the verifiable computation scheme's zero-knowledge property, private information used in the off-chain computation does not have to become public to verify correctness. (ii)We introduce ZoKrates, a toolbox to specify, integrate and deploy such off-chain computations. It consists of a domain-specific language, a compiler, and generators for proofs and verification Smart Contracts. ZoKrates hides significant complexity inherent to zero-knowledge proofs, provides a more familiar and higher level of programming abstractions to developers and enables circuit integration, hence fostering adoption. © 2018 IEEE.},
	author_keywords = {off-chain;  privacy;  scalability;  zkSNARKs;  ZoKrates},
	keywords = {Blockchain;  Data privacy;  Internet of things;  Problem oriented languages;  Scalability, Computational effort;  Domain specific languages;  Non-interactive proof;  Private information;  Programming abstractions;  Zero knowledge proof;  zkSNARKs;  ZoKrates, Green computing},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	isbn = {9781538679753},
	language = {English},
	abbrev_source_title = {Proc. - IEEE Int. Congr. Cybermatics: IEEE Conf. Internet Things, Green Comput. Commun., Cyber, Phys. Soc. Comput., Smart Data, Blockchain, Comput. Inf. Technol., iThings/GreenCom/CPSCom/SmartData/Blockchain/CIT},
	document_type = {Conference Paper},
	source = {Scopus}
}

@CONFERENCE{Ellul2018158,
	author = {Ellul, J. and Pace, G.J.},
	title = {Runtime Verification of Ethereum Smart Contracts},
	journal = {Proceedings - 2018 14th European Dependable Computing Conference, EDCC 2018},
	year = {2018},
	pages = {158-163},
	doi = {10.1109/EDCC.2018.00036},
	art_number = {8530777},
	note = {cited By 4},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056457554&doi=10.1109%2fEDCC.2018.00036&partnerID=40&md5=5834745b674aef49b91b22b08a281ebe},
	affiliation = {Centre for Distributed Ledger Technologies, Department of Computer Science, University of Malta, Malta},
	abstract = {The notion of smart contracts in distributed ledger systems have been hailed as a safe way of enforcing contracts between participating parties. However, unlike legal contracts, which talk about ideal behaviour and consequences of not adhering to such behaviour, smart contracts are by their very nature executable code, giving explicit instructions on how to achieve compliance. Executable specification languages, particularly Turing complete ones, are notoriously known for the difficulty of ensuring correctness, and recent incidents which led to huge financial losses due to bugs in smart contracts, have highlighted this issue. In this paper we show how standard techniques from runtime verification can be used in the domain of smart contracts, including a novel stake-based instrumentation technique which ensures that the violating party provides insurance for correct behaviour. The techniques we describe have been partially implemented in a proof-of-concept tool ContractLarva, which we discuss in this paper. © 2018 IEEE.},
	author_keywords = {Blockchain;  Distributed ledger technology;  Runtime verification;  Smart contracts},
	keywords = {Blockchain;  Losses, Executable codes;  Executable specification languages;  Instrumentation techniques;  Legal contracts;  Proof of concept;  Run-time verification;  Smart contracts;  Turing-complete, Specification languages},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	isbn = {9781538680605},
	language = {English},
	abbrev_source_title = {Proc. - European Dependable Comput. Conf., EDCC},
	document_type = {Conference Paper},
	source = {Scopus}
}

@CONFERENCE{Sato2018945,
	author = {Sato, N. and Tateishi, T. and Amano, S.},
	title = {Formal requirement enforcement on smart contracts based on linear dynamic logic},
	journal = {Proceedings - IEEE 2018 International Congress on Cybermatics: 2018 IEEE Conferences on Internet of Things, Green Computing and Communications, Cyber, Physical and Social Computing, Smart Data, Blockchain, Computer and Information Technology, iThings/GreenCom/CPSCom/SmartData/Blockchain/CIT 2018},
	year = {2018},
	pages = {945-954},
	doi = {10.1109/Cybermatics_2018.2018.00181},
	art_number = {8726750},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85067848435&doi=10.1109%2fCybermatics_2018.2018.00181&partnerID=40&md5=a5ff5bce07b1b4530a21a6c4bc6fc3c3},
	affiliation = {IBM Research, Japan},
	abstract = {Recently, despite the growing popularity of smart contracts, one serious concern is arising among both industry and academia, that is, whether they work autonomously without human intervention really as intended and, when we are not sure, how we can ensure that contracts meet particular requirements. To resolve this, we propose a new formal approach to smart contract development: Instead of defining contracts just as programs in conventional languages, they should be defined using formal logic so that we can verify whether they meet particular requirements and enforce them if necessary. The primary challenge is that expressive formal logic often turns out to be undecidable and consequently executable programs cannot be generated. As a solution, each contract definition is divided into two layers, namely specification layer in a decidable logic called Linear Dynamic Logic for verification and enforcement of requirements and rule layer for defining implementation details, while the consistency between the two layers is systematically guaranteed. Based on this, it also becomes possible to automatically generate executable contract programs from their formal specification, which leads to improving the trustworthiness of contracts. Evaluation on Hyperledger Fabric shows the feasibility and high effectiveness of our approach. © 2018 IEEE.},
	keywords = {Blockchain;  Dynamics;  Formal logic;  Formal specification;  Green computing;  Internet of things, Contract projects;  Executable programs;  Formal approach;  Human intervention;  Linear dynamics, Computer circuits},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	isbn = {9781538679753},
	language = {English},
	abbrev_source_title = {Proc. - IEEE Int. Congr. Cybermatics: IEEE Conf. Internet Things, Green Comput. Commun., Cyber, Phys. Soc. Comput., Smart Data, Blockchain, Comput. Inf. Technol., iThings/GreenCom/CPSCom/SmartData/Blockchain/CIT},
	document_type = {Conference Paper},
	source = {Scopus}
}

@CONFERENCE{Zhang2018187,
	author = {Zhang, K. and Vitenberg, R. and Jacobsen, H.-A.},
	title = {Tutorial: Deconstructing blockchains: Concepts, systems, and insights},
	journal = {DEBS 2018 - Proceedings of the 12th ACM International Conference on Distributed and Event-Based Systems},
	year = {2018},
	pages = {187-190},
	doi = {10.1145/3210284.3219502},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85050526870&doi=10.1145%2f3210284.3219502&partnerID=40&md5=9eb6c3096d374ee2a3414f334831b8f4},
	affiliation = {Ecole de Technologie Superieure, Canada; Department of Informatics, University of Oslo, Norway; University of Toronto, Canada},
	abstract = {Popularly known for powering cryptocurrencies such as Bitcoin and Ethereum, blockchains is seen as a disruptive technology capable of impacting a wide variety of domains, ranging from finance to governance, by offering superior security, reliability, and transparency in a decentralized manner. In this tutorial presentation, we first study the original Bitcoin design, as well as Ethereum and Hyperledger, and reflect on their design from an academic perspective. We provide an overview of potential applications and associated research challenges, as well as a survey of ongoing research projects. We mention opportunities blockchain creates for event-based systems. Finally, we conclude with a walkthrough showing the process of developing a decentralized application (DApp), using a popular Smart Contract language (Solidity) for the blockchain platform of Ethereum. © 2018 Copyright held by the owner/author(s).},
	author_keywords = {Bitcoin;  Blockchain;  Distributed Ledger Technology;  Ethereum;  Hyperledger;  Smart Contracts},
	keywords = {Electronic money;  Software architecture, Bitcoin;  Disruptive technology;  Ethereum;  Event-based system;  Hyperledger;  Research challenges;  Smart contracts;  Walkthroughs, Blockchain},
	publisher = {Association for Computing Machinery, Inc},
	isbn = {9781450357821},
	language = {English},
	abbrev_source_title = {DEBS - Proc. ACM Int. Conf. Distributed Event-Based Syst.},
	document_type = {Conference Paper},
	source = {Scopus}
}

@CONFERENCE{Manevich2018226,
	author = {Manevich, Y. and Barger, A. and Tock, Y.},
	title = {Poster: Service discovery for hyperledger fabric},
	journal = {DEBS 2018 - Proceedings of the 12th ACM International Conference on Distributed and Event-Based Systems},
	year = {2018},
	pages = {226-229},
	doi = {10.1145/3210284.3219766},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85050563174&doi=10.1145%2f3210284.3219766&partnerID=40&md5=73b1525b58060aedc12717f1b9d31f7d},
	affiliation = {IBM Haifa Research Lab Haifa, Israel},
	abstract = {Hyperledger Fabric (HLF) is a modular and extensible permissioned blockchain platform released to open-source and hosted by the Linux Foundation. The platform's design exhibits principles required by enterprise grade business applications like supply-chains, nancial transactions, asset management, food safety, and many more. For that end HLF introduces several innovations, two of which are smart contracts in general purpose languages (chaincode in HLF), and exible endorsement policies, which govern whether a transaction is considered valid. Typical blockchain applications are comprised of two tiers: the rst tier focuses on the modelling of the data schema and embedding of business rules into the blockchain by means of smart contracts (chaincode) and endorsment policies; and the second tier uses the SDK (Software Development Kit) provided by HLF to implement client side application logic. However there is a gap between the two tiers that hinders the rapid adoption of changes in the chaincode and endorsement policies within the client SDK. Currently, the chaincode location and endorsement policies are statically congured into the client SDK. This limits the reliability and availability of the client in the event of changes in the platform, and makes the platform more dicult to use. In this work we address and bridge the gap by describing the design and implementation of Service Discovery. Service Discovery provides APIs which allow dynamic discovery of the conguration required for the client SDK to interact with the platform, alleviating the client from the burden of maintaining it. This enables the client to rapidly adapt to changes in the platform, thus signicantly improving the reliability of the application layer. It also makes the HLF platform more consumable, simplifying the job of creating blockchain applications. © 2018 Copyright held by the owner/author(s).},
	author_keywords = {Blockchain;  Distributed Ledger;  Service Discovery},
	keywords = {Application programs;  Blockchain;  Bridges;  Computer operating systems;  Open source software;  Software architecture;  Software design;  Supply chains, Business applications;  Client-side application;  Design and implementations;  Distributed Ledger;  General purpose languages;  Reliability and availability;  Service discovery;  Software development kit, Application programming interfaces (API)},
	publisher = {Association for Computing Machinery, Inc},
	isbn = {9781450357821},
	language = {English},
	abbrev_source_title = {DEBS - Proc. ACM Int. Conf. Distributed Event-Based Syst.},
	document_type = {Conference Paper},
	source = {Scopus}
}

@ARTICLE{Astigarraga2018111,
	author = {Astigarraga, T. and Chen, X. and Chen, Y. and Gu, J. and Hull, R. and Jiao, L. and Li, Y. and Novotny, P.},
	title = {Empowering business-level blockchain users with a rules framework for smart contracts},
	journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
	year = {2018},
	volume = {11236 LNCS},
	pages = {111-128},
	doi = {10.1007/978-3-030-03596-9_8},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056839615&doi=10.1007%2f978-3-030-03596-9_8&partnerID=40&md5=c6b109d3f6aa3c5f2d5436444c022c9e},
	affiliation = {IBM T.J. Watson Research Center, Yorktown Heights, United States; IBM China Research Laboratory, Beijing, China; Fudan University, Shanghai, China; Megagon Labs, UC San Diego, San Diego, United States},
	abstract = {The importance and adoption of Blockchain to support secure and trusted collaborations between businesses continues to grow. In todays practice, most Blockchain smart contracts (which capture the business processing logic) are written primarily by software developers. To enable widespread adoption of Blockchain, business analysts and subject matter experts will need to have direct access to the smart contract logic, including the abilities to understand, modify, and create substantial portions of that logic. This paper describes a fully functioning framework and system for specifying and executing smart contracts in which the core logic is specified by a controlled English, business-level rules language. The framework includes a browser-based smart editor for rules; a parser generator that enables substantial variation in the rules syntax; code generation that maps to a RETE based rules engine; and execution of the rules in either on-chain (using Hyperledger Fabric) or off-chain modes. The paper describes the rules framework and possible extensions, and identifies key aspects of Blockchain that impact the implementation. © Springer Nature Switzerland AG 2018.},
	keywords = {Blockchain;  Computation theory;  Distributed computer systems;  Syntactics, Business analysts;  Business processing;  Parser generators;  Rules languages;  Smart contracts;  Software developer;  Subject matter experts;  Substantial variations, Computer circuits},
	correspondence_address1 = {Hull, R.; IBM T.J. Watson Research CenterUnited States; email: hull@us.ibm.com},
	editor = {Yu Q., Pahl C., Vukovic M., Yin J.},
	publisher = {Springer Verlag},
	issn = {03029743},
	isbn = {9783030035952},
	language = {English},
	abbrev_source_title = {Lect. Notes Comput. Sci.},
	document_type = {Conference Paper},
	source = {Scopus}
}

@CONFERENCE{Tsai2019134,
	author = {Tsai, W.-T. and Ge, N. and Jiang, J. and Feng, K. and He, J.},
	title = {Invited paper: Beagle: A new framework for smart contracts taking account of law},
	journal = {Proceedings - 13th IEEE International Conference on Service-Oriented System Engineering, SOSE 2019, 10th International Workshop on Joint Cloud Computing, JCC 2019 and 2019 IEEE International Workshop on Cloud Computing in Robotic Systems, CCRS 2019},
	year = {2019},
	pages = {134-145},
	doi = {10.1109/SOSE.2019.00028},
	art_number = {8705875},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85065992600&doi=10.1109%2fSOSE.2019.00028&partnerID=40&md5=55e370b0ea46b13478b368076a35902c},
	affiliation = {Digital Society and Blockchain Laboratory, Beihang University, Beijing, China; School of Software, Beihang University, Beijing, China; Emory University School of Law, Atlanta, GA  30329, United States; Arizona State University, Tempe, AZ  85287, United States; Beijing Tiande Technologies, Beijing, China; Andrew International Sandbox Institute, Qingdao, China; IOB Laboratory, National Big Data Comprehensive Experimental Area, Guizhou, China},
	abstract = {This paper presents a new Beagle framework for Smart Contracts (SCs) taking account of law. Different from previous SC development or execution frameworks, this framework takes a practical approach to integrate law into SCs. Instead of translating legal contracts into codes directly, this paper proposes to treat SCs as a key component of legal contracts, use SCs to partially automate the executions of legal contracts, and produce legal evidence during the process. Thus, the proposed SC design will be significantly different from previous SC designs, not in programming languages to be used, but in the way SCs are designed and executed. This Beagle framework has five stages: SC template development from domain analysis, formal SC model and code development from templates, verification and validation (V&V), SC execution, and runtime monitoring. © 2019 IEEE.},
	author_keywords = {Blockchains;  Formal verification;  Law;  Smart contracts;  Templates},
	keywords = {Cloud computing;  Formal verification;  Robotics;  Systems engineering, Blockchains;  Code development;  Domain analysis;  Execution framework;  Legal contracts;  Runtime Monitoring;  Templates;  Verification-and-validation, Contracts},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	isbn = {9781728114415},
	language = {English},
	abbrev_source_title = {Proc. - IEEE Int. Conf. Service-Oriented Syst. Eng., SOSE , Int. Workshop Jt. Cloud Comput., JCC IEEE Int. Workshop Cloud Comput. Robot. Syst., CCRS},
	document_type = {Conference Paper},
	source = {Scopus}
}

@ARTICLE{Chen201844,
	author = {Chen, M. and Li, Y. and Xu, Z. and Huang, X. and Wang, W.},
	title = {A blockchain based data management system for energy trade},
	journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
	year = {2018},
	volume = {11373 LNCS},
	pages = {44-54},
	doi = {10.1007/978-3-030-05764-0_5},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85058619385&doi=10.1007%2f978-3-030-05764-0_5&partnerID=40&md5=7d9b1459fc082b7a793c1caad6bcbfe5},
	affiliation = {Department of Computer Science and Software Engineering, Xian Jiaotong-Liverpool University, Suzhou, China},
	abstract = {A new type of energy trade called the distributed energy resource has emerged in recent years, which can bring several benefits to people. However, trust issue also appeared among governments, users and energy companies. To solve the problem, smart contract and Ethereum are used to develop a system for distributed energy trade. A smart contract is a computer protocol intended to digitally facilitate, verify, or enforce the negotiation or performance of a contract. Ethereum is one of the decentralized platforms that run smart contracts. With the usage of smart contract and Ethereum, the system is reliable and it avoids the risk of using centralized energy management system. Therefore, the purpose of this project is to develop a blockchain based data management IoT system for energy chain transaction by Ethereum and test the smart contract by communicating sequential process (CSP) which is a formal language for describing patterns of interaction in concurrent systems. © 2018, Springer Nature Switzerland AG.},
	author_keywords = {Blockchain;  CSP;  Energy auction;  Ethereum;  Smart contract},
	keywords = {Blockchain;  Commerce;  Computer operating procedures;  Energy resources;  Formal languages;  Information management, Communicating sequential process;  Concurrent systems;  Data management system;  Distributed energies;  Distributed Energy Resources;  Energy auctions;  Ethereum;  Smart contracts, Energy management systems},
	correspondence_address1 = {Chen, M.; Department of Computer Science and Software Engineering, Xian Jiaotong-Liverpool UniversityChina; email: Mengjie.Chen15@xjtlu.edu.cn},
	editor = {Qiu M.},
	publisher = {Springer Verlag},
	issn = {03029743},
	isbn = {9783030057633},
	language = {English},
	abbrev_source_title = {Lect. Notes Comput. Sci.},
	document_type = {Conference Paper},
	source = {Scopus}
}

@CONFERENCE{AmirLatif2019264,
	author = {Amir Latif, R.M. and Shah, S.U.A. and Iqbal, S. and Farhan, M. and Rizwan, O. and Ijaz, F.},
	title = {Blockchain Transforms the Retail Level by Using a Supply chain Rules and Regulation},
	journal = {2019 2nd International Conference on Communication, Computing and Digital Systems, C-CODE 2019},
	year = {2019},
	pages = {264-269},
	doi = {10.1109/C-CODE.2019.8681027},
	art_number = {8681027},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85064754410&doi=10.1109%2fC-CODE.2019.8681027&partnerID=40&md5=e1d6e05ace14c9c50e2c0db981de8a06},
	affiliation = {Department of Computer Science, COMSATS University Islamabad Sahiwal Campus, Sahiwal, Pakistan; Department of Applied Sciences, Quaid-e-Azam College of Engineering Moreover, Technology Sahiwal, Sahiwal, Pakistan; Department of Computer Science, Virtual University of Pakistan, Lahore, Pakistan},
	abstract = {Food provenance is one of the most challenging problems that FSC. companies face today. A global supply chain network with multiple operating procedures and asymmetrical food regulations between countries makes end-to-end food tracking incidental to the food industry. Blockchain empowers new kinds of distributed applications design. Initially, Blockchain technology has been embraced in electronic money, yet this tech is significantly more promising for different areas loo. In this paper, are getting to present Blockchain technology easily. Additionally, we are talking that Blockchain technological innovation is also utilized in the industrial process from the retail industry to its advantage towards the client and additionally for that merchant to fantastic scope. During its heart, Blockchain is mainly thrilling because of the ability that it must empower increased confidence, transparency, and cooperation round constituencies which will otherwise battle to reach up to now belter. As distribution chain sophistication rises, there is an apparent chance to induce efficiency as a result of higher cooperation and transparency in between various constituencies like manufacturing companies, vendors and delivery carriers, insurance, importers, wholesalers, and merchants. Being aware of in Real-time the specific supply, spot, and condition of most inventory while in the machine might be quite a game-changer for most organizations, notably those working in perishable or luxury-goods. Unlike present systems, that rely heavily upon every element to keep its clear and dispersed database significance restricted and frequently postponed penetration to the standing of products anyplace from the machine Blockchain eases real-time and dependable information sharing one of the components and may provide consensus regarding the actual condition of their machine into parties. © 2019 IEEE.},
	author_keywords = {Blockchain;  Ethereum;  Hash;  Loyalty;  Retail;  Smart contract;  Trusted-retail},
	keywords = {C (programming language);  Ethereum;  Machine components;  Real time systems;  Sales;  Supply chains;  Time sharing systems;  Transparency, Distributed applications;  Global supply chain network;  Hash;  Loyalty;  Manufacturing companies;  Retail;  Technological innovation;  Trusted-retail, Blockchain},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	isbn = {9781538696095},
	language = {English},
	abbrev_source_title = {Int. Conf. Commun., Comput. Digit. Syst., C-CODE},
	document_type = {Conference Paper},
	source = {Scopus}
}

@CONFERENCE{Regnath2018,
	author = {Regnath, E. and Steinhorst, S.},
	title = {SmaCoNat: Smart Contracts in Natural Language},
	journal = {Forum on Specification and Design Languages},
	year = {2018},
	volume = {2018-September},
	doi = {10.1109/FDL.2018.8524068},
	art_number = {8524068},
	note = {cited By 1},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85057883955&doi=10.1109%2fFDL.2018.8524068&partnerID=40&md5=0cf7ea1f0a6be83ea6f4d0a0d8e40bc3},
	affiliation = {Technical University of Munich, Germany},
	abstract = {Smart contracts enable autonomous decentralized organizations (DADs) in large, trustless and open trading networks by specifying conditions for automated transactions of cryptographically secured data. This data could represent cryptocurrencies but also sensor data or commands to Cyber-Physical Systems (CPS) connected to the Internet. To provide reliability, the contract code is enforced by consensus and the transactions it triggers are nonrevertible, even if they were not intended by the programmer, which could lead to dangerous system behavior. In this paper, we conduct a survey over existing smart contract platforms and languages to determine requirements for the design of a safer contract language. Subsequently we propose concepts that enhance the understanding of code by limiting confusing language constructs, such as nesting, arbitrary naming of operations, and unreadable hash identifiers. This enables human reasoning about the contract semantics on a much higher abstraction layer, because a common understanding can be derived from the language specification itself. We implement these concepts in a new domain specific language called SmaCoNat to illustrate the feasibility and show that our concepts are barely covered by existing languages but significantly enhance readability and safety without violating deterministic parsability. © 2018 IEEE.},
	author_keywords = {Blockchain;  CPS;  DSL;  IoT;  Smart Contract},
	keywords = {Abstracting;  Blockchain;  DSL;  Embedded systems;  Problem oriented languages;  Semantics;  Specifications, Abstraction layer;  Contract languages;  Cyber-Physical System (CPS);  Domain specific languages;  Language constructs;  Language specification;  Natural languages;  Smart contracts, Natural language processing systems},
	publisher = {IEEE Computer Society},
	issn = {16369874},
	isbn = {9781538664186},
	language = {English},
	abbrev_source_title = {Forum Specifi. Des. Lang.},
	document_type = {Conference Paper},
	source = {Scopus}
}

@CONFERENCE{Androulaki2018,
	author = {Androulaki, E. and Barger, A. and Bortnikov, V. and Muralidharan, S. and Cachin, C. and Christidis, K. and De Caro, A. and Enyeart, D. and Murthy, C. and Ferris, C. and Laventman, G. and Manevich, Y. and Nguyen, B. and Sethi, M. and Singh, G. and Smith, K. and Sorniotti, A. and Stathakopoulou, C. and Vukoli?, M. and Cocco, S.W. and Yellick, J.},
	title = {Hyperledger Fabric: A Distributed Operating System for Permissioned Blockchains},
	journal = {Proceedings of the 13th EuroSys Conference, EuroSys 2018},
	year = {2018},
	volume = {2018-January},
	doi = {10.1145/3190508.3190538},
	note = {cited By 61},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85050874028&doi=10.1145%2f3190508.3190538&partnerID=40&md5=6fd88d3c0db890c4c3443dd097e34baf},
	affiliation = {IBM, United States; State Street Corp, United States},
	abstract = {Fabric is a modular and extensible open-source system for deploying and operating permissioned blockchains and one of the Hyperledger projects hosted by the Linux Foundation (www.hyperledger.org). Fabric is the first truly extensible blockchain system for running distributed applications. It supports modular consensus protocols, which allows the system to be tailored to particular use cases and trust models. Fabric is also the first blockchain system that runs distributed applications written in standard, general-purpose programming languages, without systemic dependency on a native cryptocurrency. This stands in sharp contrast to existing blockchain platforms that require smart-contracts to be written in domain-specific languages or rely on a cryptocurrency. Fabric realizes the permissioned model using a portable notion of membership, which may be integrated with industry-standard identity management. To support such flexibility, Fabric introduces an entirely novel blockchain design and revamps the way blockchains cope with non-determinism, resource exhaustion, and performance attacks. This paper describes Fabric, its architecture, the rationale behind various design decisions, its most prominent implementation aspects, as well as its distributed application programming model. We further evaluate Fabric by implementing and benchmarking a Bitcoin-inspired digital currency. We show that Fabric achieves end-to-end throughput of more than 3500 transactions per second in certain popular deployment configurations, with sub-second latency, scaling well to over 100 peers. © 2018 Copyright held by the owner/author(s).},
	keywords = {Blockchain;  Computer operating systems;  Computer systems programming;  Electronic money;  Open source software;  Open systems;  Problem oriented languages;  Scale (deposits), Consensus protocols;  Distributed applications;  Distributed operating systems;  Domain specific languages;  End-to-end throughput;  General-purpose programming language;  Identity management;  Implementation aspects, Distributed computer systems},
	publisher = {Association for Computing Machinery, Inc},
	isbn = {9781450355841},
	language = {English},
	abbrev_source_title = {Proc. EuroSys Conf., EuroSys},
	document_type = {Conference Paper},
	source = {Scopus}
}

@CONFERENCE{Pustiek2018217,
	author = {Pustiek, M. and Kos, A. and Sedlar, U.},
	title = {Blockchain based autonomous selection of electric vehicle charging station},
	journal = {Proceedings - 2016 International Conference on Identification, Information and Knowledge in the Internet of Things, IIKI 2016},
	year = {2018},
	volume = {2018-January},
	pages = {217-222},
	doi = {10.1109/IIKI.2016.60},
	note = {cited By 3},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85050877510&doi=10.1109%2fIIKI.2016.60&partnerID=40&md5=c8c646397b331f9cd7ee98cbe962e2ba},
	affiliation = {Faculty of Electrical Engineering, University of Ljubljana, Ljubljana, Slovenia},
	abstract = {This paper introduces a concept of autonomous blockchain based negotiation to select the most convenient electric vehicle charging station. The enabling blockchain technologies are well known fundament of cryptocurrencies, but offer many other possible applications areas, such as automated trusted machine-to-machine transactions, including auctions, bidding and payments. Compared to traditional centralized approaches, such a solution does not require any central entities and can be fully automated, including the payment for the energy. Based on e.g. the planned route, car battery status, real-time traffic information and drivers' preferences, a car could request charging bids from various charging stations along the route, by executing blockchain based smart contracts related to these charging stations. It would then select the most appropriate one based on offered prices, but other input parameters could be also taken into account, e.g. waiting times, estimated charging duration and alike. The smart contract execution could be extended to reservation and payment, too. In the paper we briefly present blockchain technologies, with the focus on Ethereum, and explain the role of smart contracts. We outline the architecture of a simple system for autonomous selection for electric vehicle charging station and provide a UML model to depict the activities of the actors involved in these operations and to clarify the role and the requirements of various blockchain related entities. The aim of our research paper is to outline a possible use-case for a blockchain prototype implementation. The implementation, which is not presented here, will serve for investigation of practical aspects of smart node development and operation, like transaction performance measurements, practical system requirement evaluations and comparison of reliability of various Ethereum clients. By our research we hope to support the investigation of novel applications and blending Internet of things with blockchain technologies, and in particular for elaboration of possible new use cases in the domain of electrical energy and mobility. © 2016 IEEE.},
	author_keywords = {Autonomous negotiation;  Blockchain;  Charging station;  Electric vehicle;  Smart contract;  UML},
	keywords = {Advanced traveler information systems;  Blending;  Blockchain;  Electric automobiles;  Electric vehicles;  Internet of things;  Unified Modeling Language, Autonomous negotiation;  Centralized approaches;  Charging station;  Electric vehicle charging;  Performance measurements;  Prototype implementations;  Real-time traffic information;  Smart contracts, Charging (batteries)},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	isbn = {9781509059522},
	language = {English},
	abbrev_source_title = {Proc. - Int. Conf. Identif., Inf. Knowl. Internet Things, IIKI},
	document_type = {Conference Paper},
	source = {Scopus}
}

@CONFERENCE{Bartoletti201883,
	author = {Bartoletti, M. and Zunino, R.},
	title = {BitML: A calculus for bitcoin smart contracts},
	journal = {Proceedings of the ACM Conference on Computer and Communications Security},
	year = {2018},
	pages = {83-100},
	doi = {10.1145/3243734.3243795},
	note = {cited By 4},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056446553&doi=10.1145%2f3243734.3243795&partnerID=40&md5=482e76a17c267d53499b6332d4adca5c},
	affiliation = {University of Cagliari, Italy; University of Trento, Canada},
	abstract = {We introduce BitML, a domain-specific language for specifying contracts that regulate transfers of bitcoins among participants, without relying on trusted intermediaries. We define a symbolic and a computational model for reasoning about BitML security. In the symbolic model, participants act according to the semantics of BitML, while in the computational model they exchange bitstrings, and read/append transactions on the Bitcoin blockchain. A compiler is provided to translate contracts into standard Bitcoin transactions. Participants can execute a contract by appending these transactions on the Bitcoin blockchain, according to their strategies. We prove the correctness of our compiler, showing that computational attacks on compiled contracts are also observable in the symbolic model. © 2018 Copyright held by the owner/author(s).},
	author_keywords = {Bitcoin;  Process calculi;  Smart contracts},
	keywords = {Blockchain;  Calculations;  Computation theory;  Computational methods;  Network security;  Problem oriented languages;  Program compilers;  Semantics, Bit-strings;  Bitcoin;  Computational model;  Domain specific languages;  Process calculi;  Smart contracts;  Symbolic model, Electronic money},
	publisher = {Association for Computing Machinery},
	issn = {15437221},
	isbn = {9781450356930},
	language = {English},
	abbrev_source_title = {Proc ACM Conf Computer Commun Secur},
	document_type = {Conference Paper},
	source = {Scopus}
}

@CONFERENCE{He2018132,
	author = {He, X. and Qin, B. and Zhu, Y. and Chen, X. and Liu, Y.},
	title = {SPESC: A Specification Language for Smart Contracts},
	journal = {Proceedings - International Computer Software and Applications Conference},
	year = {2018},
	volume = {1},
	pages = {132-137},
	doi = {10.1109/COMPSAC.2018.00025},
	art_number = {8377649},
	note = {cited By 1},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85055456069&doi=10.1109%2fCOMPSAC.2018.00025&partnerID=40&md5=8cdde5e0c37760d5eaf72f6de0c4f8fd},
	affiliation = {School of Computer and Communication Engineering, University of Science and Technology Beijing, Beijing, 100083, China; Fujian Provincial Key Laboratory of Network Computing and Intelligent Information Processing, Fuzhou University, Fuzhou, 350116, China; National Computer Network Emergency Response Technical Team/Coordination Center of China, China},
	abstract = {The smart contract is an interdisciplinary concept that concerns business, finance, contract law and information technology. Designing and developing a smart contract may require the close cooperation of many experts coming from different fields. How to support such collaborative development is a challenging problem in blockchain-oriented software engineering. This paper proposes SPESC, a specification language for smart contracts, which can define the specification of a smart contract for the purpose of collaborative design. SPESC can specify a smart contract in a similar form to real-world contracts using a natural-language-like grammar, in which the obligations and rights of parties and the transaction rules of cryptocurrencies are clearly defined. The preliminary study results demonstrated that SPESC can be easily learned and understood by both IT and non-IT users and thus has greater potential to facilitate collaborative smart contract development. © 2018 IEEE.},
	author_keywords = {Blockchain;  Smart contract;  Specification language},
	keywords = {Application programs;  Blockchain;  Specification languages;  Specifications, Collaborative design;  Collaborative development;  Contract laws;  Natural languages;  Real-world;  Smart contracts;  Transaction rules, Contracts},
	editor = {Lung C.-H., Conte T., Liu L., Akiyama T., Hasan K., Tovar E., Takakura H., Claycomb W., Cimato S., Yang J.-J., Zhang Z., Ahamed S.I., Reisman S., Demartini C., Nakamura M.},
	publisher = {IEEE Computer Society},
	issn = {07303157},
	isbn = {9781538626665},
	coden = {PSICD},
	language = {English},
	abbrev_source_title = {Proc Int Comput Software Appl Conf},
	document_type = {Conference Paper},
	source = {Scopus}
}

@ARTICLE{Mao201973131,
	author = {Mao, D. and Wang, F. and Wang, Y. and Hao, Z.},
	title = {Visual and User-Defined Smart Contract Designing System Based on Automatic Coding},
	journal = {IEEE Access},
	year = {2019},
	volume = {7},
	pages = {73131-73143},
	doi = {10.1109/ACCESS.2019.2920776},
	art_number = {8730359},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85067665985&doi=10.1109%2fACCESS.2019.2920776&partnerID=40&md5=4b65b0e235ab0bc6f9e8a3dc53fb0b12},
	affiliation = {Beijing Key Laboratory of Big Data Technology for Food Safety, College of Computer and Information Engineering, Beijing Technology and Business University, Beijing, 100048, China; National Engineering Laboratory for Agri-Product Quality Traceability, Beijing Technology and Business University, Beijing, 100048, China; Pattern Analysis and Machine Intelligence Group, Department of Computer and Information Science, University of Macau, Macau, 999078, China},
	abstract = {Smart contract applications based on Ethereum blockchain have been widely used in many fields. They are developed by professional developers using specialized programming languages like solidity. It requires high requirements on knowledge of the specialized field and the proficiency in contract programming. Thus, it is hard for normal users to design a usable smart contract based on their own demands. Most current studies about smart contracts focus on the security of coding while lack of friendly tools for users to design the specialized templates of contracts coding. This paper provides a visual and user-defined smart contract designing systems. It makes the development of domain-specific smart contracts simpler and visualization for contract users. The system implements the domain-specific features extraction about the crawled data sets of smart contract programs by TF-IDF and K-means++ clustering algorithm. Then, it achieves the automatic generation of unified basic function codes by Char-RNN (improved by LSTM) based on the domain-specific features. The system adopts Google Blockly and links the generated codes with UI controls. Finally, it provides a set of specialized templates of basic functions for users to design smart contracts by the friendly interface. It reduces the difficulty and costs of contract programming. The paper offers a case study to design contracts by users. The designed contracts were validated on the existing system to implement the food trading and traders' credit evaluation. The experimental results show that the designed smart contracts achieve good integration with the existing system and they can be deployed and compiled successfully. © 2013 IEEE.},
	author_keywords = {automatic coding;  Char-RNN;  LSTM;  Smart contract},
	keywords = {Commerce;  K-means clustering, automatic coding;  Automatic Generation;  Char-RNN;  Contract projects;  Credit evaluations;  Designing systems;  Features extraction;  LSTM, Codes (symbols)},
	correspondence_address1 = {Wang, F.; Beijing Key Laboratory of Big Data Technology for Food Safety, College of Computer and Information Engineering, Beijing Technology and Business UniversityChina; email: wfan0601@163.com},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	issn = {21693536},
	language = {English},
	abbrev_source_title = {IEEE Access},
	document_type = {Article},
	source = {Scopus}
}

@CONFERENCE{Weingaertner201855,
	author = {Weingaertner, T. and Rao, R. and Ettlin, J. and Suter, P. and Dublanc, P.},
	title = {Smart contracts using blockly: Representing a purchase agreement using a graphical programming language},
	journal = {Proceedings - 2018 Crypto Valley Conference on Blockchain Technology, CVCBT 2018},
	year = {2018},
	pages = {55-64},
	doi = {10.1109/CVCBT.2018.00012},
	art_number = {8525393},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85058340741&doi=10.1109%2fCVCBT.2018.00012&partnerID=40&md5=807bda00b9b38a2aaf9505c749b0d3d7},
	affiliation = {School of Information Technology, Lucerne University of Applied Sciences and Arts, Suurstoffi 41b, Rotkreuz, CH 6343, Switzerland; CSS Versicherungen AG, Tribschenstrasse 21, Lucerne, CH 6005, Switzerland; Suva Head Office, Fluhmattstrasse 1, Lucerne, CH 6002, Switzerland; Satisloh AG, Neuhofstrasse 12, Baar, CH 6340, Switzerland; Lucerne Cantonal Hospital, Spitalstrasse, Lucerne, CH 6000, Switzerland},
	abstract = {This research addresses the issue that in-depth programming knowhow is needed to read and write smart contracts. The goal was making the creation of smart contracts accessible to non-computer experts by the use of a graphical programming language (Blockly). We used modularization to capture the complexity of legal contracts and developed a mapping process to transform the graphical representation to the smart contract programming language Solidity. We applied our approach to legal purchase agreements and proved the practicality of our solution and explored its limitations. A prototype was built to show the feasibility of our approach. Our industry partner challenged the prototype by applying it to the contract creation process. We consider our work as the first step towards an application of smart contracts in the non-IT world and outside the today's expert shaped ecosystem of blockchain specialists. Several continuative research questions have been derived from our finding and are listed at the end of this paper. © 2018 IEEE.},
	author_keywords = {Blockchain;  Blockly;  Modularization;  Smart contracts;  Solidity},
	keywords = {Blockchain;  Computer graphics;  Modular construction;  Technology transfer, Blockly;  Graphical programming language;  Graphical representations;  Modularizations;  Purchase agreements;  Research questions;  Smart contracts;  Solidity, Ada (programming language)},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	isbn = {9781538672044},
	language = {English},
	abbrev_source_title = {Proc. - Crypto Valley Conf. Blockchain Technol., CVCBT},
	document_type = {Conference Paper},
	source = {Scopus}
}

@CONFERENCE{Zhu20181539,
	author = {Zhu, Y. and Song, X. and Yang, S. and Qin, Y. and Zhou, Q.},
	title = {Secure Smart Contract System Built on SMPC over Blockchain},
	journal = {Proceedings - IEEE 2018 International Congress on Cybermatics: 2018 IEEE Conferences on Internet of Things, Green Computing and Communications, Cyber, Physical and Social Computing, Smart Data, Blockchain, Computer and Information Technology, iThings/GreenCom/CPSCom/SmartData/Blockchain/CIT 2018},
	year = {2018},
	pages = {1539-1544},
	doi = {10.1109/Cybermatics_2018.2018.00259},
	art_number = {8726574},
	note = {cited By 0},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85067838976&doi=10.1109%2fCybermatics_2018.2018.00259&partnerID=40&md5=3c02e92323e4b987d2aa99c83322a920},
	affiliation = {University of Science and Technology Beijing, School of Computer and Communication Engineering, Beijing, China; Beijing Municipal Commission of Economy and Informatization, Beijing, China},
	abstract = {While smart contracts are praised widely, it should be noted that they have their disadvantages: lack of control over data protection and executive correctness or consistency. Aiming at this problem, we propose SMPC-based smart contract platform with three-layer structure: contract, computing, and group communication layer. In contract layer, we put forward SMPC-based smart contract framework, which gives the implementation process, language structure and grammar specification of smart contracts. In computing layer, fair SMPC algorithms based on general linear secret sharing scheme are designed to implement verifiable collaboration computing with input privacy and computation correctness. In group communication layer, the non-blocking broadcast is developed from non-blocking message passing interface (MPI)in order to ensure secure group communication in asynchronous networks with node and link failures. Finally, the results of simulation experiments with private currency transfers indicate that our platform is efficient and secure enough for common smart contracts. © 2018 IEEE.},
	author_keywords = {blockchain;  non-blocking MPI;  secure multi-party computation;  smart contract},
	keywords = {Blockchain;  Internet of things;  Message passing;  Simulation platform, Asynchronous networks;  Implementation process;  Linear secret sharing schemes;  Message passing interface;  Non-blocking;  Secure group communications;  Secure multi-party computation;  Three-layer structures, Green computing},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	isbn = {9781538679753},
	language = {English},
	abbrev_source_title = {Proc. - IEEE Int. Congr. Cybermatics: IEEE Conf. Internet Things, Green Comput. Commun., Cyber, Phys. Soc. Comput., Smart Data, Blockchain, Comput. Inf. Technol., iThings/GreenCom/CPSCom/SmartData/Blockchain/CIT},
	document_type = {Conference Paper},
	source = {Scopus}
}