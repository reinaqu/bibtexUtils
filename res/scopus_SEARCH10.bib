Scopus
EXPORT DATE: 21 July 2018

@ARTICLE{Goldenfein2018141,
author={Goldenfein, J. and Leiter, A.},
title={Legal Engineering on the Blockchain: ‘Smart Contracts’ as Legal Conduct},
journal={Law and Critique},
year={2018},
volume={29},
number={2},
pages={141-149},
doi={10.1007/s10978-018-9224-0},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85047108052&doi=10.1007%2fs10978-018-9224-0&partnerID=40&md5=6aedef3ab582074037ffeac783437319},
affiliation={Swinburne Law School, Swinburne University of Technology, Melbourne, Australia; School of Law, The University of Melbourne, Melbourne, Australia},
abstract={A new legal field is emerging around blockchain platforms and automated transactions. Understanding the relationships between law, legal enforcement, and these technological systems has become critical for scaling blockchain applications. Because ‘smart contracts’ do not themselves constitute agreements, the first necessary ‘legal’ development for transacting with these technologies involves linking computational transactions to natural language contracts. Various groups have accordingly begun building libraries of machine readable transaction modules that correspond to natural language contracting elements. In doing so, they are creating the building blocks for ever more complex transactions that will ultimately define the entire envelope of computational legal conduct in these environments, and likely standardise the field. However, also critical to emerging blockchain ‘legalities’, is the capacity for dispute resolution and legal enforcement. Beyond the performance of parties, or the quality of goods and services transacted, new mechanisms are also needed to address the performance of the computational transaction systems themselves. Such mechanisms are necessary to address the reality that smart contracts cannot be forced to perform actions beyond the parameters of their coding, even by a judicial order. Legal tools, both technological and institutional, are thus being developed to ‘soften’ the effects of self-executing transactions. In this article we treat these developments as law-making practices that are constitutive of an emerging legal field. Legal engineering exercises of this kind are not novel, and by drawing on historic examples from the common law and international arbitration, we gain insights into the competitive dynamics likely to be shaping legal engagements on the blockchain. © 2018, Springer Science+Business Media B.V., part of Springer Nature.},
author_keywords={Arbitration;  Automation;  Blockchain;  Dispute resolution;  Emerging norms;  Jurisdiction;  Law and technology;  Legal standards;  Platform law;  Smart contracts},
correspondence_address1={Goldenfein, J.; Swinburne Law School, Swinburne University of TechnologyAustralia; email: jgoldenfein@swin.edu.au},
publisher={Springer Netherlands},
issn={09578536},
language={English},
abbrev_source_title={Law Crit.},
document_type={Article},
source={Scopus},
}

@ARTICLE{Pãnescu20181,
author={Pãnescu, A. and Manta, V.},
title={Smart Contracts for Research Data Rights Management over the Ethereum Blockchain Network},
journal={Science and Technology Libraries},
year={2018},
pages={1-11},
doi={10.1080/0194262X.2018.1474838},
note={cited By 0; Article in Press},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85047259865&doi=10.1080%2f0194262X.2018.1474838&partnerID=40&md5=43c067d01765536d08729e3f00249045},
affiliation={Faculty of Automatic Control and Computer Engineering, “Gheorghe Asachi” Technical University of Iași, Iași, Romania; Research & Development, figshare, London, UK},
abstract={This article presents a new method for managing digital reuse rights of research data, which leverages technologies such as the blockchain and smart contracts. This allows, on one hand, the creation of a permanent record on the agreements between the authors of the data and the reusers, with the possibility of verifying compliance at any time, and on the other hand, a higher level of granularity on defining the conditions of reuse. A practical implementation of such a workflow using the Solidity smart contract language is included, along with a brief analysis over the Ethereum blockchain network. Published with license by Taylor & Francis Group, LLC. © 2018 Adrian-Tudor Pãnescu and Vasile Manta},
author_keywords={Digital rights management;  repository technologies;  research data sharing;  smart contracts},
keywords={Blockchain;  Copyrights, Digital Rights Management;  Research data;  Smart contracts, Information management, article;  human;  human experiment;  language;  workflow},
correspondence_address1={Pãnescu, A.email: tudor@figshare.com},
publisher={Routledge},
issn={0194262X},
coden={STELD},
language={English},
abbrev_source_title={Sci Technol Libr},
document_type={Article in Press},
source={Scopus},
}

@CONFERENCE{Le201857,
author={Le, T.C. and Xu, L. and Chen, L. and Shi, W.},
title={Proving conditional termination for smart contracts},
journal={BCC 2018 - Proceedings of the 2nd ACM Workshop on Blockchains, Cryptocurrencies, and Contracts, Co-located with ASIA CCS 2018},
year={2018},
pages={57-59},
doi={10.1145/3205230.3205239},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85049414584&doi=10.1145%2f3205230.3205239&partnerID=40&md5=b6a358a99729cd9605ef4b14df29897b},
affiliation={Stevens Institute of Technology, United States; University of Houston, United States},
abstract={Termination of smart contracts is crucial for any blockchain system's security and consistency, especially for those supporting Turing-complete smart contract languages. Resource-constrained blockchain systems, like Ethereum and Hyperledger Fabric, could prevent smart contracts from terminating properly when the preallocated resources are not sufficient. The Zen system utilizes the dependent type system of the programming language F to prove the termination of smart contracts for all inputs during compilation time. Since the smart contract execution usually depends on the current blockchain state and user inputs, this approach is not always successful. In this work, we propose a lazy approach by statically proving conditional termination and non-termination of a smart contract to determine input conditions under which the contract terminates or not. Prior to the execution of the smart contract, the proof-carrying blockchain system will check that its current state and the contract's input satisfy the termination conditions in order to determine if the contract is qualified (i.e., eventually terminating) to run on the chain. © 2018 Association for Computing Machinery.},
author_keywords={Blockchain;  Non-termination;  Smart contracts;  Termination},
keywords={Chromium compounds;  Electronic money, Dependent type system;  Non terminations;  Smart contracts;  Termination;  Termination condition;  Turing-complete;  User input, Blockchain},
publisher={Association for Computing Machinery, Inc},
isbn={9781450357586},
language={English},
abbrev_source_title={BCC - Proc. ACM Workshop Blockchains, Cryptocurrencies, Contract., Co-located ASIA CCS},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Chan2018498,
author={Chan, W. and Olmsted, A.},
title={Ethereum transaction graph analysis},
journal={2017 12th International Conference for Internet Technology and Secured Transactions, ICITST 2017},
year={2018},
pages={498-500},
doi={10.23919/ICITST.2017.8356459},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85048052714&doi=10.23919%2fICITST.2017.8356459&partnerID=40&md5=77b2efbf9cb443bbc2eef600a9e8708f},
affiliation={Department of Computer Science and Engineering, New York University, New York, NY, United States; Department of Computer Science, College of Charleston, Charleston, SC, United States},
abstract={Cryptocurrency platforms such as Bitcoin and Ethereum have become more popular due to decentralized control and the promise of anonymity. Ethereum is particularly powerful due to its support for smart contracts which are implemented through Turing complete scripting languages and digital tokens that represent fungible tradable goods. It is necessary to understand whether de-anonymization is feasible to quantify the promise of anonymity. Cryptocurrencies are increasingly being used in online black markets like Silk Road and ransomware like CryptoLocker and WannaCry. In this paper, we propose a model for persisting transactions from Ethereum into a graph database, Neo4j. We propose leveraging graph compute or analytics against the transactions persisted into a graph database. © 2017 Infonomics Society.},
author_keywords={Ethereum;  graph analytics;  graph compute;  Neo4j;  transaction graph},
keywords={Electronic money, Ethereum;  Graph analytics;  graph compute;  Neo4j;  transaction graph, Graph Databases},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781908320933},
language={English},
abbrev_source_title={Int. Conf. for Internet Technol. Secur. Trans., ICITST},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Chalaemwongwan2018957,
author={Chalaemwongwan, N. and Kurutach, W.},
title={State of the art and challenges facing consensus protocols on blockchain},
journal={International Conference on Information Networking},
year={2018},
volume={2018-January},
pages={957-962},
doi={10.1109/ICOIN.2018.8343266},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85047012886&doi=10.1109%2fICOIN.2018.8343266&partnerID=40&md5=db13c365b4357208c284055e423946df},
affiliation={Information Science and Technology, Mahanakorn University of Technology, Bangkok, Thailand},
abstract={Nowadays, the blockchain is a favorite platform, for instance, for use with cryptocurrency, smart contracts, IoT, and so forth. Blockchains are distributed ledgers that enable parties who do not trust each other to maintain states. The parties agree on the existence, values, and histories of the states. The blockchain applies the consensus protocol to verify the block which is distributing the network node. Consensus has many practices such as, for example, Byzantine general problem, Proof of work, and Proof of stake. However, there have not been numerous papers that have undertaken analysis with regard to various aspects, and which have incorporated the adoption summary as appropriate to the application. In this paper, we have provided a technical verification review with regard to the consensus algorithm taken from previous research. The audience will receive a consensus protocol, and the algorithm typically analyzes the application to match which platform is appropriate by viewing the node identity, energy saving and the tolerated power of the adversary, the data model, language, execution, application, and examples. Finally, we finish by presenting several research directions with regard to the consensus protocol. © 2018 IEEE.},
author_keywords={Blockchain;  Consensus;  Consensus algorithms;  Distributed consensus;  Distributed ledger},
keywords={Energy conservation, Consensus;  Consensus algorithms;  Consensus protocols;  Distributed consensus;  Distributed ledger;  Smart contracts;  State of the art;  Technical verification, Blockchain},
publisher={IEEE Computer Society},
issn={19767684},
isbn={9781538622896},
language={English},
abbrev_source_title={Int. Conf. Inf. Networking},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Bragagnolo20189,
author={Bragagnolo, S. and Rocha, H. and Denker, M. and Ducasse, S.},
title={SmartInspect: Solidity smart contract inspector},
journal={2018 IEEE 1st International Workshop on Blockchain Oriented Software Engineering, IWBOSE 2018 - Proceedings},
year={2018},
volume={2018-January},
pages={9-18},
doi={10.1109/IWBOSE.2018.8327566},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85049759806&doi=10.1109%2fIWBOSE.2018.8327566&partnerID=40&md5=dc9bbce26cdb72919e1bf51fed0a1907},
affiliation={Inria Lille - Nord Europe, Villeneuve D'ascq, France},
abstract={Solidity is a language used for smart contracts on the Ethereum blockchain. Smart contracts are embedded procedures stored with the data they act upon. Debugging smart contracts is a really difficult task since once deployed, the code cannot be reexecuted and inspecting a simple attribute is not easily possible because data is encoded. In this paper, we address the lack of inspectability of a deployed contract by analyzing contract state using decompilation techniques driven by the contract structure definition. Our solution, SmartInspect, also uses a mirror-based architecture to represent locally object responsible for the interpretation of the contract state. SmartInspect allows contract developers to better visualize and understand the contract stored state without needing to redeploy, nor develop any ad-hoc code. © 2018 IEEE.},
author_keywords={Blockchain;  Inspecting;  Smart Contracts;  Solidity},
keywords={Software engineering, Contract state;  Decompilation;  Inspectability;  Inspecting;  Smart contracts;  Solidity, Blockchain},
correspondence_address1={Bragagnolo, S.; Inria Lille - Nord Europe, Villeneuve D'ascqFrance; email: santiago.bragagnolo@inria.fr},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781538659861},
language={English},
abbrev_source_title={IEEE Int. Workshop Blockchain Oriented Softw. Eng., IWBOSE - Proc.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Wohrer20182,
author={Wohrer, M. and Zdun, U.},
title={Smart contracts: Security patterns in the ethereum ecosystem and solidity},
journal={2018 IEEE 1st International Workshop on Blockchain Oriented Software Engineering, IWBOSE 2018 - Proceedings},
year={2018},
volume={2018-January},
pages={2-8},
doi={10.1109/IWBOSE.2018.8327565},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85049743408&doi=10.1109%2fIWBOSE.2018.8327565&partnerID=40&md5=701cfc8d8f2f85dee7635d689644898a},
affiliation={University of Vienna, Faculty of Computer Science, Währingerstraße 29, Vienna, Austria},
abstract={Smart contracts that build up on blockchain technologies are receiving great attention in new business applications and the scientific community because they allow untrusted parties to manifest contract terms in program code and thus eliminate the need for a trusted third party. The creation process of writing well performing and secure contracts in Ethereum, which is today's most prominent smart contract platform, is a difficult task. Research on this topic has only recently started in industry and science. Based on an analysis of collected data with Grounded Theory techniques, we have elaborated several common security patterns, which we describe in detail on the basis of Solidity, the dominating programming language for Ethereum. The presented patterns describe solutions to typical security issues and can be applied by Solidity developers to mitigate typical attack scenarios. © 2018 IEEE.},
keywords={Blockchain, Attack scenarios;  Business applications;  Creation process;  Scientific community;  Security issues;  Security patterns;  Smart contracts;  Trusted third parties, Application programs},
correspondence_address1={Wohrer, M.; University of Vienna, Faculty of Computer Science, Währingerstraße 29Austria; email: maximilian.woehrer@univie.ac.at},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781538659861},
language={English},
abbrev_source_title={IEEE Int. Workshop Blockchain Oriented Softw. Eng., IWBOSE - Proc.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Governatori20181,
author={Governatori, G. and Idelberger, F. and Milosevic, Z. and Riveret, R. and Sartor, G. and Xu, X.},
title={On legal contracts, imperative and declarative smart contracts, and blockchain systems},
journal={Artificial Intelligence and Law},
year={2018},
pages={1-33},
doi={10.1007/s10506-018-9223-3},
note={cited By 1; Article in Press},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85045071957&doi=10.1007%2fs10506-018-9223-3&partnerID=40&md5=5536be6ebd2f812c82b0cafa09e9c66f},
affiliation={Data61, CSIRO, Brisbane, Australia; European University Institute, Florence, Italy; Deontik, Brisbane, Australia; Data61, CSIRO, Sydney, Australia},
abstract={This paper provides an analysis of how concepts pertinent to legal contracts can influence certain aspects of their digital implementation through smart contracts, as inspired by recent developments in distributed ledger technology. We discuss how properties of imperative and declarative languages including the underlying architectures to support contract management and lifecycle apply to various aspects of legal contracts. We then address these properties in the context of several blockchain architectures. While imperative languages are commonly used to implement smart contracts, we find that declarative languages provide more natural ways to deal with certain aspects of legal contracts and their automated management. © 2018 Springer Science+Business Media B.V., part of Springer Nature},
author_keywords={Blockchain;  Legal contracts;  Smart contracts},
keywords={Artificial intelligence;  Management, Automated management;  Contract management;  Declarative Languages;  Digital implementation;  Imperative languages;  Legal contracts;  Smart contracts, Blockchain},
correspondence_address1={Riveret, R.; Data61, CSIROAustralia; email: regis.riveret@data61.csiro.au},
publisher={Springer Netherlands},
issn={09248463},
coden={AINLE},
language={English},
abbrev_source_title={Artif Intell Law},
document_type={Article in Press},
source={Scopus},
}

@ARTICLE{Chatterjee2018739,
author={Chatterjee, K. and Goharshady, A.K. and Velner, Y.},
title={Quantitative analysis of smart contracts},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2018},
volume={10801 LNCS},
pages={739-767},
doi={10.1007/978-3-319-89884-1_26},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85045674762&doi=10.1007%2f978-3-319-89884-1_26&partnerID=40&md5=76992f4532a65a1263115ef879a68761},
affiliation={IST Austria (Institute of Science and Technology Austria), Klosterneuburg, Austria; Hebrew University of Jerusalem, Jerusalem, Israel},
abstract={Smart contracts are computer programs that are executed by a network of mutually distrusting agents, without the need of an external trusted authority. Smart contracts handle and transfer assets of considerable value (in the form of crypto-currency like Bitcoin). Hence, it is crucial that their implementation is bug-free. We identify the utility (or expected payoff) of interacting with such smart contracts as the basic and canonical quantitative property for such contracts. We present a framework for such quantitative analysis of smart contracts. Such a formal framework poses new and novel research challenges in programming languages, as it requires modeling of game-theoretic aspects to analyze incentives for deviation from honest behavior and modeling utilities which are not specified as standard temporal properties such as safety and termination. While game-theoretic incentives have been analyzed in the security community, their analysis has been restricted to the very special case of stateless games. However, to analyze smart contracts, stateful analysis is required as it must account for the different program states of the protocol. Our main contributions are as follows: we present (i) a simplified programming language for smart contracts; (ii) an automatic translation of the programs to state-based games; (iii) an abstraction-refinement approach to solve such games; and (iv) experimental results on real-world-inspired smart contracts. © The Author(s) 2018.},
keywords={Electronic money;  Game theory;  Modeling languages, Abstraction refinement;  Automatic translation;  Formal framework;  Research challenges;  Security community;  Smart contracts;  Temporal property;  Trusted authorities, Program translators},
correspondence_address1={Goharshady, A.K.; IST Austria (Institute of Science and Technology Austria)Austria; email: amir.goharshady@ist.ac.at},
editor={Ahmed A.},
publisher={Springer Verlag},
issn={03029743},
isbn={9783319898834},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Atzei2018217,
author={Atzei, N. and Bartoletti, M. and Cimoli, T. and Lande, S. and Zunino, R.},
title={SoK: Unraveling bitcoin smart contracts},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2018},
volume={10804 LNCS},
pages={217-242},
doi={10.1007/978-3-319-89722-6_9},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85045633136&doi=10.1007%2f978-3-319-89722-6_9&partnerID=40&md5=e915deec79e4004b0d83863c35c239cd},
affiliation={Università degli Studi di Cagliari, Cagliari, Italy; Università degli Studi di Trento, Trento, Italy},
abstract={Albeit the primary usage of Bitcoin is to exchange currency, its blockchain and consensus mechanism can also be exploited to securely execute some forms of smart contracts. These are agreements among mutually distrusting parties, which can be automatically enforced without resorting to a trusted intermediary. Over the last few years a variety of smart contracts for Bitcoin have been proposed, both by the academic community and by that of developers. However, the heterogeneity in their treatment, the informal (often incomplete or imprecise) descriptions, and the use of poorly documented Bitcoin features, pose obstacles to the research. In this paper we present a comprehensive survey of smart contracts on Bitcoin, in a uniform framework. Our treatment is based on a new formal specification language for smart contracts, which also helps us to highlight some subtleties in existing informal descriptions, making a step towards automatic verification. We discuss some obstacles to the diffusion of smart contracts on Bitcoin, and we identify the most promising open research challenges. © The Author(s) 2018.},
keywords={Specification languages, Academic community;  Automatic verification;  Bitcoin;  Research challenges;  Smart contracts;  Uniform framework, Electronic money},
correspondence_address1={Bartoletti, M.; Università degli Studi di CagliariItaly; email: bart@unica.it},
editor={Kusters R., Bauer L.},
publisher={Springer Verlag},
issn={03029743},
isbn={9783319897219},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Grishchenko2018243,
author={Grishchenko, I. and Maffei, M. and Schneidewind, C.},
title={A semantic framework for the security analysis of ethereum smart contracts},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2018},
volume={10804 LNCS},
pages={243-269},
doi={10.1007/978-3-319-89722-6_10},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85045629576&doi=10.1007%2f978-3-319-89722-6_10&partnerID=40&md5=bb6eed5b33ab20e4c9d393c1e45e1118},
affiliation={TU Wien, Vienna, Austria},
abstract={Smart contracts are programs running on cryptocurrency (e.g., Ethereum) blockchains, whose popularity stem from the possibility to perform financial transactions, such as payments and auctions, in a distributed environment without need for any trusted third party. Given their financial nature, bugs or vulnerabilities in these programs may lead to catastrophic consequences, as witnessed by recent attacks. Unfortunately, programming smart contracts is a delicate task that requires strong expertise: Ethereum smart contracts are written in Solidity, a dedicated language resembling JavaScript, and shipped over the blockchain in the EVM bytecode format. In order to rigorously verify the security of smart contracts, it is of paramount importance to formalize their semantics as well as the security properties of interest, in particular at the level of the bytecode being executed. In this paper, we present the first complete small-step semantics of EVM bytecode, which we formalize in the F* proof assistant, obtaining executable code that we successfully validate against the official Ethereum test suite. Furthermore, we formally define for the first time a number of central security properties for smart contracts, such as call integrity, atomicity, and independence from miner controlled parameters. This formalization relies on a combination of hyper- and safety properties. Along this work, we identified various mistakes and imprecisions in existing semantics and verification tools for Ethereum smart contracts, thereby demonstrating once more the importance of rigorous semantic foundations for the design of security verification techniques. © The Author(s) 2018.},
keywords={Blockchain;  Program debugging, Catastrophic consequences;  Controlled parameter;  Distributed environments;  Financial transactions;  Security properties;  Security verification;  Small-step semantics;  Trusted third parties, Semantics},
correspondence_address1={Schneidewind, C.; TU WienAustria; email: clara.schneidewind@tuwien.ac.at},
editor={Kusters R., Bauer L.},
publisher={Springer Verlag},
issn={03029743},
isbn={9783319897219},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Parizi201875,
author={Parizi, R.M. and Amritraj and Dehghantanha, A.},
title={Smart contract programming languages on blockchains: An empirical evaluation of usability and security},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2018},
volume={10974 LNCS},
pages={75-91},
doi={10.1007/978-3-319-94478-4_6},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85049370051&doi=10.1007%2f978-3-319-94478-4_6&partnerID=40&md5=bcbd31e2e8d8dec15438f9e2955056de},
affiliation={Department of Software Engineering and Game Development, Kennesaw State University, Kennesaw, GA, United States; Department of Computer Science, University of Sheffield, Sheffield, United Kingdom},
abstract={Blockchain is a promising infrastructural technology that is finding its way into a growing number of domains like big data, finance, and medical. While blockchain has come to be thought of primarily as the foundation for Bitcoin, it has evolved far beyond underpinning the virtual currency. As it becomes progressively popular, the need for effective programming means would be more demanding. Blockchain programming as a core means provides accounts of the ‘code is law’ that specifies agreements between parties and allows its stakeholders to still trust the platform to execute the agreed-upon contract (known as smart contract) as expected. Although it seems straightforward in theory, it is hardly the case when it comes to real-life situations. There have been several instances that show smart contracts are riddled with issues and vulnerabilities in code, causing damages. What’s for sure is lacking is that the existing languages are not living up to the point to be able to unleash the full potential of the blockchain, as often have resulted in buggy code with a steep learning curve for developers. This denotes that the current research on contract development is not sufficient and is still in a stage of infancy. In order to advance the state of the research in this area, an evaluation of the current state-of-the-art practices in a thorough and experimental manner is required. Thus, the objective of this paper is to give a comprehensive analysis of such domain-specific programming practices from critical points of usability and security to provide a working guideline for newcomers and researchers. © Springer International Publishing AG, part of Springer Nature 2018.},
author_keywords={Blockchain;  Blockchain coding;  Decentralized computing and development;  Smart contract platforms;  Smart contract programming},
keywords={Big data;  Blockchain;  Codes (symbols);  Computation theory;  Electronic money, Comprehensive analysis;  Decentralized computing and development;  Domain-specific programming;  Empirical evaluations;  Smart contracts;  Steep learning curve;  Usability and security;  Virtual currency, Contracts},
correspondence_address1={Parizi, R.M.; Department of Software Engineering and Game Development, Kennesaw State UniversityUnited States; email: rparizi1@kennesaw.edu},
editor={Chen S., Zhang L.-J., Wang H.},
publisher={Springer Verlag},
issn={03029743},
isbn={9783319944777},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Tikhomirov2018206,
author={Tikhomirov, S.},
title={Ethereum: State of knowledge and research perspectives},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2018},
volume={10723 LNCS},
pages={206-221},
doi={10.1007/978-3-319-75650-9_14},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85042524937&doi=10.1007%2f978-3-319-75650-9_14&partnerID=40&md5=306dd90b338ebacd41a9af961ea7f612},
affiliation={SnT, University of Luxembourg, Esch-sur-Alzette, Luxembourg},
abstract={Ethereum is a major blockchain-based platform for smart contracts – Turing complete programs that are executed in a decentralized network and usually manipulate digital units of value. A peer-to-peer network of mutually distrusting nodes maintains a common view of the global state and executes code upon request. The stated is stored in a blockchain secured by a proof-of-work consensus mechanism similar to that in Bitcoin. The core value proposition of Ethereum is a full-featured programming language suitable for implementing complex business logic. Decentralized applications without a trusted third party are appealing in areas like crowdfunding, financial services, identity management, and gambling. Smart contracts are a challenging research topic that spans over areas ranging from cryptography, consensus algorithms, and programming languages to governance, finance, and law. This paper summarizes the state of knowledge in this field. We provide a technical overview of Ethereum, outline open challenges, and review proposed solutions. We also mention alternative smart contract blockchains. © Springer International Publishing AG, part of Springer Nature 2018.},
author_keywords={Blockchain;  Ethereum;  Smart contracts;  State of knowledge},
keywords={Blockchain;  Distributed computer systems, Consensus algorithms;  Decentralized networks;  Ethereum;  Financial service;  Identity management;  Smart contracts;  State of knowledge;  Trusted third parties, Peer to peer networks},
correspondence_address1={Tikhomirov, S.; SnT, University of LuxembourgLuxembourg; email: sergey.s.tikhomirov@gmail.com},
editor={Imine A., Fernandez J.M., Logrippo L., Marion J.-Y., Garcia-Alfaro J.},
publisher={Springer Verlag},
issn={03029743},
isbn={9783319756493},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{NoAuthor2018,
title={1st International Conference on Blockchain, ICBC 2018 Held as Part of the Services Conference Federation, SCF 2018},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2018},
volume={10974 LNCS},
page_count={296},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85049358640&partnerID=40&md5=34dc2f18334abc3bd40377ff0a7b175a},
abstract={The proceedings contain 23 papers. The special focus in this conference is on Blockchain. The topics include: Towards legally enforceable smart contracts; border control and immigration on blockchain; RPchain: A blockchain-based academic social networking service for credible reputation building; IPFS-blockchain-based authenticity of online publications; blockchain framework for textile supply chain management: Improving transparency, traceability, and quality; research on the pricing strategy of the cryptocurrency miner’s market; FBaaS: Functional blockchain as a service; ledgerGuard: Improving blockchain ledger dependability; blockchain-based research data sharing framework for incentivizing the data owners; a simulation approach for studying behavior and quality of blockchain networks; a novel blockchain as a service paradigm; a business-oriented schema for blockchain network operation; your device and your power, my Bitcoin; blockchain in global trade; a design of digital rights management mechanism based on blockchain technology; infiniteChain: A multi-chain architecture with distributed auditing of sidechains for public blockchains; a method to predict the performance and storage of executing contract for ethereum consortium-blockchain; smart contract programming languages on blockchains: An empirical evaluation of usability and security; applying design patterns in smart contracts: A case study on a blockchain-based traceability application; AODV–based routing for payment channel networks; faster dual-key stealth address for blockchain-based Internet of Things systems.},
editor={Chen S., Zhang L.-J., Wang H.},
publisher={Springer Verlag},
issn={03029743},
isbn={9783319944777},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Review},
source={Scopus},
}

@ARTICLE{Pierrot2018211,
author={Pierrot, C. and Wesolowski, B.},
title={Malleability of the blockchain’s entropy},
journal={Cryptography and Communications},
year={2018},
volume={10},
number={1},
pages={211-233},
doi={10.1007/s12095-017-0264-3},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85041067063&doi=10.1007%2fs12095-017-0264-3&partnerID=40&md5=65d12aadc17ed6da865f4368aaadadee},
affiliation={Sorbonne Universités, UPMC Univ Paris 06, LIP6, 4 place Jussieu, Paris, France; EPFL IC LACAL, Station 14, Lausanne, Switzerland},
abstract={Trustworthy generation of public random numbers is necessary for the security of a number of cryptographic applications. It was suggested to use the inherent unpredictability of blockchains as a source of public randomness. Entropy from the Bitcoin blockchain in particular has been used in lotteries and has been suggested for a number of other applications ranging from smart contracts to election auditing. In this Arcticle, we analyse this idea and show how an adversary could manipulate these random numbers, even with limited computational power and financial budget. © 2017, Springer Science+Business Media, LLC.},
author_keywords={Bitcoin;  Blockchain;  Dyck language;  Random beacon;  Random number generation},
keywords={Budget control;  Electronic money;  Entropy, Bitcoin;  Block-chain;  Computational power;  Cryptographic applications;  Dyck language;  Election auditing;  Random beacon;  Random Numbers, Random number generation},
correspondence_address1={Pierrot, C.; Sorbonne Universités, UPMC Univ Paris 06, LIP6, 4 place Jussieu, France; email: Cecile.Pierrot@lip6.fr},
publisher={Springer New York LLC},
issn={19362447},
language={English},
abbrev_source_title={Cryptography Commun.},
document_type={Article},
source={Scopus},
}

@ARTICLE{Voelter20183,
author={Voelter, M.},
title={The design, evolution, and use of kernelf: An extensible and embeddable functional language},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2018},
volume={10888 LNCS},
pages={3-55},
doi={10.1007/978-3-319-93317-7_1},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85048840495&doi=10.1007%2f978-3-319-93317-7_1&partnerID=40&md5=450ee8f7936e903950f239c7d008b5eb},
affiliation={Stuttgart, Germany},
abstract={KernelF is a functional language built on top of MPS. It is designed to be highly extensible and embeddable in order to support its use at the core of domain-specific languages, realising an approach we sometimes call Funclerative Programming. “Funclerative” is of course a mash-up of “functional” and “declarative” and refers to the idea of using functional programming in the small, and declarative language constructs for the larger-scale, often domain-specific, structures in a program. We have used KernelF in a wide range of languages including health and medicine, insurance contract definition, security analysis, salary calculations, smart contracts and language-definition. In this paper, I illustrate the evolution of KernelF over the last two years. I discuss requirements on the language, and how those drove design decisions. I showcase a couple of the DSLs we built on top of KernelF to explain how MPS was used to enable the necessary language modularity. I demonstrate how we have integrated the Z3 solver to verify some aspects of programs. I present the architecture we have used to use KernelF-based DSLs in safety-critical environments. I close the keynote with an outlook on how KernelF might evolve in the future, and point out a few challenges for which we don’t yet have good solutions. © Springer International Publishing AG, part of Springer Nature 2018.},
author_keywords={Domain-specific languages;  Functional language;  Language engineering;  Language modularity;  Meta programming},
keywords={Compensation (personnel);  Digital subscriber lines;  Functional programming;  Problem oriented languages;  Safety engineering;  XML, Domain specific languages;  Functional languages;  Language engineering;  Language modularity;  Meta Programming, Medicine},
correspondence_address1={Voelter, M.Germany; email: voelter@acm.org},
editor={Rensink A., Sanchez Cuadrado J.},
publisher={Springer Verlag},
issn={03029743},
isbn={9783319933160},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Castell2018,
author={Castell, S.},
title={The future decisions of RoboJudge HHJ Arthur Ian Blockchain: Dread, delight or derision?},
journal={Computer Law and Security Review},
year={2018},
doi={10.1016/j.clsr.2018.05.011},
note={cited By 0; Article in Press},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85048703856&doi=10.1016%2fj.clsr.2018.05.011&partnerID=40&md5=a56cdc118b492fd14ebff86934c4fd63},
affiliation={Castell Consulting, Witham, Essex, United Kingdom},
abstract={Steve Saxby's prescient founding of CLSR, two hundred issues ago, encouraged and resonated with my own digital visionary thinking and professional activity in the evolving field of ICT and the Law. From Infolex, the UK's first commercially-available computer-assisted legal information retrieval service, and my APPEAL Report (on the admissibility of computer evidence in court and the legal reliability/security of IT systems), via my Forensic Systems Analysis expert methodology, to the nascent CryptoBlockTV, Steve's scholarly foresight in promoting adventurous exploration of ‘digilaw’ high-ground topics and issues has presented me with opportunities to generate a stream of prescient material, for which I am immensely grateful. And what is beyond prescient today is that the Coming of the Robots is unstoppable. The Artificial Intelligence (AI) Age is upon us; RoboJudge has all but already arrived. While many are concerned about defining and developing Machine Ethics, Castell's Second Dictum: “You cannot construct an algorithm that will reliably decide whether or not any algorithm is ethical” reveals that this is a futile exercise. Algorithms are also pivotal to the current mania for Crypto-Algorithmic Blockchain Technology Initial Coin Offerings (ICOs), with a ‘Crypto Tribe’ of Millennials relentlessly raising billions in real money thereby, to the extent that I have dubbed Crypto the Millennials’ Rock'n'Roll. The seasoned ICT expert professional however bears in mind that there are as yet no ISO standards for blockchain, and there is far more to creating and delivering a complete quality-assured system than just the blockchain component. Furthermore, the legal status of cryptocurrency, smart contract and distributed ledger technology is not clear or uncontentious – and there is already ICO litigation on foot. Nevertheless, taking my limerick-writing Castell GhostWriteBot's advice, it is perhaps time for my own asset-linked ICO, to launch my CapChere.com concept designed to reboot Capitalism and achieve ubiquitous universal share and wealth ownership. Look out for Castell GhostWriteBot's account (with or without limericks) of how I fared, in the 400th issue of CLSR. © 2018 Stephen Castell},
author_keywords={Algorithm;  Blockchain;  Crypto;  Ethic;  Intelligence;  Robot},
keywords={Algorithms;  Computer aided analysis;  Computer hardware description languages;  Intelligent robots;  ISO Standards;  Laws and legislation;  Lime;  Philosophical aspects;  Reliability analysis;  Robots;  Safety devices;  Search engines;  Systems analysis, Computer assisted;  Computer evidence;  Crypto;  Ethic;  Intelligence;  Legal information retrieval;  Professional activities;  Smart contracts, Blockchain},
correspondence_address1={Castell, S.; CASTELL Consulting, PO Box 334, United Kingdom; email: stephen@castellconsulting.com},
publisher={Elsevier Ltd},
issn={02673649},
coden={CLSRE},
language={English},
abbrev_source_title={Comput Law Secur. Rev.},
document_type={Article in Press},
source={Scopus},
}

@ARTICLE{Brammertz201876,
author={Brammertz, W. and Mendelowitz, A.I.},
title={From digital currencies to digital finance: the case for a smart financial contract standard},
journal={Journal of Risk Finance},
year={2018},
volume={19},
number={1},
pages={76-92},
doi={10.1108/JRF-02-2017-0025},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85044244460&doi=10.1108%2fJRF-02-2017-0025&partnerID=40&md5=dfb0c2ec18b05aae327f3538fd27240a},
affiliation={ACTUS Users Association, Rockville, MD, United States; Ariadne Business Analytics, Naenikon, Switzerland; ACTUS Financial Research Foundation, Rockville, MD, United States},
abstract={Purpose: This paper aims to demonstrate the importance of a cash flow generating standard for individual financial contract level data and the ability to create such a standard. Design/methodology/approach: The authors analyze the importance for such a standard of software that turns natural language contracts into cash flow generating algorithms; a data dictionary that standardizes contract terms; and access to variables that represent the state of the world (e.g. market risk, counterparty risk, etc.) that affect contractual obligations. Findings: The ability to realize benefits from the use of such a contract level algorithmic standard depends on the following: making the standard’s software open source; fully testing the software to have complete confidence in its accuracy; and enabling the software to use of a wide range of models of various sources of risk (market, credit and behavior risk) to support forward-looking analysis. Such a standard would solve the disconnect that exists in financial firms between the representation of financial contracts for transaction processing and analysis. The ACTUS Financial Research Foundation is building, testing and making available such a standard that represents almost all financial contracts extant in markets. Practical implications: The adoption of such a standard would reduce the costs of operations of financial firms, provide the computational infrastructure for more effective regulatory oversight, reduce regulatory reporting costs and improve financial market transparency. It would also enable the assessment of systemic risk by directly quantifying the interconnectedness of firms. Originality/value: This is a new approach to financial analytics that clearly separates the deterministic components of finance, which can be standardized from the stochastic elements that cannot be standardized. © 2018, Emerald Publishing Limited.},
author_keywords={Block-Chain;  Complete contracts;  Fintech;  Smart contract;  Smart financial contracts;  Standardization},
correspondence_address1={Brammertz, W.; ACTUS Users AssociationUnited States; email: willi.brammertz@ariadne.swiss.com},
publisher={Emerald Group Publishing Ltd.},
issn={15265943},
language={English},
abbrev_source_title={J. Risk Financ.},
document_type={Article},
source={Scopus},
}

@ARTICLE{NoAuthor2018,
title={27th European Symposium on Programming, ESOP 2018 Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2018},
volume={10801 LNCS},
page_count={1055},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85045667750&partnerID=40&md5=7a9037d4c53f189e7d89ef7c606fb2c6},
abstract={The proceedings contain 36 papers. The special focus in this conference is on . The topics include: Let arguments go first; behavioural equivalence via modalities for algebraic effects; explicit effect subtyping; a separation logic for a promising semantics; logical reasoning for disjoint permissions; deadlock-free monitors; fragment abstraction for concurrent shape analysis; reasoning about a machine with local capabilities: Provably safe stack and return pointer management; modular product programs; a fistful of dollars: Formalizing asymptotic complexity claims via deductive program verification; HOBiT: Programming lenses without using lens combinators; verified learning without regret: From algorithmic game theory to distributed systems with mechanized complexity guarantees; program verification by coinduction; velisarios: Byzantine fault-tolerant protocols powered by coq; evaluating design tradeoffs in numeric static analysis for java; an abstract interpretation framework for input data usage; Higher-order program verification via HFL model checking; quantitative analysis of smart contracts; session-typed concurrent contracts; a typing discipline for statically verified crash failure handling in distributed systems; on polymorphic sessions and functions: A tale of two (fully abstract) encodings; dualizing generalized algebraic data types by matrix transposition; concurrent kleene algebra: Free model and completeness; correctness of a concurrent object collector for actor languages; paxos consensus, deconstructed and abstracted; on parallel snapshot isolation and release/acquire consistency; Eventual consistency for CRDTs; A verified compiler from isabelle/HOL to CakeML; compositional verification of compiler optimisations on relaxed memory; deterministic concurrency: A clock-synchronised shared memory approach; an assertion-based program logic for probabilistic programs; fine-grained semantics for probabilistic programs.},
editor={Ahmed A.},
publisher={Springer Verlag},
issn={03029743},
isbn={9783319898834},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Review},
source={Scopus},
}

@ARTICLE{Sklaroff2017263,
author={Sklaroff, J.M.},
title={Smart contracts and the cost of inflexibility},
journal={University of Pennsylvania Law Review},
year={2017},
volume={166},
number={1},
pages={263-303},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85040002244&partnerID=40&md5=e2ae351f1d51c7b19e92d1a5839dba13},
abstract={"Smart contracts" are decentralized agreements built in computer code and stored on a blockchain. Proponents imagine a future where commerce takes place exclusively using smart contracts, avoiding the high costs of contract drafting, judicial intervention, opportunistic behavior, and the inherent ambiguities of written language. These decentralized code-only contracts are part of a decades-long quest to eliminate supposed inefficiencies in traditional written agreements. Electronic data interchange (EDI), a contracting technology from the 1970s, was designed with the same goal and garnered similar fanfare. Commentators at the time imagined a revolution in the way firms transacted and a full shift away from anything resembling a paper contract. Ultimately EDI failed to achieve these goals-it empowered, rather than circumvented, human decisionmakers along with their "inefficient" way of forming agreements. In doing so, EDI successfully reduced some transaction costs while preserving efficient forms of contractual flexibility. Smart contracts are indeed more technologically sophisticated than EDI. Smart contract scripting languages offer a broader range of operations and greater scalability. Smart contracts are capable of seamlessly integrating with the operational and financial systems at the core of modern firms, whereas EDI transactions occurred in very early digital environments that required human intermediaries. Proponents of the smart contract revolution, therefore, do not describe the technology as a way to merely enhance human activity; they argue it can replace every stage of agreement formation and performance. From a purely technical standpoint, they might be right. However, shifting away from human-language contracts creates new inefficiencies. These stem from three features of smart contracts: automation, which requires that every agreement be formed from fully-defined terms; decentralization, which conditions performance on verification by third parties; and anonymity, which eliminates the use of commercial context to give meaning to agreement terms. As a result, it is extremely costly to form smart contracts in a volatile environment or whenever there's a level of uncertainty surrounding the agreement. On the other hand, semantic contracts are flexible. They enable parties to use performance standards, generally-defined contract terms, to create an enforceable agreement without requiring complete knowledge of what might happen in the future. Standards also allow parties to responsively incorporate commercial customs into their agreement, circumventing the need for explicit but redundant negotiation. And once their agreement is formed and executed, the parties are nonetheless free to dynamically shape their relationship through informal modifications or by selectively enforcing breaches. These two forms of flexibility-linguistic ambiguity, and enforcement discretion-create important efficiencies in the contracting process. By eliminating this flexibility, smart contracting will impose costs that are more severe and intractable than the ones it seeks to solve. © 2017 University of Pennsylvania Law Review.},
correspondence_address1={Sklaroff, J.M.},
publisher={University of Pennsylvania Law School},
issn={00419907},
language={English},
abbrev_source_title={Univ. Pa. Law Rev.},
document_type={Review},
source={Scopus},
}

@CONFERENCE{Alimoglu2017471,
author={Alimoglu, A. and Ozturan, C.},
title={Design of a smart contract based autonomous organization for sustainable software},
journal={Proceedings - 13th IEEE International Conference on eScience, eScience 2017},
year={2017},
pages={471-476},
doi={10.1109/eScience.2017.76},
art_number={8109181},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85043760581&doi=10.1109%2feScience.2017.76&partnerID=40&md5=b76e002bff8bb638602886737835f3e3},
affiliation={Department of Computer Engineering, Bogazici University, Istanbul, Turkey},
abstract={The emerging blockchain technologies have enabled development of crypto-currencies and autonomous smart contracts that can operate in decentralized and trustless settings. Distributed autonomous organizations can be implemented using smart contracts available on the Ethereum blockchain. In this paper, we propose a distributed autonomous software organization model and its Ethereum smart contract implementation called AutonomousSoftwareOrg for providing a continuously operating virtual organization for software development communities and users. AutonomousSoftwareOrg facilitates a funding mechanism based on crypto-currencies, a decision making mechanism based on voting and record keeping for software usage citations and executions. AutonomousSoftwareOrg is deployed and tested on our local Ethereum based blockchain system (http://ebloc.cmpe.boun.edu.tr). Its Solidity language source code is available at https://github.com/ebloc/AutonomousSoftwareOrg. © 2017 IEEE.},
author_keywords={autonomous organization;  Blockchain;  crowdfunding;  smart contract;  software},
keywords={Blockchain;  Computer software;  Decision making;  Electronic money;  Records management, Autonomous software;  crowdfunding;  Decision-making mechanisms;  Development community;  Funding mechanisms;  Smart contracts;  Sustainable softwares;  Virtual organization, Software design},
correspondence_address1={Alimoglu, A.; Department of Computer Engineering, Bogazici UniversityTurkey; email: alper.alimoglu@boun.edu.tr},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781538626863},
language={English},
abbrev_source_title={Proc. - IEEE Int. Conf. eSci., eScience},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{O'Connor2017107,
author={O'Connor, R.},
title={Simplicity: A new language for blockchains},
journal={PLAS 2017 - Proceedings of the 2017 Workshop on Programming Languages and Analysis for Security, co-located with CCS 2017},
year={2017},
volume={2017-January},
pages={107-120},
doi={10.1145/3139337.3139340},
note={cited By 1},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85043361529&doi=10.1145%2f3139337.3139340&partnerID=40&md5=f2657232e134090f18cbe620df332ef9},
affiliation={Blockstream, United States},
abstract={Simplicity is a typed, combinator-based, functional language without loops and recursion, designed to be used for crypto-currencies and blockchain applications. It aims to improve upon existing crypto-currency languages, such as Bitcoin Script and Ethereum's EVM, while avoiding some of the problems they face. Simplicity comes with formal denotational semantics defined in Coq, a popular, general purpose software proof assistant. Simplicity also includes operational semantics that are defined with an abstract machine that we call the Bit Machine. The Bit Machine is used as a tool for measuring the computational space and time resources needed to evaluate Simplicity programs. Owing to its Turing incompleteness, Simplicity is amenable to static analysis that can be used to derive upper bounds on the computational resources needed, prior to execution. While Turing incomplete, Simplicity can express any finitary function, which we believe is enough to build useful "smart contracts" for blockchain applications. © 2017 Association for Computing Machinery.},
keywords={Blockchain;  Electronic money;  Semantics;  Theorem proving, Abstract machines;  Computational resources;  Formal denotational semantics;  Functional languages;  General purpose software;  Operational semantics;  Proof assistant;  Smart contracts, Static analysis},
correspondence_address1={O'Connor, R.; BlockstreamUnited States; email: roconnor@blockstream.com},
publisher={Association for Computing Machinery, Inc},
isbn={9781450350990},
language={English},
abbrev_source_title={PLAS - Proc. Workshop Program. Lang. Anal. Secur., co-located CCS},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Thomas20172619,
author={Thomas, L. and Long, C. and Burnap, P. and Wu, J. and Jenkins, N.},
title={Automation of the supplier role in the GB power system using blockchain-based smart contracts},
journal={CIRED - Open Access Proceedings Journal},
year={2017},
volume={2017},
number={1},
pages={2619-2623},
doi={10.1049/oap-cired.2017.0987},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85046945340&doi=10.1049%2foap-cired.2017.0987&partnerID=40&md5=8d0d1fc69b99b4a8549cf003b344f87b},
affiliation={School of Engineering, Cardiff University, Wales, United Kingdom; School of Computer Science and Informatics, Cardiff University, Wales, United Kingdom},
abstract={An electricity supply smart contract was developed and demonstrated to perform pre-time-of-use price negotiation between demand and generation and post-time-of-use settlement and payment. The smart contract was demonstrated with 1000 loads/generators with usages simulated using lognormal probability distributions. It combines payment of deposit, negotiation of price based on estimates, settlement based on actual usage and enactment of payments using crypto-currency. The settlement procedure rewards customers that adjusted to balance the system. The smart contract was written in the solidity programming language and implemented with a simulated Ethereum blockchain using testrpc and go-ethereum. In the example test case, a price was agreed, settled and payment enacted. © 2017 The Institution of Engineering and Technology. All rights reserved.},
keywords={Blockchain;  Costs;  Electric utilities, Electricity supply;  Power System;  Price-based;  Smart contracts;  Supplier roles;  Test case;  Time of use;  Time of use price, Probability distributions},
correspondence_address1={Thomas, L.; School of Engineering, Cardiff UniversityUnited Kingdom; email: ThomasL62@cf.ac.uk},
publisher={Institution of Engineering and Technology},
issn={25150855},
language={English},
abbrev_source_title={CIRED - Open Access Proc. J.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Hofman2017,
author={Hofman, D.L.},
title={Legally speaking: Smart contracts, archival bonds, and linked data in the blockchain},
journal={2017 26th International Conference on Computer Communications and Networks, ICCCN 2017},
year={2017},
doi={10.1109/ICCCN.2017.8038515},
art_number={8038515},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85032295840&doi=10.1109%2fICCCN.2017.8038515&partnerID=40&md5=b02bac5f0262e4b399c6dc7eb6f6ca98},
affiliation={School of Library, Archival, and Information Science, University of British Columbia, Vancouver, BC, Canada},
abstract={As currently understood and used, "smart contracts" are merely a means to execute the terms of a full legal contract. This paper, however, proposes the creation of a semantic legal layer to support blockchain based legal contracts. Some of the primary challenges to such an implementation, including the need to develop robust, jurisdiction- specific legal ontologies, and develop means to preserve the evidentiary character of records leading up and proving contract formation, are considered. Particular attention is given to the particular challenges posed - and purposes behind - the use of legal language in contract drafting, with consideration of ways to utilize distributed ledger and linked data technology to leverage that specialist language for a broader base of contracting parties. © 2017 IEEE.},
author_keywords={Archival bond;  Blockchain;  Evidence;  Linked data;  Semantic layer;  Smart contracts},
keywords={Data handling;  Semantics, Block-chain;  Contract drafting;  Contract formation;  Evidence;  Legal contracts;  Legal ontology;  Linked datum;  Semantic layer, Computer networks},
correspondence_address1={Hofman, D.L.; School of Library, Archival, and Information Science, University of British ColumbiaCanada},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781509029914},
language={English},
abbrev_source_title={Int. Conf. Comput. Commun. Networks, ICCCN},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Scoca2017592,
author={Scoca, V. and Uriarte, R.B. and Nicola, R.D.},
title={Smart Contract Negotiation in Cloud Computing},
journal={IEEE International Conference on Cloud Computing, CLOUD},
year={2017},
volume={2017-June},
pages={592-599},
doi={10.1109/CLOUD.2017.81},
art_number={8030638},
note={cited By 1},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85032202098&doi=10.1109%2fCLOUD.2017.81&partnerID=40&md5=75a70469c16e70ff44b34d545264719d},
affiliation={IMT School for Advanced Studies Lucca, Italy},
abstract={A smart contract is the formalisation of an agreement, whose terms are automatically enforced by relying on a transaction protocol, while minimising the need of intermediaries. Such contracts not only specify the service and its quality but also the possible changes at runtime of the terms of agreement. Although smart contracts provide a great deal of flexibility, analysing their compatibility and reaching agreements with this level of dynamism is considerably more challenging, due to the freedom of clients and providers in formulating needs/offers. We introduce a formal language to specify interactions between offers and requests and present a methodology for the autonomous negotiation of smart contracts, which analyses the cost and the necessary changes for reaching an agreement. Moreover, we describe a set of experiments that provides insights on the relative cost of dynamism in negotiating smart contracts and compare the request/offer matching rates of our solution with related works. © 2017 IEEE.},
author_keywords={Cloud Computing;  Negotiation;  Service Level Agreement;  Smart Contracts},
keywords={Cloud computing;  Cost benefit analysis;  Formal languages;  Network function virtualization, Autonomous negotiation;  Contract negotiation;  Formalisation;  Negotiation;  Related works;  Relative costs;  Service Level Agreements;  Transaction protocol, Contracts},
editor={Fox G.C.},
publisher={IEEE Computer Society},
issn={21596182},
isbn={9781538619933},
language={English},
abbrev_source_title={IEEE Int. Conf. Cloud Comput., CLOUD},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Rocha2017,
author={Rocha, H. and Ducasse, S. and Denker, M. and Lecerf, J.},
title={Solidity parsing using SmaCC: Challenges and irregularities},
journal={IWST 2017 - Proceedings of the 12th International Workshop on Smalltalk Technologies, in conjunction with the 25th International Smalltalk Joint Conference},
year={2017},
doi={10.1145/3139903.3139906},
art_number={a2},
note={cited By 1},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85040192091&doi=10.1145%2f3139903.3139906&partnerID=40&md5=e9840a8cf07f32f2df79ca070541ff7b},
affiliation={Inria Lille - Nord Europe; CEA-List},
abstract={Solidity is a language used to implement smart contracts on a blockchain platform. Since its initial conception in 2014, Solidity has evolved into one of the major languages for the Ethereum platform as well as other blockchain technologies. Due to its popularity, there are many tools specifically designed to handle smart contracts written in Solidity. However, there is a lack of tools for Pharo to handle Solidity contracts. Therefore, we implemented a parser using SmaCC to serve as a base for further developing Solidity support in Pharo. In this paper, we describe the parser creation, the irregularities we found in the Solidity grammar specification, and common practices on how to adapt the grammar to an LR type parser. Our experiences with parsing the Solidity language using SmaCC may help other developers trying to convert similar grammars. © 2017 Copyright held by the owner/author(s).},
author_keywords={Blockchain;  Ethereum;  Parser;  SmaCC;  Solidity},
keywords={Block-chain;  Ethereum;  Parser;  SmaCC;  Solidity, Computational linguistics},
publisher={Association for Computing Machinery, Inc},
isbn={9781450355544},
language={English},
abbrev_source_title={IWST - Proc. Int. Workshop Smalltalk Techno., conjunction Int. Smalltalk Jt. Conf.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Dickerson2017303,
author={Dickerson, T. and Gazzillo, P. and Herlihy, M. and Koskinen, E.},
title={Adding concurrency to smart contracts},
journal={Proceedings of the Annual ACM Symposium on Principles of Distributed Computing},
year={2017},
volume={Part F129314},
pages={303-312},
doi={10.1145/3087801.3087835},
note={cited By 2},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85027842381&doi=10.1145%2f3087801.3087835&partnerID=40&md5=f3536b4ebd775784eabef068f4ed31a5},
affiliation={Brown University, United States; Yale University, United States},
abstract={Modern cryptocurrency systems, such as Ethereum, permit complex financial transactions through scripts called smart contracts. These smart contracts are executed many, many times, always without real concurrency. First, all smart contracts are serially executed by miners before appending them to the blockchain. Later, those contracts are serially re-executed by validators to verify that the smart contracts were executed correctly by miners. Serial execution limits system throughput and fails to exploit today's concurrent multicore and cluster architectures. Nevertheless, serial execution appears to be required: contracts share state, and contract programming languages have a serial semantics. This paper presents a novel way to permit miners and validators to execute smart contracts in parallel, based on techniques adapted from software transactional memory. Miners execute smart contracts speculatively in parallel, allowing non-conflicting contracts to proceed concurrently, and "discovering" a serializable concurrent schedule for a block's transactions, This schedule is captured and encoded as a deterministic fork-join program used by validators to re-execute the miner's parallel schedule deterministically but concurrently. Smart contract benchmarks run on a JVM with ScalaSTM show that a speedup of 1.33x can be obtained for miners and 1.69x for validators with just three concurrent threads. © 2017 Association for Computing Machinery.},
keywords={Distributed computer systems;  Semantics, Block-chain;  Cluster architecture;  Concurrent threads;  Financial transactions;  Parallel schedules;  Serial execution;  Software transactional memory;  System throughput, Miners},
publisher={Association for Computing Machinery},
isbn={9781450349925},
coden={85LRA},
language={English},
abbrev_source_title={Proc Annu ACM Symp Princ Distrib Comput},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Porru2017169,
author={Porru, S. and Pinna, A. and Marchesi, M. and Tonelli, R.},
title={Blockchain-oriented software engineering: Challenges and new directions},
journal={Proceedings - 2017 IEEE/ACM 39th International Conference on Software Engineering Companion, ICSE-C 2017},
year={2017},
pages={169-171},
doi={10.1109/ICSE-C.2017.142},
art_number={7965292},
note={cited By 10},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85026739193&doi=10.1109%2fICSE-C.2017.142&partnerID=40&md5=1cb3e2ba77f13d048a0f2ae1645e9443},
affiliation={University of Cagliari, Department of Electrical and Electronic Engineering, Italy; University of Cagliari, Department of Informatics and Mathematics, Italy},
abstract={In this work, we acknowledge the need for software engineers to devise specialized tools and techniques for blockchain-oriented software development. Ensuring effective testing activities, enhancing collaboration in large teams, and facilitating the development of smart contracts all appear as key factors in the future of blockchain-oriented software development. © 2017 IEEE.},
author_keywords={Blockchain;  Cryptocurrencies;  Smart contracts;  Software engineering},
keywords={C (programming language);  Electronic money;  Software design;  Software testing, Block-chain;  Effective testing;  Specialized tools, Software engineering},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781538615898},
language={English},
abbrev_source_title={Proc. - IEEE/ACM Int. Conf. Softw. Eng. Companion, ICSE-C},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Hull20172,
author={Hull, R.},
title={Blockchain: Distributed event-based processing in a data-centric world},
journal={DEBS 2017 - Proceedings of the 11th ACM International Conference on Distributed Event-Based Systems},
year={2017},
pages={2-4},
doi={10.1145/3093742.3097982},
note={cited By 2},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85023177226&doi=10.1145%2f3093742.3097982&partnerID=40&md5=4afd91a4296a042c906b033b6ea867c9},
affiliation={IBM T.J. Watson Research Center, Yorktown Heights, NY, United States},
abstract={Usage of Blockchain is expanding from the initial focus on crypto-currencies towards applications to support a broad range of collaborative activies amongst businesses, organizations, and individuals. There are two broad levels of Blockchain: the foundation level relates to encryption, consensus algorithms, and support for a single (logical) data store that is shared by all participants; and the "smart contract" level that enables developers and business-level users to specify the data, logic, and behavior that collaborations should follow. The smart contracts are programs that are fundamentally event driven, data-centric, and support the activity of a distributed set of stakeholders situated across multiple organizations. This raises an array of research challenges in areas including language and solution design, interoperation across smart contracts, and verification. © 2017 Copyright held by the owner/author(s).},
author_keywords={Blockchain;  Business collaboration;  Business process management;  Smart contract},
keywords={Administrative data processing;  Cryptography;  Enterprise resource management;  Management science;  Software architecture, Block-chain;  Business collaboration;  Business process management;  Consensus algorithms;  Distributed events;  Multiple organizations;  Research challenges;  Solution designs, Data handling},
correspondence_address1={Hull, R.; IBM T.J. Watson Research CenterUnited States; email: hull@us.ibm.com},
publisher={Association for Computing Machinery, Inc},
isbn={9781450350655},
language={English},
abbrev_source_title={DEBS - Proc. ACM Int. Conf. Distributed Event-Based Syst.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Magazzeni201750,
author={Magazzeni, D. and Mcburney, P. and Nash, W.},
title={Validation and verification of smart contracts: A research agenda},
journal={Computer},
year={2017},
volume={50},
number={9},
pages={50-57},
doi={10.1109/MC.2017.3571045},
art_number={8048663},
note={cited By 5},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85030465463&doi=10.1109%2fMC.2017.3571045&partnerID=40&md5=1fa6647654575cf3ee01b6ef32ac9522},
affiliation={King's College London, United Kingdom; Kwôri, United Kingdom},
abstract={Smart contracts might encode legal contracts written in natural language to represent the contracting parties' shared understandings and intentions. The issues and research challenges involved in the validation and verification of smart contracts, particularly those running over blockchains and distributed ledgers, are explored. © 1970-2012 IEEE.},
author_keywords={blockchain;  distributed-ledger technology;  DLT;  financial technology;  semantics;  smart contract;  validation;  verification},
keywords={Computer science;  Computers;  Deep level transient spectroscopy;  Verification, Block-chain;  Legal contracts;  Natural languages;  Research agenda;  Research challenges;  Shared understanding;  validation;  Validation and verification, Semantics},
correspondence_address1={Magazzeni, D.; King's College LondonUnited Kingdom; email: daniele.magazzeni@kcl.ac.uk},
publisher={IEEE Computer Society},
issn={00189162},
coden={CPTRB},
language={English},
abbrev_source_title={Computer},
document_type={Article},
source={Scopus},
}

@ARTICLE{Norta2017595,
author={Norta, A.},
title={Designing a smart-contract application layer for transacting decentralized autonomous organizations},
journal={Communications in Computer and Information Science},
year={2017},
volume={721},
pages={595-604},
doi={10.1007/978-981-10-5427-3_61},
note={cited By 1},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85028027116&doi=10.1007%2f978-981-10-5427-3_61&partnerID=40&md5=09846f3f3ea5650a736190bada742ea0},
affiliation={Department of Software Systems, Tallinn University of Technology, Akadeemia tee 15A, Tallinn, Estonia},
abstract={This keynote paper addresses existing problems with traditional non-machine readable contracts that are based on trust. Such contracts have mostly a ceremonial purpose between transacting business parties and when conflicts occur, traditional contracts are often not enforcible. On the other hand, so called smart contracts that are machine readable and supported by blockchain-technology transaction-alities, do not require qualitative trust between contracting parties as blockchain establish instead a quantitative notion of trust. However, currently existing smart-contract solutions that equip the protocol layer on top of blockchains with Turing-complete programming languages, lead to the false claim by industry practitioners they can manage smart contracts successfully. Instead, it is important to start considering the currently missing application layer for smart contracts. © Springer Nature Singapore Pte Ltd. 2017.},
author_keywords={Blockchain;  Decentralized autonomous organization;  E-governance;  Lifecycle management;  Smart contract},
correspondence_address1={Norta, A.; Department of Software Systems, Tallinn University of Technology, Akadeemia tee 15A, Estonia; email: alex.norta.phd@ieee.org},
editor={Tyagi V., Grosky W., Gupta P.K., Oren T., Singh M., Sharma A.},
publisher={Springer Verlag},
issn={18650929},
isbn={9789811054266},
language={English},
abbrev_source_title={Commun. Comput. Info. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{AlKhalil2017510,
author={Al Khalil, F. and Butler, T. and O’Brien, L. and Ceci, M.},
title={Trust in smart contracts is a process, as well},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2017},
volume={10323 LNCS},
pages={510-519},
doi={10.1007/978-3-319-70278-0_32},
note={cited By 1},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85035119302&doi=10.1007%2f978-3-319-70278-0_32&partnerID=40&md5=c586d36899c5778e449f29b6f90b6dd8},
affiliation={Governance, Risk, and Compliance Technology Center, University College Cork, Cork, Ireland},
abstract={Distributed ledger technologies are rising in popularity, mainly for the host of financial applications they potentially enable, through smart contracts. Several implementations of distributed ledgers have been proposed, and different languages for the development of smart contracts have been suggested. A great deal of attention is given to the practice of development, i.e. programming, of smart contracts. In this position paper, we argue that more attention should be given to the “traditional developers” of contracts, namely the lawyers, and we propose a list of requirements for a human and machine-readable contract authoring language, friendly to lawyers, serving as a common (and a specification) language, for programmers, and the parties to a contract. © International Financial Cryptography Association 2017.},
keywords={Cryptography;  Electronic money;  Finance;  Thallium compounds, Authoring languages;  Financial applications;  Position papers, Chromium compounds},
correspondence_address1={Al Khalil, F.; Governance, Risk, and Compliance Technology Center, University College CorkIreland; email: firas.alkhalil@ucc.ie},
editor={Miller A., Brenner M., Rohloff K., Bonneau J., Teague V., Bracciali A., Sala M., Pintore F., Jakobsson M., Ryan P.Y.A.},
publisher={Springer Verlag},
issn={03029743},
isbn={9783319702773},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Eskandari2017553,
author={Eskandari, S. and Clark, J. and Sundaresan, V. and Adham, M.},
title={On the feasibility of decentralized derivatives markets},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2017},
volume={10323 LNCS},
pages={553-567},
doi={10.1007/978-3-319-70278-0_35},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85035081546&doi=10.1007%2f978-3-319-70278-0_35&partnerID=40&md5=c6d632a53ea3e27f591c000a38d4f06f},
affiliation={Bitaccess, Ottawa, Canada; Concordia University, Montreal, Canada},
abstract={In this paper, we present Velocity, a decentralized market deployed on Ethereum for trading a custom type of derivative option. To enable the smart contract to work, we also implement a price fetching tool called PriceGeth. We present this as a case study, noting challenges in development of the system that might be of independent interest to whose working on smart contract implementations. We also apply recent academic results on the security of the Solidity smart contract language in validating our code’s security. Finally, we discuss more generally the use of smart contracts in modelling financial derivatives. © International Financial Cryptography Association 2017.},
keywords={Commerce;  Cryptography;  Electronic money;  Finance;  Financial markets;  Thallium compounds, Contract languages;  Financial derivatives, Chromium compounds},
correspondence_address1={Clark, J.; Concordia UniversityCanada; email: j.clark@concordia.ca},
editor={Miller A., Brenner M., Rohloff K., Bonneau J., Teague V., Bracciali A., Sala M., Pintore F., Jakobsson M., Ryan P.Y.A.},
publisher={Springer Verlag},
issn={03029743},
isbn={9783319702773},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Hirai2017520,
author={Hirai, Y.},
title={Defining the ethereum virtual machine for interactive theorem provers},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2017},
volume={10323 LNCS},
pages={520-535},
doi={10.1007/978-3-319-70278-0_33},
note={cited By 4},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85035145324&doi=10.1007%2f978-3-319-70278-0_33&partnerID=40&md5=4366341f7baba9eb7642f45155ba5e55},
affiliation={Ethereum Foundation, Berlin, Germany},
abstract={Smart contracts in Ethereum are executed by the Ethereum Virtual Machine (EVM). We defined EVM in Lem, a language that can be compiled for a few interactive theorem provers. We tested our definition against a standard test suite for Ethereum implementations. Using our definition, we proved some safety properties of Ethereum smart contracts in an interactive theorem prover Isabelle/HOL. To our knowledge, ours is the first formal EVM definition for smart contract verification that implements all instructions. Our definition can serve as a basis for further analysis and generation of Ethereum smart contracts. © International Financial Cryptography Association 2017.},
keywords={Chromium compounds;  Computation theory;  Cryptography;  Electronic money;  Network security;  Open systems;  Thallium compounds;  Virtual machine, Interactive theorem prover;  Isabelle;  Safety property;  Standard tests, Theorem proving},
correspondence_address1={Hirai, Y.; Ethereum FoundationGermany; email: yoichi@ethereum.org},
editor={Miller A., Brenner M., Rohloff K., Bonneau J., Teague V., Bracciali A., Sala M., Pintore F., Jakobsson M., Ryan P.Y.A.},
publisher={Springer Verlag},
issn={03029743},
isbn={9783319702773},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Biryukov2017453,
author={Biryukov, A. and Khovratovich, D. and Tikhomirov, S.},
title={Findel: Secure derivative contracts for ethereum},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2017},
volume={10323 LNCS},
pages={453-467},
doi={10.1007/978-3-319-70278-0_28},
note={cited By 2},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85035143472&doi=10.1007%2f978-3-319-70278-0_28&partnerID=40&md5=2757de2d38e6de4b30f42c7a9e864812},
affiliation={SnT, University of Luxembourg, Esch-sur-Alzette, Luxembourg},
abstract={Blockchain-based smart contracts are considered a promising technology for handling financial agreements securely. In order to realize this vision, we need a formal language to unambiguously describe contract clauses. We introduce Findel – a purely declarative financial domain-specific language (DSL) well suited for implementation in blockchain networks. We implement an Ethereum smart contract that acts as a marketplace for Findel contracts and measure the cost of its operation. We analyze challenges in modeling financial agreements in decentralized networks and outline directions for future work (See the author’s post-print at https://orbilu.uni.lu/handle/10993/30975 and the related source code at https://github.com/cryptolu/findel). © International Financial Cryptography Association 2017.},
author_keywords={Blockchain;  Domain-specific language;  Financial engineering;  Smart contracts},
keywords={Chromium compounds;  Computer programming languages;  Cryptography;  Electronic money;  Formal languages;  HTTP;  Problem oriented languages;  Thallium compounds, Block-chain;  Contract clause;  Decentralized networks;  Domain specific languages;  Financial domains;  Financial engineering;  Source codes, Finance},
correspondence_address1={Tikhomirov, S.; SnT, University of LuxembourgLuxembourg; email: sergey.s.tikhomirov@gmail.com},
editor={Miller A., Brenner M., Rohloff K., Bonneau J., Teague V., Bracciali A., Sala M., Pintore F., Jakobsson M., Ryan P.Y.A.},
publisher={Springer Verlag},
issn={03029743},
isbn={9783319702773},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Mell2017410,
author={Mell, P. and Kelsey, J. and Shook, J.},
title={Cryptocurrency smart contracts for distributed consensus of public randomness},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2017},
volume={10616 LNCS},
pages={410-425},
doi={10.1007/978-3-319-69084-1_31},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85032701559&doi=10.1007%2f978-3-319-69084-1_31&partnerID=40&md5=34011dd461fd4c8134c927819c688714},
affiliation={National Institute of Standards and Technology, Gaithersburg, MD, United States; Department of Electrical Engineering, ESAT/COSIC, KU Leuven, Leuven, Belgium},
abstract={Most modern electronic devices can produce a random number. However, it is difficult to see how a group of mutually distrusting entities can have confidence in any such hardware-produced stream of random numbers, since the producer could control the output to their gain. In this work, we use public and immutable cryptocurrency smart contracts, along with a set of potentially malicious randomness providers, to produce a trustworthy stream of timestamped public random numbers. Our contract eliminates the ability of a producer to predict or control the generated random numbers, including the stored history of random numbers. We consider and mitigate the threat of collusion between the randomness providers and miners in a second, more complex contract. © Springer International Publishing AG 2017.},
keywords={Computer hardware description languages;  Electronic money;  Network security;  Random processes;  Stabilization, Distributed consensus;  Electronic device;  Random Numbers, Random number generation},
correspondence_address1={Mell, P.; National Institute of Standards and TechnologyUnited States; email: peter.mell@nist.gov},
editor={Tsigas P., Spirakis P.},
publisher={Springer Verlag},
issn={03029743},
isbn={9783319690834},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@BOOK{Dannen20171,
author={Dannen, C.},
title={Introducing ethereum and solidity: Foundations of cryptocurrency and blockchain programming for beginners},
journal={Introducing Ethereum and Solidity: Foundations of Cryptocurrency and Blockchain Programming for Beginners},
year={2017},
pages={1-185},
doi={10.1007/978-1-4842-2535-6},
note={cited By 6},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85019713401&doi=10.1007%2f978-1-4842-2535-6&partnerID=40&md5=9edc7410f6adf375f204bd7ec538bece},
affiliation={Brooklyn, NY, United States},
abstract={Learn how to use Solidity and the Ethereum project - second only to Bitcoin in market capitalization. Blockchain protocols are taking the world by storm, and the Ethereum project, with its Turing-complete scripting language Solidity, has rapidly become a front-runner. This book presents the blockchain phenomenon in context; then situates Ethereum in a world pioneered by Bitcoin. See why professionals and non-professionals alike are honing their skills in smart contract patterns and distributed application development. You’ll review the fundamentals of programming and networking, alongside its introduction to the new discipline of crypto-economics. You’ll then deploy smart contracts of your own, and learn how they can serve as a back-end for JavaScript and HTML applications on the Web. Many Solidity tutorials out there today have the same flaw: they are written for”advanced” JavaScript developers who want to transfer their skills to a blockchain environment. Introducing Ethereum and Solidity is accessible to technology professionals and enthusiasts of “all levels." You’ll find exciting sample code that can move forward real world assets in both the academic and the corporate arenas. Find out now why this book is a powerful gateway for creative technologists of all types, from concept to deployment. © 2017 by Chris Dannen.},
author_keywords={Bitcoin;  Blockchain;  Cryptocurrency;  Ethereum solidity;  Html;  Javascript;  Mist wallet;  The dapp stack;  Unix;  Web app development},
correspondence_address1={Dannen, C.United States},
publisher={Apress Media LLC},
isbn={9781484225356; 9781484225349},
language={English},
abbrev_source_title={Introducing Ethereum and Solidity: Foundations of Cryptocurrency and Blockchain Program. for Beginners},
document_type={Book},
source={Scopus},
}

@ARTICLE{Seijas2017631,
author={Seijas, P.L. and Thompson, S. and McAdams, D.},
title={Scripting smart contracts for distributed ledger technology},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2017},
volume={10323 LNCS},
pages={631-632},
doi={10.1007/978-3-319-70278-0},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85035119614&doi=10.1007%2f978-3-319-70278-0&partnerID=40&md5=27a281964448c148b7d7d62c504d3388},
affiliation={University of Kent, Canterbury, United Kingdom; San Francisco, CA, United States},
abstract={We give an overview of the scripting languages used in existing cryptocurrencies, and in particular we review in some detail the scripting languages of Bitcoin, Nxt and Ethereum, in the context of a high-level overview of Distributed Ledger Technology and cryptocurrencies. We survey different approaches, and give an overview of critiques of existing languages. We also cover technologies that might be used to underpin extensions and innovations in scripting and contracts, including technologies for verification, such as zero knowledge proofs, proof-carrying code and static analysis, as well as approaches to making systems more efficient, e.g. Merkelized Abstract Syntax Trees. © International Financial Cryptography Association 2017.},
keywords={Chromium compounds;  Cryptography;  Electronic money;  Static analysis;  Thallium compounds;  Trees (mathematics), Abstract Syntax Trees;  Proof-carrying code;  Scripting languages;  Zero knowledge proof, High level languages},
correspondence_address1={Seijas, P.L.; University of KentUnited Kingdom; email: pl240@kent.ac.uk},
editor={Miller A., Brenner M., Rohloff K., Bonneau J., Teague V., Bracciali A., Sala M., Pintore F., Jakobsson M., Ryan P.Y.A.},
publisher={Springer Verlag},
issn={03029743},
isbn={9783319702773},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Delgado-Segura2017,
author={Delgado-Segura, S. and Pérez-Solà, C. and Navarro-Arribas, G. and Herrera-Joancomartí, J.},
title={A fair protocol for data trading based on Bitcoin transactions},
journal={Future Generation Computer Systems},
year={2017},
doi={10.1016/j.future.2017.08.021},
note={cited By 2; Article in Press},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85028340613&doi=10.1016%2fj.future.2017.08.021&partnerID=40&md5=9b53a3ca7592ca827888988f4e6f809f},
affiliation={Department of Information Engineering and Communications, Universitat Autònoma de Barcelona, Spain},
abstract={On-line commercial transactions involve an inherent mistrust between participant parties since, sometimes, no previous relation exists between them. Such mistrust may be a deadlock point in a trade transaction where the buyer does not want to perform the payment until the seller sends the goods and the seller does not want to do so until the buyer pays for the purchase. In this paper we present a fair protocol for data trading where the commercial deal, in terms of delivering the data and performing the payment, is atomic, since the seller cannot redeem the payment unless the buyer obtains the data and the buyer cannot obtain the data without performing the payment. The protocol is based on Bitcoin scripting language and the fairness of the protocol can be probabilistically enforced. © 2017 Elsevier B.V.},
author_keywords={Bitcoin;  Blockchain;  Fair exchange protocol;  Smart contracts},
keywords={Commerce;  Sales, Bitcoin;  Block-chain;  Commercial transactions;  Fair-exchange protocols;  Protocol cans;  Scripting languages, Electronic money},
correspondence_address1={Delgado-Segura, S.email: sdelgado@deic.uab.cat},
publisher={Elsevier B.V.},
issn={0167739X},
coden={FGCSE},
language={English},
abbrev_source_title={Future Gener Comput Syst},
document_type={Article in Press},
source={Scopus},
}

@CONFERENCE{Frantz2016210,
author={Frantz, C.K. and Nowostawski, M.},
title={From institutions to code: Towards automated generation of smart contracts},
journal={Proceedings - IEEE 1st International Workshops on Foundations and Applications of Self-Systems, FAS-W 2016},
year={2016},
pages={210-215},
doi={10.1109/FAS-W.2016.53},
art_number={7789470},
note={cited By 11},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85011029534&doi=10.1109%2fFAS-W.2016.53&partnerID=40&md5=b1fadf47b5407c04220a6f42ed181345},
affiliation={Otago Polytechnic, Dunedin, New Zealand; Norwegian University of Science and Technology, Gjøvik, Norway},
abstract={Blockchain technology has emerged as a solution to consistency problems in peer to peer networks. By now, it has matured as a solution to a range of use cases in which it can effectively provide the notion of third party trust without the need for a trusted (physical) third party, which makes it an attractive coordination mechanism for distributed systems. To promote the wide adoption of this technology, we yet lack mechanisms that make the specification and interpretation of smart contracts accessible to a broader audience. In this work, we propose a modeling approach that supports the semi-Automated translation of human-readable contract representations into computational equivalents in order to enable the codification of laws into verifiable and enforceable computational structures that reside within a public blockchain. We identify smart contract components that correspond to real world institutions, and propose a mapping that we operationalize using a domain-specific language in order to support the contract modeling process. We explore this capability based on selected examples and plot out directions for future research on smart contracts. © 2016 IEEE.},
author_keywords={Autonomy;  Bitcoin;  Blockchain;  Code generation;  Distributed autonomous institutions;  Domain-specific language;  Ethereum;  Institutional grammar;  Institutions;  Model-driven development;  Public ledger;  Smart contracts;  Solidity},
keywords={Automation;  Computer programming languages;  Distributed computer systems;  Modeling languages;  Problem oriented languages;  Societies and institutions, Autonomy;  Bitcoin;  Block-chain;  Code Generation;  Domain specific languages;  Ethereum;  Institutional grammar;  Model driven development;  Public ledger;  Solidity, Peer to peer networks},
editor={Lewis P.R., Muller-Schloer C., Elnikety S.},
publisher={Institute of Electrical and Electronics Engineers Inc.},
isbn={9781509036516},
language={English},
abbrev_source_title={Proc. - IEEE Int. Workshops Found. Appl. Self-Syst., FAS-W},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Eshuis201620,
author={Eshuis, R. and Norta, A. and Roulaux, R.},
title={Evolving process views},
journal={Information and Software Technology},
year={2016},
volume={80},
pages={20-35},
doi={10.1016/j.infsof.2016.08.004},
note={cited By 3},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84982189376&doi=10.1016%2fj.infsof.2016.08.004&partnerID=40&md5=7c8b25b582315d28427e7ef2b363f896},
affiliation={Eindhoven University of Technology, Netherlands; Department of Informatics, Tallinn University of Technology, Estonia},
abstract={Context: Process views support the paradigm of Business Process Outsourcing, in which providers perform business processes on behalf of their clients. A public process view shields secret or irrelevant details from a private, internal business process, thus allowing a provider to reveal only relevant, non-confidential parts of its business process to its clients. Providers can change their internal business processes that may result in inconsistencies with the corresponding process views. Objective:This paper aims to develop an approach for propagating changes from an internal, private process to its public process view, such that the internal process and its process view remain consistent. Method:We develop the approach in a formal way. Definitions of process models and process views are based on BPEL, the standard language for realizing process models using state-of-the-art service-oriented technology. We validate the feasibility of the approach by showing how it can be supported by a conceptual system architecture. Results:The approach relies on two key results. First, a formal characterization of the set of private changes to an internal process, i.e., changes that do not need to be propagated to the process view. Second, a characterization of the non-private changes that can safely be propagated from an internal process to its process view such that they remain consistent. Other non-private changes result in an internal process and a process view that are not consistent. The approach is supported by a system architecture for process-based business collaboration. Conclusion: The approach supports providers in deciding if and how changes to a private, internal process propagate to its public process view such that the process view and the internal process remain consistent. The approach allows clients to monitor a public process view such that they can safely track changes made to a private, internal process. © 2016 Elsevier B.V.},
author_keywords={Business process management;  Decentralized autonomous organization;  E-governance;  Inter-organizational;  Process evolution;  Process visibility;  Smart contract},
keywords={Administrative data processing;  Enterprise resource management;  Government data processing, Business collaboration;  Business process management;  Business process outsourcing;  Conceptual systems;  E-governance;  Inter-organizational;  Process evolution;  System architectures, Computer architecture},
correspondence_address1={Eshuis, R.; Eindhoven University of TechnologyNetherlands; email: h.eshuis@tue.nl},
publisher={Elsevier B.V.},
issn={09505849},
coden={ISOTE},
language={English},
abbrev_source_title={Inf Software Technol},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Juels2016283,
author={Juels, A. and Kosba, A. and Shi, E.},
title={The ring of gyges: Investigating the future of criminal smart contracts},
journal={Proceedings of the ACM Conference on Computer and Communications Security},
year={2016},
volume={24-28-October-2016},
pages={283-295},
doi={10.1145/2976749.2978362},
note={cited By 10},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84995514219&doi=10.1145%2f2976749.2978362&partnerID=40&md5=810823b09a899f7771fea49ab7b09f41},
affiliation={Cornell Tech, Jacobs Institute IC3, United States; University of Maryland, United States; Cornell University IC3, United States},
abstract={Thanks to their anonymity (pseudonymity) and elimination of trusted intermediaries, cryptocurrencies such as Bitcoin have created or stimulated growth in many businesses and communities. Unfortunately, some of these are criminal, e.g., money laundering, illicit marketplaces, and ransomware. Next-generation cryptocurrencies such as Ethereum will include rich scripting languages in support of smart contracts, programs that autonomously intermediate transactions. In this paper, we explore the risk of smart contracts fueling new criminal ecosystems. Specifically, we show how what we call criminal smart contracts (CSCs) can facilitate leakage of confidential information, theft of cryptographic keys, and various real-world crimes (murder, arson, terrorism). We show that CSCs for leakage of secrets (a la Wikileaks) are efficiently realizable in existing scripting languages such as that in Ethereum. We show that CSCs for theft of cryptographic keys can be achieved using primitives, such as Succinct Non-interactive ARguments of Knowledge (SNARKs), that are already expressible in these languages and for which efficient supporting language extensions are anticipated. We show similarly that authenticated data feeds, an emerging feature of smart contract systems, can facilitate CSCs for real-world crimes (e.g., property crimes). Our results highlight the urgency of creating policy and technical safeguards against CSCs in order to realize the promise of smart contracts for beneficial goals. © 2016 ACM.},
author_keywords={Criminal smart contracts;  Ethereum},
keywords={Cryptography;  Electronic data interchange;  Electronic money, Confidential information;  Cryptographic key;  Data feed;  Ethereum;  Language extensions;  Money laundering;  Real-world;  Scripting languages, Crime},
publisher={Association for Computing Machinery},
issn={15437221},
isbn={9781450341394},
language={English},
abbrev_source_title={Proc ACM Conf Computer Commun Secur},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Bhargavan201691,
author={Bhargavan, K. and Delignat-Lavaud, A. and Fournet, C. and Gollamudi, A. and Gonthier, G. and Kobeissi, N. and Kulatova, N. and Rastogi, A. and Sibut-Pinote, T. and Swamy, N. and Zanella-Béguelin, S.},
title={Formal verification of smart contracts: Short paper},
journal={PLAS 2016 - Proceedings of the 2016 ACM Workshop on Programming Languages and Analysis for Security, co-located with CCS 2016},
year={2016},
pages={91-96},
doi={10.1145/2993600.2993611},
note={cited By 23},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84998854579&doi=10.1145%2f2993600.2993611&partnerID=40&md5=79d316c7e8c735bff28d681ab8b8e993},
affiliation={Inria, United States; Microsoft Research, United States; Harvard University, United States},
abstract={Ethereum is a framework for cryptocurrencies which uses blockchain technology to provide an open global comput- ing platform, called the Ethereum Virtual Machine (EVM). EVM executes bytecode on a simple stack machine. Pro- grammers do not usually write EVM code; instead, they can program in a JavaScript-like language, called Solidity, that compiles to bytecode. Since the main purpose of EVM is to execute smart contracts that manage and transfer digital assets (called Ether), security is of paramount importance. However, writing secure smart contracts can be extremely diffcult: due to the openness of Ethereum, both programs and pseudonymous users can call into the public methods of other programs, leading to potentially dangerous com- positions of trusted and untrusted code. This risk was re- cently illustrated by an attack on TheDAO contract that exploited subtle details of the EVM semantics to transfer roughly $50M worth of Ether into the control of an attacker. In this paper, we outline a framework to analyze and verify both the runtime safety and the functional correctness of Ethereum contracts by translation to F∗, a functional pro- gramming language aimed at program verification. © 2016 ACM.},
keywords={Ethers;  Formal verification;  Java programming language;  Semantics, Block-chain;  Digital assets;  Functional correctness;  Javascript;  Program Verification;  Stack machines;  Untrusted code;  Virtual machines, Program translators},
publisher={Association for Computing Machinery, Inc},
isbn={9781450345743},
language={English},
abbrev_source_title={PLAS - Proc. ACM Workshop Program. Lang. Anal. Secur., co-located CCS},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{NoAuthor2016,
title={PLAS 2016 - Proceedings of the 2016 ACM Workshop on Programming Languages and Analysis for Security, co-located with CCS 2016},
journal={PLAS 2016 - Proceedings of the 2016 ACM Workshop on Programming Languages and Analysis for Security, co-located with CCS 2016},
year={2016},
page_count={113},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84999006727&partnerID=40&md5=48dbf8eeb5640ec075203b0f40b931a1},
abstract={The proceedings contain 11 papers. The topics discussed include: static detection of user-specified security vulnerabilities in client-side JavaScript; on formalizing information-flow control libraries; future-dependent flow policies with prophetic variables; in-depth enforcement of dynamic integrity taint analysis; JSPChecker: static detection of context-sensitive cross-site scripting flaws in legacy web applications; rusty types for solid safety; bounding information leakage using implication graph; dynamic leakage - a need for a new quantitative information flow measure; formal verification of smart contracts; automatic trigger generation for rule-based smart homes; and Superhacks: exploring and preventing vulnerabilities in b28rowser binding code.},
publisher={Association for Computing Machinery, Inc},
isbn={9781450345743},
language={English},
abbrev_source_title={PLAS - Proc. ACM Workshop Program. Lang. Anal. Secur., co-located CCS},
document_type={Conference Review},
source={Scopus},
}

@ARTICLE{Marino2016151,
author={Marino, B. and Juels, A.},
title={Setting standards for altering and undoing smart contracts},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2016},
volume={9718},
pages={151-166},
doi={10.1007/978-3-319-42019-6_10},
note={cited By 9},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84978943230&doi=10.1007%2f978-3-319-42019-6_10&partnerID=40&md5=aba98f8feec9882ab498ffd024ff9b46},
affiliation={Cornell Tech, New York, United States; Cornell Tech, Jacobs Institute, New York, United States},
abstract={Often, we wish to let parties alter or undo a contract that has been made. Toward this end, contract law has developed a set of traditional tools for altering and undoing contracts. Unfortunately, these tools often fail when applied to smart contracts. It is therefore necessary to define a new set of standards for the altering and undoing of smart contracts. These standards might ensure that the tools we use to alter and undo smart contracts achieve their original (contract law) goals when applied to this new technology. This paper develops such a set of standards and, then, to prove their worth as a framework, applies to them to an existing smart contract platform (Ethereum). © Springer International Publishing Switzerland 2016.},
author_keywords={Blockchain;  Contract law;  Ethereum;  Smart contracts},
keywords={Computer programming languages;  Standards, Block-chain;  Contract laws;  Ethereum, Contracts},
correspondence_address1={Marino, B.; Cornell TechUnited States; email: wlm67@cornell.edu},
editor={Roman D., Alferes J.J., Fodor P., Bertossi L., Governatori G.},
publisher={Springer Verlag},
issn={03029743},
isbn={9783319420189},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Idelberger2016167,
author={Idelberger, F. and Governatori, G. and Riveret, R. and Sartor, G.},
title={Evaluation of logic-based smart contracts for blockchain systems},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2016},
volume={9718},
pages={167-183},
doi={10.1007/978-3-319-42019-6_11},
note={cited By 8},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84978955311&doi=10.1007%2f978-3-319-42019-6_11&partnerID=40&md5=07d4733cb9570bbe07d938443c89b34b},
affiliation={European University Institute, Fiesole, Italy; Data61, CSIRO, NICTA, Brisbane, Australia},
abstract={While procedural languages are commonly used to program smart contracts in blockchain systems, logic-based languages may be interesting alternatives. In this paper, we inspect what are the possible legal and technical (dis)advantages of logic-based smart contracts in light of common activities featuring ordinary contracts, then we provide insights on how to use such logic-based smart contracts in combination with blockchain systems. These insights lead us to emphasize a fundamental challenge - algorithms for logic approaches have to be efficient, but they also need to be literally cheap as measured within the environment where they are deployed and according to its economic rules. We illustrate this with different algorithms from defeasible logic-based frameworks. © Springer International Publishing Switzerland 2016.},
author_keywords={Blockchain;  Logic;  Programming paradigm;  Smart contract},
keywords={Computational linguistics;  Computer programming languages;  Reconfigurable hardware, Block-chain;  Defeasible logic;  Economic rules;  Logic;  Logic-based languages;  Procedural languages;  Programming paradigms, Computer circuits},
correspondence_address1={Idelberger, F.; European University InstituteItaly; email: florian.idelberger@eui.eu},
editor={Roman D., Alferes J.J., Fodor P., Bertossi L., Governatori G.},
publisher={Springer Verlag},
issn={03029743},
isbn={9783319420189},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{NoAuthor20161,
title={10th International Symposium on Rule Technologies, RuleML 2016},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2016},
volume={9718},
pages={1-350},
note={cited By 0},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84979055737&partnerID=40&md5=c29d9fc33b0298c78871c44a11033b55},
abstract={The proceedings contain 22 papers. The special focus in this conference is on General RuleML Track, Smart Contracts, Blockchain, Constraint Handling Rules and Learning. The topics include: Handling complex process models conditions using first-order horn clauses; business rules uncertainty management with probabilistic relational models; a declarative semantics for a fuzzy logic language managing similarities and truth degrees; controlling the average behavior of business rules programs; bridge rules for reasoning in component-based heterogeneous environments; choreographic compilation of decentralized comprehension patterns; minimal objectification and maximal unnesting in PSOA ruleML; setting standards for altering and undoing smart contracts; evaluation of logic-based smart contracts for blockchain systems; smart contract time specifiability with blocktime; a numerical optimisation based characterisation of spatial reasoning; translation of cognitive models from act-r to constraint handling rules; enabling reasoning with legalruleML; SBVR to OWL 2 mapping in the domain of legal rules; OBDA constraints for effective query answering; a framework enhancing the user search activity through data posting; a regression-rule learning system for intervention optimization; rule-based real-time ADL recognition in a smart home environment and a context-sensitive, ontology-based rule language for assisted living in smart environments.},
editor={Roman D., Alferes J.J., Fodor P., Bertossi L., Governatori G.},
publisher={Springer Verlag},
issn={03029743},
isbn={9783319420189},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Review},
source={Scopus},
}

@ARTICLE{Banasik2016261,
author={Banasik, W. and Dziembowski, S. and Malinowski, D.},
title={Efficient zero-knowledge contingent payments in cryptocurrencies without scripts},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2016},
volume={9879 LNCS},
pages={261-280},
doi={10.1007/978-3-319-45741-3_14},
note={cited By 6},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84990837063&doi=10.1007%2f978-3-319-45741-3_14&partnerID=40&md5=a7f035cab170be5724463e4e1614dd53},
affiliation={University of Warsaw, Warsaw, Poland},
abstract={One of the most promising innovations offered by the cryptographic currencies (like Bitcoin) are the so-called smart contracts, which can be viewed as financial agreements between mutually distrusting participants. Their execution is enforced by the mechanics of the currency, and typically has monetary consequences for the parties. The rules of these contracts are written in the form of so-called “scripts”, which are pieces of code in some “scripting language”. Although smart contracts are believed to have a huge potential, for the moment they are not widely used in practice. In particular, most of Bitcoin miners allow only to post standard transactions (i.e.: those without the non-trivial scripts) on the blockchain. As a result, it is currently very hard to create non-trivial smart contracts in Bitcoin. Motivated by this, we address the following question: “is it possible to create non-trivial efficient smart contracts using the standard transactions only?” We answer this question affirmatively, by constructing efficient Zero-Knowledge Contingent Payment protocol for a large class of NP-relations. This includes the relations for which efficient sigma protocols exist. In particular, our protocol can be used to sell a factorization (p, q) of an RSA modulus n = pq, which is an example that we implemented and tested its efficiency in practice. As another example of the “smart contract without scripts” we show how our techniques can be used to implement the contract called “trading across chains”. © Springer International Publishing Switzerland 2016.},
keywords={Economics;  Security of data;  Security systems, Block-chain;  Contingent payments;  Its efficiencies;  Non-trivial;  Protocol cans;  Scripting languages;  Sigma protocols;  Zero knowledge, Electronic money},
correspondence_address1={Malinowski, D.; University of WarsawPoland; email: Daniel.Malinowski@crypto.edu.pl},
editor={Katsikas S., Meadows C., Askoxylakis I., Ioannidis S.},
publisher={Springer Verlag},
issn={03029743},
isbn={9783319457406},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{DeFilippi2016,
author={De Filippi, P. and Hassan, S.},
title={Blockchain technology as a regulatory technology: From code is law to law is code},
journal={First Monday},
year={2016},
volume={21},
number={12},
page_count={1},
doi={10.5210/fm.v21i12.7113},
note={cited By 5},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-85009376095&doi=10.5210%2ffm.v21i12.7113&partnerID=40&md5=1a5cdbd00313dfa7b8c3980537e6d10a},
affiliation={National Center of Scientific Research (CNRS), Paris, France; Berkman Klein Center for Internet and Society, Harvard University, United States; Universidad Complutense de Madrid, Spain},
abstract={"Code is law" refers to the idea that, with the advent of digital technology, code has progressively established itself as the predominant way to regulate the behavior of Internet users. Yet, while computer code can enforce rules more efficiently than legal code, it also comes with a series of limitations, mostly because it is difficult to transpose the ambiguity and flexibility of legal rules into a formalized language which can be interpreted by a machine. With the advent of blockchain technology and associated smart contracts, code is assuming an even stronger role in regulating people's interactions over the Internet, as many contractual transactions get transposed into smart contract code. In this paper, we describe the shift from the traditional notion of "code is law" (i.e., code having the effect of law) to the new conception of "law is code" (i.e., law being defined as code).},
correspondence_address1={Hassan, S.; Berkman Klein Center for Internet and Society, Harvard UniversityUnited States; email: samer@fdi.ucm.es},
publisher={First Monday},
issn={13960466},
language={English},
abbrev_source_title={First Monday},
document_type={Article},
source={Scopus},
}

@ARTICLE{Swan2016184,
author={Swan, M.},
title={Blockchain temporality: Smart contract time specifiability with blocktime},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2016},
volume={9718},
pages={184-196},
doi={10.1007/978-3-319-42019-6_12},
note={cited By 6},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84979043551&doi=10.1007%2f978-3-319-42019-6_12&partnerID=40&md5=77d8f0983484549116931aa6c7a50349},
affiliation={Philosophy and Economic Theory, New School for Social Research, New York, NY, United States},
abstract={The aims of this paper are to (1) provide a conceptual context for smart contracts, (2) argue that blockchains are a next-generation technology enabling much larger-scale and more complex computing projects, and (3) posit blocktime as a new mode of conceiving time. Blockchains are the distributed ledger technology underlying Bitcoin and other cryptocurrencies; the payments layer the Internet never had; a mechanism for updating truth states in distributed network computing through consensus trust; and overall, a new form of general computational substrate. Blocktime is the time over which a certain number of blocks will have confirmed; and this creates an alternative event trajectory in time which can be offset against human-time or other computing clocktime regimes for arbitrage or complementary purposes. The result of this effort is to show that blocktime allows the contingency of future events to be more robustly orchestrated through temporality as a selectable smart contract feature. © Springer International Publishing Switzerland 2016.},
author_keywords={Algorithmic trust;  Bitcoin;  Blockchain;  Byzantine agreement;  Cryptocurrency;  Decentralization;  Distributed computing;  Information theory;  Network computing;  Temporality},
keywords={Complex networks;  Computation theory;  Computer programming languages;  Electronic money;  Information theory, Algorithmic trust;  Bitcoin;  Block-chain;  Byzantine Agreement;  Decentralization;  Network computing;  Temporality, Distributed computer systems},
correspondence_address1={Swan, M.; Philosophy and Economic Theory, New School for Social ResearchUnited States; email: m@melanieswan.com},
editor={Roman D., Alferes J.J., Fodor P., Bertossi L., Governatori G.},
publisher={Springer Verlag},
issn={03029743},
isbn={9783319420189},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Hull201618,
author={Hull, R. and Batra, V.S. and Chen, Y.-M. and Deutsch, A. and Heath, F.F.T., III and Vianu, V.},
title={Towards a shared ledger business collaboration language based on data-aware processes},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2016},
volume={9936 LNCS},
pages={18-36},
doi={10.1007/978-3-319-46295-0_2},
note={cited By 9},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84989352630&doi=10.1007%2f978-3-319-46295-0_2&partnerID=40&md5=e65b8abd94ff8c3be8b89efa70a992a4},
affiliation={IBM T.J. Watson Research Center, Yorktown Heights, NY, United States; IBM India Research Lab, New Delhi, DL, India; University of California, La Jolla, San Diego, CA, United States},
abstract={Shared ledger technologies, as exemplified by Blockchain, provide a new framework for supporting business collaborations that is based on having a high-reliability, shared, trusted, privacy-preserving, nonrepudiable data repository that includes programmable logic in the form of “smart contracts”. The framework has the potential to dramatically transform business collaboration across numerous industry sectors, including finance, supply chain, food production, pharmaceuticals, and healthcare. Widespread adoption of this technology will be accelerated by the development of business-level languages for specifying smart contracts. This paper proposes that data-aware business processes, and in particular the Business Artifact paradigm, can provide a robust basis for a shared ledger Business Collaboration Language (BCL). The fundamental rationale for adopting data-aware processes is that shared ledgers focus on both data and process in equal measure. The paper examines potential advantages of the artifact-based approach from two perspectives: conceptual modeling, and opportunities for formal reasoning (verification). Broad research challenges for the development, understanding, and usage of a shared ledger BCL are highlighted. © Springer International Publishing Switzerland 2016.},
keywords={Computation theory;  Data privacy;  Supply chains, Artifact based approach;  Business Artifacts;  Business collaboration;  Data repositories;  Formal reasoning;  Privacy preserving;  Programmable logic;  Research challenges, Distributed computer systems},
correspondence_address1={Hull, R.; IBM T.J. Watson Research CenterUnited States; email: hull@us.ibm.com},
editor={Tata S., Stroulia E., Bhiri S., Sheng Q.Z.},
publisher={Springer Verlag},
issn={03029743},
isbn={9783319462943},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Miller20131,
author={Miller, M.S. and Van Cutsem, T. and Tulloh, B.},
title={Distributed electronic rights in JavaScript},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2013},
volume={7792 LNCS},
pages={1-20},
doi={10.1007/978-3-642-37036-6_1},
note={cited By 4},
url={https://www.scopus.com/inward/record.uri?eid=2-s2.0-84874403704&doi=10.1007%2f978-3-642-37036-6_1&partnerID=40&md5=6ab5b951bb524d2dd4f7f3414f67e4a6},
affiliation={Google, Inc., United States; Vrije Universiteit Brussel, Belgium},
abstract={Contracts enable mutually suspicious parties to cooperate safely through the exchange of rights. Smart contracts are programs whose behavior enforces the terms of the contract. This paper shows how such contracts can be specified elegantly and executed safely, given an appropriate distributed, secure, persistent, and ubiquitous computational fabric. JavaScript provides the ubiquity but must be significantly extended to deal with the other aspects. The first part of this paper is a progress report on our efforts to turn JavaScript into this fabric. To demonstrate the suitability of this design, we describe an escrow exchange contract implemented in 42 lines of JavaScript code. © 2013 Springer-Verlag.},
author_keywords={distributed objects;  object-capabilities;  security;  smart contracts},
keywords={Distributed objects;  Javascript;  object-capabilities;  Progress report;  security, Scheduling, High level languages},
correspondence_address1={Miller, M.S.; Google, Inc.United States},
issn={03029743},
isbn={9783642370359},
language={English},
abbrev_source_title={Lect. Notes Comput. Sci.},
document_type={Conference Paper},
source={Scopus},
}
